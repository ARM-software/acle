[INFO] Not rendering RawBlock (Format "html") "<!---Do not remove!\n\nThis token is necessary to generate the Table of Contents via Jekyll. --->"
[INFO] Not rendering RawInline (Format "html") "<!---END_OF_HTML_HEADER--->"
[makePDF] temp dir:
./tex2pdf.-cc69ef23c147effc
[makePDF] Command line:
pdflatex "-halt-on-error" "-interaction" "nonstopmode" "-output-directory" "./tex2pdf.-cc69ef23c147effc" "./tex2pdf.-cc69ef23c147effc/input.tex"

[makePDF] Environment:
("TEXINPUTS","./tex2pdf.-cc69ef23c147effc:")
("SHELL","/bin/bash")
("SESSION_MANAGER","local/valeriad-VirtualBox:@/tmp/.ICE-unix/1605,unix/valeriad-VirtualBox:/tmp/.ICE-unix/1605")
("QT_ACCESSIBILITY","1")
("COLORTERM","truecolor")
("XDG_CONFIG_DIRS","/etc/xdg/xdg-ubuntu:/etc/xdg")
("XDG_MENU_PREFIX","gnome-")
("GNOME_DESKTOP_SESSION_ID","this-is-deprecated")
("LANGUAGE","en_GB:en")
("GNOME_SHELL_SESSION_MODE","ubuntu")
("SSH_AUTH_SOCK","/run/user/1000/keyring/ssh")
("XMODIFIERS","@im=ibus")
("DESKTOP_SESSION","ubuntu")
("SSH_AGENT_PID","1557")
("GTK_MODULES","gail:atk-bridge")
("PWD","/home/valeria-d/Documents/GitProjects/acle")
("XDG_SESSION_DESKTOP","ubuntu")
("LOGNAME","valeria-d")
("XDG_SESSION_TYPE","x11")
("GPG_AGENT_INFO","/run/user/1000/gnupg/S.gpg-agent:0:1")
("XAUTHORITY","/run/user/1000/gdm/Xauthority")
("GJS_DEBUG_TOPICS","JS ERROR;JS LOG")
("WINDOWPATH","2")
("HOME","/home/valeria-d")
("USERNAME","valeria-d")
("IM_CONFIG_PHASE","1")
("LANG","en_GB.UTF-8")
("LS_COLORS","rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:")
("XDG_CURRENT_DESKTOP","ubuntu:GNOME")
("VTE_VERSION","6003")
("GNOME_TERMINAL_SCREEN","/org/gnome/Terminal/screen/f7e0af87_ca10_4663_b03a_6c6e98a32880")
("INVOCATION_ID","eb60e1ffe0514875ae8876420ae65548")
("MANAGERPID","1342")
("GJS_DEBUG_OUTPUT","stderr")
("LESSCLOSE","/usr/bin/lesspipe %s %s")
("XDG_SESSION_CLASS","user")
("TERM","xterm-256color")
("LESSOPEN","| /usr/bin/lesspipe %s")
("USER","valeria-d")
("GNOME_TERMINAL_SERVICE",":1.94")
("DISPLAY",":0")
("SHLVL","2")
("QT_IM_MODULE","ibus")
("XDG_RUNTIME_DIR","/run/user/1000")
("JOURNAL_STREAM","8:34158")
("XDG_DATA_DIRS","/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop")
("PATH","/home/valeria-d/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin")
("GDMSESSION","ubuntu")
("DBUS_SESSION_BUS_ADDRESS","unix:path=/run/user/1000/bus")
("OLDPWD","/home/valeria-d/Documents/GitProjects/acle/acle")
("_","/usr/bin/pandoc")

[makePDF] Contents of ./tex2pdf.-cc69ef23c147effc/input.tex:
\PassOptionsToPackage{unicode=true}{hyperref} % options for packages loaded elsewhere
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[]{article}
\usepackage{lmodern}
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\usepackage{fixltx2e} % provides \textsubscript
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provides euro and other symbols
\else % if luatex or xelatex
  \usepackage{unicode-math}
  \defaultfontfeatures{Ligatures=TeX,Scale=MatchLowercase}
\fi
% use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
% use microtype if available
\IfFileExists{microtype.sty}{%
\usepackage[]{microtype}
\UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\IfFileExists{parskip.sty}{%
\usepackage{parskip}
}{% else
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
}
\usepackage{hyperref}
\hypersetup{
            pdftitle={Arm C Language Extensions},
            pdfborder={0 0 0},
            breaklinks=true}
\urlstyle{same}  % don't use monospace font for urls
\usepackage{longtable,booktabs}
% Fix footnotes in tables (requires footnote package)
\IfFileExists{footnote.sty}{\usepackage{footnote}\makesavenoteenv{longtable}}{}
\setlength{\emergencystretch}{3em}  % prevent overfull lines
\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}
\setcounter{secnumdepth}{0}
% Redefines (sub)paragraphs to behave more like sections
\ifx\paragraph\undefined\else
\let\oldparagraph\paragraph
\renewcommand{\paragraph}[1]{\oldparagraph{#1}\mbox{}}
\fi
\ifx\subparagraph\undefined\else
\let\oldsubparagraph\subparagraph
\renewcommand{\subparagraph}[1]{\oldsubparagraph{#1}\mbox{}}
\fi

% set default figure placement to htbp
\makeatletter
\def\fps@figure{htbp}
\makeatother


\title{Arm C Language Extensions}
\date{}

\begin{document}
\maketitle

{
\setcounter{tocdepth}{3}
\tableofcontents
}
\begin{itemize}
\tightlist
\item
  TOC \{:toc\} \# Preface
\end{itemize}

\hypertarget{abstract}{%
\subsection{Abstract}\label{abstract}}

This document specifies the Arm C Language Extensions to enable C/C++
programmers to exploit the Arm architecture with minimal restrictions on
source code portability.

\hypertarget{keywords}{%
\subsection{Keywords}\label{keywords}}

ACLE, ABI, C, C++, compiler, armcc, gcc, intrinsic, macro, attribute,
Neon, SIMD, atomic

\hypertarget{latest-release-and-defects-report}{%
\subsection{Latest release and defects
report}\label{latest-release-and-defects-report}}

For the latest release of this document, see the
\href{https://github.com/ARM-software/acle}{ACLE project on GitHub}.

Please report defects in this specification to the
\href{https://github.com/ARM-software/acle/issues}{issue tracker page on
GitHub}.

\hypertarget{license}{%
\subsection{License}\label{license}}

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
\url{http://creativecommons.org/licenses/by-sa/4.0/} or send a letter to
Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

Grant of Patent License. Subject to the terms and conditions of this
license (both the Public License and this Patent License), each Licensor
hereby grants to You a perpetual, worldwide, non-exclusive, no-charge,
royalty-free, irrevocable (except as stated in this section) patent
license to make, have made, use, offer to sell, sell, import, and
otherwise transfer the Licensed Material, where such license applies
only to those patent claims licensable by such Licensor that are
necessarily infringed by their contribution(s) alone or by combination
of their contribution(s) with the Licensed Material to which such
contribution(s) was submitted. If You institute patent litigation
against any entity (including a cross-claim or counterclaim in a
lawsuit) alleging that the Licensed Material or a contribution
incorporated within the Licensed Material constitutes direct or
contributory patent infringement, then any licenses granted to You under
this license for that Licensed Material shall terminate as of the date
such litigation is filed.

\hypertarget{about-the-license}{%
\subsection{About the license}\label{about-the-license}}

As identified more fully in the \protect\hyperlink{license}{License}
section, this project is licensed under CC-BY-SA-4.0 along with an
additional patent license. The language in the additional patent license
is largely identical to that in Apache-2.0 (specifically, Section 3 of
Apache-2.0 as reflected at
\url{https://www.apache.org/licenses/LICENSE-2.0}) with two exceptions.

First, several changes were made related to the defined terms so as to
reflect the fact that such defined terms need to align with the
terminology in CC-BY-SA-4.0 rather than Apache-2.0 (e.g., changing
``Work'' to ``Licensed Material'').

Second, the defensive termination clause was changed such that the scope
of defensive termination applies to ``any licenses granted to You''
(rather than ``any patent licenses granted to You''). This change is
intended to help maintain a healthy ecosystem by providing additional
protection to the community against patent litigation claims.

\hypertarget{contributions}{%
\subsection{Contributions}\label{contributions}}

Contributions to this project are licensed under an inbound=outbound
model such that any such contributions are licensed by the contributor
under the same terms as those in the LICENSE file.

\hypertarget{trademark-notice}{%
\subsection{Trademark notice}\label{trademark-notice}}

The text of and illustrations in this document are licensed by Arm under
a Creative Commons Attribution--Share Alike 4.0 International license
(``CC-BY-SA-4.0''), with an additional clause on patents. The Arm
trademarks featured here are registered trademarks or trademarks of Arm
Limited (or its subsidiaries) in the US and/or elsewhere. All rights
reserved. Please visit
\url{https://www.arm.com/company/policies/trademarks} for more
information about Arm's trademarks.

\hypertarget{copyright}{%
\subsection{Copyright}\label{copyright}}

Copyright (c) 2011-2021, Arm Limited and its affiliates. All rights
reserved.

\hypertarget{about-this-document}{%
\subsection{About this document}\label{about-this-document}}

\hypertarget{change-control}{%
\subsubsection{Change control}\label{change-control}}

\hypertarget{change-history}{%
\paragraph{Change history}\label{change-history}}

\begin{longtable}[]{@{}llll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.07\columnwidth}\raggedright
\textbf{Issue}\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
\textbf{Date}\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
\textbf{By}\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
\textbf{Change}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
A\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
11/11/11\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
AG\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
First release\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
B\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
13/11/13\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
AG\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version 1.1. Editorial changes. Corrections and completions to
intrinsics as detailed in 3.3. Updated for C11/C++11.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
C\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
09/05/14\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
TB\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version 2.0. Updated for Armv8 AArch32 and AArch64.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
D\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
24/03/16\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
TB\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version 2.1. Updated for Armv8.1 AArch32 and AArch64.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
E\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
02/06/17\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q2 2017. Updated for Armv8.2-A and Armv8.3-A.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
F\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
30/04/18\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q2 2018. Updated for Armv8.4-A.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
G\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
30/03/19\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q1 2019. Updated for Armv8.5-A and MVE. Various
bugfixes.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
H\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
30/06/19\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q2 2019. Updated for TME and more Armv8.5-A intrinsics.
Various bugfixes.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
ACLE Q3 2019\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
30/09/19\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q3 2019.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
ACLE Q4 2019\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
31/12/19\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q4 2019.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
ACLE Q2 2020\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
31/05/20\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q2 2020.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
ACLE Q3 2020\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
31/10/20\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q3 2020.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.07\columnwidth}\raggedright
2021Q2\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
02 July 2021\strut
\end{minipage} & \begin{minipage}[t]{0.04\columnwidth}\raggedright
Arm\strut
\end{minipage} & \begin{minipage}[t]{0.70\columnwidth}\raggedright
Version ACLE Q2 2021. Open source version. NFCI.\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{changes-between-acle-q2-2020-and-acle-q3-2020}{%
\paragraph{Changes between ACLE Q2 2020 and ACLE Q3
2020}\label{changes-between-acle-q2-2020-and-acle-q3-2020}}

\begin{itemize}
\tightlist
\item
  Add support for features introduced in the Armv8.7-a architecture
  update.
\item
  Fix allowed values for \_\_ARM\_FEATURE\_CDE\_COPROC macro.
\end{itemize}

\hypertarget{changes-between-acle-q4-2019-and-acle-q2-2020}{%
\paragraph{Changes between ACLE Q4 2019 and ACLE Q2
2020}\label{changes-between-acle-q4-2019-and-acle-q2-2020}}

\begin{itemize}
\tightlist
\item
  Updates to CDE intrinsics.
\item
  Allow some Neon intrinsics previously available in A64 only in A32 as
  well.
\end{itemize}

\hypertarget{changes-between-acle-q3-2019-and-acle-q4-2019}{%
\paragraph{Changes between ACLE Q3 2019 and ACLE Q4
2019}\label{changes-between-acle-q3-2019-and-acle-q4-2019}}

\begin{itemize}
\tightlist
\item
  BETA support for the Custom Datapath Extension.
\item
  MVE intrinsics updates and fixes.
\item
  Feature macros for Pointer Authentication and Branch Target
  Identification.
\end{itemize}

\hypertarget{changes-between-acle-q2-2019-and-acle-q3-2019}{%
\paragraph{Changes between ACLE Q2 2019 and ACLE Q3
2019}\label{changes-between-acle-q2-2019-and-acle-q3-2019}}

\begin{itemize}
\tightlist
\item
  Support added for Armv8.6-A features.
\item
  Support added for random number instruction intrinsics from Armv8.5-A
  \protect\hyperlink{ARMARMv85}{{[}ARMARMv85{]}}.
\end{itemize}

\hypertarget{changes-between-acle-q1-2019-and-acle-q2-2019}{%
\paragraph{Changes between ACLE Q1 2019 and ACLE Q2
2019}\label{changes-between-acle-q1-2019-and-acle-q2-2019}}

\begin{itemize}
\tightlist
\item
  Support added for TME features.
\item
  Support added for rounding intrinsics from Armv8.5-A
  \protect\hyperlink{ARMARMv85}{{[}ARMARMv85{]}}.
\end{itemize}

\hypertarget{changes-between-acle-q2-2018-and-acle-q1-2019}{%
\paragraph{Changes between ACLE Q2 2018 and ACLE Q1
2019}\label{changes-between-acle-q2-2018-and-acle-q1-2019}}

\begin{itemize}
\tightlist
\item
  Support added for features introduced in Armv8.5-A
  \protect\hyperlink{ARMARMv85}{{[}ARMARMv85{]}} (including the MTE
  extension).
\item
  Support added for MVE \protect\hyperlink{MVE-spec}{{[}MVE-spec{]}}
  from the Armv8.1-M architecture.
\item
  Support added for Armv8.4-A half-precision extensions through Neon
  intrinsics.
\item
  Added feature detection macro for LSE atomic operations.
\item
  Added floating-point versions of intrinsics to access coprocessor
  registers.
\end{itemize}

\hypertarget{changes-between-acle-q2-2017-and-acle-q2-2018}{%
\paragraph{Changes between ACLE Q2 2017 and ACLE Q2
2018}\label{changes-between-acle-q2-2017-and-acle-q2-2018}}

Most changes in ACLE Q2 2018 are updates to support features introduced
in Armv8.3-A \protect\hyperlink{ARMARMv83}{{[}ARMARMv83{]}}. Support is
added for the Complex addition and Complex MLA intrinsics. Armv8.4-A
\protect\hyperlink{ARMARMv84}{{[}ARMARMv84{]}}. Support is added for the
Dot Product intrinsics.

\hypertarget{references}{%
\subsubsection{References}\label{references}}

This document refers to the following documents.

\hypertarget{terms-and-abbreviations}{%
\subsubsection{Terms and abbreviations}\label{terms-and-abbreviations}}

This document uses the following terms and abbreviations.

\begin{longtable}[]{@{}ll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\textbf{Term}\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
\textbf{Meaning}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
AAPCS\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
Arm Procedure Call Standard, part of the ABI, defined in
\protect\hyperlink{AAPCS}{{[}AAPCS{]}}.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
ABI\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
Arm Application Binary Interface.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
ACLE\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
Arm C Language Extensions, as defined in this document.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
Advanced SIMD\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
A 64-bit/128-bit SIMD instruction set defined as part of the Arm
architecture.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
build attributes\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
Object build attributes indicating configuration, as defined in
\protect\hyperlink{BA}{{[}BA{]}}.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
ILP32\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
A 32-bit address mode where long is a 32-bit type.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
LLP64\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
A 64-bit address mode where long is a 32-bit type.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
LP64\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
A 64-bit address mode where long is a 64-bit type.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
Neon\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
An implementation of the Arm Advanced SIMD extensions.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
SIMD\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
Any instruction set that operates simultaneously on multiple elements of
a vector data type.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
Thumb\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
The Thumb instruction set extension to Arm.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
VFP\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
The original Arm non-SIMD floating-point instruction set.\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
word\strut
\end{minipage} & \begin{minipage}[t]{0.80\columnwidth}\raggedright
A 32-bit quantity, in memory or a register.\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{scope}{%
\subsection{Scope}\label{scope}}

The Arm C Language Extensions (ACLE) specification specifies source
language extensions and implementation choices that C/C++ compilers can
implement in order to allow programmers to better exploit the Arm
architecture.

The extensions include:

\begin{quote}
\begin{itemize}
\tightlist
\item
  Predefined macros that provide information about the functionality of
  the target architecture.
\item
  Intrinsic functions.
\item
  Attributes that can be applied to functions, data and other entities.
\end{itemize}
\end{quote}

This specification does not standardize command-line options,
diagnostics or other external behavior of compilers.

The intended users of this specification are:

\begin{quote}
\begin{itemize}
\tightlist
\item
  Application programmers wishing to adapt or hand-optimize applications
  and libraries for Arm targets.
\item
  System programmers needing low-level access to Arm targets beyond what
  C/C++ provides for.
\item
  Compiler implementors, who will implement this specification.
\item
  Implementors of IDEs, static analysis and other similar tools who wish
  to deal with the C/C++ source language extensions when encountered in
  source code.
\end{itemize}
\end{quote}

ACLE is not a hardware abstraction layer (HAL), and does not specify a
library component but it may make it easier to write a HAL or other
low-level library in C rather than assembler.

\hypertarget{scalable-vector-extensions-sve}{%
\subsection{Scalable Vector Extensions
(SVE)}\label{scalable-vector-extensions-sve}}

ACLE support for SVE is defined in the Arm C Language Extensions for SVE
document \protect\hyperlink{SVE-ACLE}{{[}SVE-ACLE{]}} available on the
Arm Developer Website.

\hypertarget{introduction}{%
\section{Introduction}\label{introduction}}

The Arm architecture includes features that go beyond the set of
operations available to C/C++ programmers. The intention of the Arm C
Language Extensions (ACLE) is to allow the creation of applications and
middleware code that is portable across compilers, and across Arm
architecture variants, while exploiting the advanced features of the Arm
architecture.

The design principles for ACLE can be summarized as:

\begin{quote}
\begin{itemize}
\tightlist
\item
  Be implementable in (or as an addition to) current C/C++
  implementations.
\item
  Build on and standardize existing practice where possible.
\end{itemize}
\end{quote}

ACLE incorporates some language extensions introduced in the GCC C
compiler. Current GCC documentation \protect\hyperlink{GCC}{{[}GCC{]}}
can be found at \url{http://gcc.gnu.org/onlinedocs/gcc}. Formally it
should be assumed that ACLE refers to the documentation for GCC 4.5.1:
\url{http://gcc.gnu.org/onlinedocs/gcc-4.5.1/gcc/}.

Some of the ACLE extensions are not specific to the Arm architecture but
have proven to be of particular benefit in low-level and systems
programming; examples include features for controlling the alignment and
packing of data, and some common operations such as word rotation and
reversal. As and when features become available in international
standards (and implementations), Arm recommends that you use these in
preference to ACLE. When implementations are widely available, any
ACLE-specific features can be expected to be deprecated.

\hypertarget{portable-binary-objects}{%
\subsection{Portable binary objects}\label{portable-binary-objects}}

In AArch32, the \emph{ABI for the Arm Architecture} defines a set of
build attributes \protect\hyperlink{BA}{{[}BA{]}}. These attributes are
intended to facilitate generating cross-platform portable binary object
files by providing a mechanism to determine the compatibility of object
files. In AArch64, the ABI does not define a standard set of build
attributes and takes the approach that binaries are, in general, not
portable across platforms. References to build attributes in this
document should be interpreted as applying only to AArch32.

\hypertarget{c-language-extensions}{%
\section{C language extensions}\label{c-language-extensions}}

\hypertarget{data-types}{%
\subsection{Data types}\label{data-types}}

This section overlaps with the specification of the Arm Procedure Call
Standard, particularly \protect\hyperlink{AAPCS}{{[}AAPCS{]}} (4.1).
ACLE extends some of the guarantees of C, allowing assumptions to be
made in source code beyond those permitted by Standard C.

\begin{quote}
\begin{itemize}
\tightlist
\item
  Plain char is unsigned, as specified in the ABI
  \protect\hyperlink{AAPCS}{{[}AAPCS{]}} and
  \protect\hyperlink{AAPCS64}{{[}AAPCS64{]}} (7.1.1).
\item
  When pointers are 32 bits, the long type is 32 bits (ILP32 model).
\item
  When pointers are 64 bits, the long type may be either 64 bits (LP64
  model) or 32 bits (LLP64 model).
\end{itemize}
\end{quote}

ACLE extends C by providing some types not present in Standard C and
defining how they are dealt with by the AAPCS.

\begin{quote}
\begin{itemize}
\tightlist
\item
  Vector types for use with the Advanced SIMD intrinsics (see
  \protect\hyperlink{ssec-vectypes}{ssec-vectypes}).
\item
  The {\_\_fp16} type for 16-bit floating-point values (see
  \protect\hyperlink{ssec-fp16-type}{ssec-fp16-type}).
\item
  The {\_\_bf16} type for 16-bit brain floating-point values (see
  \protect\hyperlink{ssec-bf16-type}{ssec-bf16-type}).
\end{itemize}
\end{quote}

\hypertarget{implementation-defined-type-properties}{%
\subsubsection{Implementation-defined type
properties}\label{implementation-defined-type-properties}}

ACLE and the Arm ABI allow implementations some freedom in order to
conform to long-standing conventions in various environments. It is
suggested that implementations set suitable defaults for their
environment but allow the default to be overridden.

The signedness of a plain int bit-field is implementation-defined.

Whether the underlying type of an enumeration is minimal or at least
32-bit, is implementation-defined. The predefined macro
{\_\_ARM\_SIZEOF\_MINIMAL\_ENUM} should be defined as 1 or 4 according
to the size of a minimal enumeration type such as {enum \{ X=0 \}}. An
implementation that conforms to the Arm ABI must reflect its choice in
the {Tag\_ABI\_enum\_size build} attribute.

{wchar\_t} may be 2 or 4 bytes. The predefined macro
{\_\_ARM\_SIZEOF\_WCHAR\_T} should be defined as the same number. An
implementation that conforms to the Arm ABI must reflect its choice in
the {Tag\_ABI\_PCS\_wchar\_t} build attribute.

\hypertarget{predefined-macros}{%
\subsection{Predefined macros}\label{predefined-macros}}

Several predefined macros are defined. Generally these define features
of the Arm architecture being targeted, or how the C/C++ implementation
uses the architecture. These macros are detailed in
\protect\hyperlink{sec-Feature-test-macros}{sec-Feature-test-macros}.
All ACLE predefined macros start with the prefix {\_\_ARM.}

\hypertarget{intrinsics}{%
\subsection{Intrinsics}\label{intrinsics}}

ACLE standardizes intrinsics to access the Arm ® Neon ™ architecture
extension. These intrinsics are intended to be compatible with existing
implementations. Before using the Neon intrinsics or data types, the
{\textless{}arm\_neon.h\textgreater{}} header must be included. The Neon
intrinsics are defined in
\protect\hyperlink{sec-NEON-intrinsics}{sec-NEON-intrinsics}. Note that
the Neon intrinsics and data types are in the user namespace.

ACLE standardizes intrinsics to access the Arm M-profile Vector
Extension (MVE). These intrinsics are intended to be compatible with
existing implementations. Before using the MVE intrinsics or data types,
the {\textless{}arm\_mve.h\textgreater{}} header must be included. The
MVE intrinsics are defined in
\protect\hyperlink{sec-MVE-intrinsics}{sec-MVE-intrinsics}. Note that
the MVE data types are in the user namespace, the MVE intrinsics can
optionally be left out of the user namespace.

ACLE also standardizes other intrinsics to access Arm instructions which
do not map directly to C operators generally either for optimal
implementation of algorithms, or for accessing specialist system-level
features. Intrinsics are defined further in various following sections.

Before using the non-Neon intrinsics, the
{\textless{}arm\_acle.h\textgreater{}} header should be included.

Whether intrinsics are macros, functions or built-in operators is
unspecified. For example:

\begin{quote}
\begin{itemize}
\tightlist
\item
  It is unspecified whether applying \#undef to an intrinsic removes the
  name from visibility
\item
  It is unspecified whether it is possible to take the address of an
  intrinsic
\end{itemize}
\end{quote}

However, each argument must be evaluated at most once. So this
definition is acceptable:

\begin{verbatim}
#define __rev(x) __builtin_bswap32(x)
\end{verbatim}

but this is not:

\begin{verbatim}
#define __rev(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8) | \
  (((x) & 0xff0000) >> 8) | ((x) >> 24))
\end{verbatim}

\hypertarget{constant-arguments-to-intrinsics}{%
\subsubsection{Constant arguments to
intrinsics}\label{constant-arguments-to-intrinsics}}

Some intrinsics may require arguments that are constant at compile-time,
to supply data that is encoded into the immediate fields of an
instruction. Typically, these intrinsics require an
integral-constant-expression in a specified range, or sometimes a string
literal. An implementation should produce a diagnostic if the argument
does not meet the requirements.

\hypertarget{header-files}{%
\subsection{Header files}\label{header-files}}

{\textless{}arm\_acle.h\textgreater{}} is provided to make the non-Neon
intrinsics available. These intrinsics are in the C implementation
namespace and begin with double underscores. It is unspecified whether
they are available without the header being included. The
{\_\_ARM\_ACLE} macro should be tested before including the header:

\begin{verbatim}
#ifdef __ARM_ACLE
#include <arm_acle.h>
#endif /* __ARM_ACLE */
\end{verbatim}

{\textless{}arm\_neon.h\textgreater{}} is provided to define the Neon
intrinsics. As these intrinsics are in the user namespace, an
implementation would not normally define them until the header is
included. The {\_\_ARM\_NEON} macro should be tested before including
the header:

\begin{verbatim}
#ifdef __ARM_NEON
#include <arm_neon.h>
#endif /* __ARM_NEON */
\end{verbatim}

{\textless{}arm\_mve.h\textgreater{}} is provided to define the
M-Profile Vector Extension (MVE) intrinsics. By default these intrinsics
occupy both the user namespace and the {\_\_arm\_} namespace, defining
{\_\_ARM\_MVE\_PRESERVE\_USER\_NAMESPACE} will hide the definition of
the user namespace variants. The {\_\_ARM\_FEATURE\_MVE} macro should be
tested before including the header:

\begin{verbatim}
#if (__ARM_FEATURE_MVE & 3) == 3
#include <arm_mve.h>
/* MVE integer and floating point intrinsics are now available to use.  */
#elif __ARM_FEATURE_MVE & 1
#include <arm_mve.h>
/* MVE integer intrinsics are now available to use.  */
#endif
\end{verbatim}

{\textless{}arm\_fp16.h\textgreater{}} is provided to define the scalar
16-bit floating point arithmetic intrinsics. As these intrinsics are in
the user namespace, an implementation would not normally define them
until the header is included. The
{\_\_ARM\_FEATURE\_FP16\_SCALAR\_ARITHMETIC} feature macro should be
tested before including the header:

\begin{verbatim}
#ifdef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
#include <arm_fp16.h>
#endif /* __ARM_FEATURE_FP16_SCALAR_ARITHMETIC */
\end{verbatim}

Including {\textless{}arm\_neon.h\textgreater{}} will also cause
{\textless{}arm\_fp16.h\textgreater{}} to be included if appropriate.

{\textless{}arm\_bf16.h\textgreater{}} is provided to define the 16-bit
brain floating point arithmetic intrinsics. As these intrinsics are in
the user namespace, an implementation would not normally define them
until the header is included. The {\_\_ARM\_FEATURE\_BF16} feature macro
should be tested before including the header:

\begin{verbatim}
#ifdef __ARM_FEATURE_BF16
#include <arm_bf16.h>
#endif /* __ARM_FEATURE_BF16 */
\end{verbatim}

When {\_\_ARM\_BF16\_FORMAT\_ALTERNATIVE} is defined to {1} the only
scalar instructions available are conversion instrinstics between
{bfloat16\_t} and {float32\_t}. These instructions are:

\begin{itemize}
\tightlist
\item
  {vcvth\_bf16\_f32} (convert float32\_t to bfloat16\_t)
\item
  {vcvtah\_f32\_bf16} (convert bfloat16\_t to float32\_t)
\end{itemize}

Including {\textless{}arm\_neon.h\textgreater{}} will also cause
{\textless{}arm\_bf16.h\textgreater{}} to be included if appropriate.

These headers behave as standard library headers; repeated inclusion has
no effect beyond the first include.

It is unspecified whether the ACLE headers include the standard headers
{\textless{}assert.h\textgreater{}}, {\textless{}stdint.h\textgreater{}}
or {\textless{}inttypes.h\textgreater{}}. However, the ACLE headers will
not define the standard type names (for example {uint32\_t}) except by
inclusion of the standard headers. Programmers are recommended to
include the standard headers explicitly if the associated types and
macros are needed.

In C++, the following source code fragments are expected to work
correctly:

\begin{verbatim}
#include <stdint.h>
// UINT64_C not defined here since we did not set __STDC_FORMAT_MACROS
...
#include <arm_neon.h>
\end{verbatim}

and:

\begin{verbatim}
#include <arm_neon.h>
...
#define __STDC_FORMAT_MACROS
#include <stdint.h>
// ... UINT64_C is now defined
\end{verbatim}

\hypertarget{attributes}{%
\subsection{Attributes}\label{attributes}}

GCC-style attributes are provided to annotate types, objects and
functions with extra information, such as alignment. These attributes
are defined in
\protect\hyperlink{sec-Attributes-and-pragmas}{sec-Attributes-and-pragmas}.

\hypertarget{implementation-strategies}{%
\subsection{Implementation strategies}\label{implementation-strategies}}

An implementation may choose to define all the ACLE non-Neon intrinsics
as true compiler intrinsics, i.e.~built-in functions. The
{\textless{}arm\_acle.h\textgreater{}} header would then have no effect.

Alternatively, {\textless{}arm\_acle.h\textgreater{}} could define the
ACLE intrinsics in terms of already supported features of the
implementation, for example compiler intrinsics with other names, or
inline functions using inline assembler.

\hypertarget{half-precision-floating-point}{%
\subsubsection{Half-precision
floating-point}\label{half-precision-floating-point}}

ACLE defines the {\_\_fp16} type, which can be used for half-precision
(16-bit) floating-point in one of two formats. The binary16 format
defined in \protect\hyperlink{IEEE-FP}{{[}IEEE-FP{]}}, and referred to
as \emph{IEEE} format, and an alternative format, defined by Arm, which
extends the range by removing support for infinities and NaNs, referred
to as \emph{alternative} format. Both formats are described in
\protect\hyperlink{ARMARM}{{[}ARMARM{]}} (A2.7.4),
\protect\hyperlink{ARMARMv8}{{[}ARMARMv8{]}} (A1.4.2).

Toolchains are not required to support the alternative format, and use
of the alternative format precludes use of the ISO/IEC TS 18661:3
\protect\hyperlink{CFP15}{{[}CFP15{]}} {\_Float16} type and the
Armv8.2-A 16-bit floating-point extensions. For these reasons, Arm
deprecates the use of the alternative format for half precision in ACLE.

The format in use can be selected at runtime but ACLE assumes it is
fixed for the life of a program. If the {\_\_fp16} type is available,
one of {\_\_ARM\_FP16\_FORMAT\_IEEE} and
{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE} will be defined to indicate the
format in use. An implementation conforming to the Arm ABI will set the
{Tag\_ABI\_FP\_16bit\_format} build attribute.

The {\_\_fp16} type can be used in two ways; using the intrinsics ACLE
defines when the Armv8.2-A 16-bit floating point extensions are
available, and using the standard C operators. When using standard C
operators, values of {\_\_fp16} type promote to (at least) float when
used in arithmetic operations, in the same way that values of char or
short types promote to int. There is no support for arithmetic directly
on {\_\_fp16} values using standard C operators. :

\begin{verbatim}
void add(__fp16 a, __fp16 b) {
  a + b; /* a and b are promoted to (at least) float.
            Operation takes place with (at least) 32-bit precision.  */
  vaddh_f16 (a, b); /* a and b are not promoted.
                       Operation takes place with 16-bit precision.  */
}
\end{verbatim}

Armv8 introduces floating point instructions to convert 64-bit to 16-bit
i.e.~from double to {\_\_fp16.} They are not available in earlier
architectures, therefore have to rely on emulation libraries or a
sequence of instructions to achieve the conversion.

Providing emulation libraries for half-precision floating point
conversions when not implemented in hardware is implementation-defined.
:

\begin{verbatim}
double xd;
__fp16 xs = (float)xd;
\end{verbatim}

rather than: :

\begin{verbatim}
double xd;
__fp16 xs = xd;
\end{verbatim}

In some older implementations, {\_\_fp16} cannot be used as an argument
or result type, though it can be used as a field in a structure passed
as an argument or result, or passed via a pointer. The predefined macro
{\_\_ARM\_FP16\_ARGS} should be defined if {\_\_fp16} can be used as an
argument and result. C++ name mangling is Dh as defined in
\protect\hyperlink{cxxabi}{{[}cxxabi{]}}, and is the same for both the
IEEE and alternative formats.

In this example, the floating-point addition is done in single (32-bit)
precision:

\begin{verbatim}
void add(__fp16 *z, __fp16 const *x, __fp16 const *y, int n) {
   int i;
   for (i = 0; i < n; ++i) z[i] = x[i] + y[i];
 }
\end{verbatim}

\hypertarget{relationship-between-__fp16-and-isoiec-ts-18661}{%
\subsubsection{\texorpdfstring{Relationship between {\_\_fp16} and
ISO/IEC TS
18661}{Relationship between \_\_fp16 and ISO/IEC TS 18661}}\label{relationship-between-__fp16-and-isoiec-ts-18661}}

ISO/IEC TS 18661-3 \protect\hyperlink{CFP15}{{[}CFP15{]}} is a published
extension to \protect\hyperlink{C11}{{[}C11{]}} which describes a
language binding for the \protect\hyperlink{IEEE-FP}{{[}IEEE-FP{]}}
standard for floating point arithmetic. This language binding introduces
a mapping to an unlimited number of interchange and extended
floating-point types, on which binary arithmetic is well defined. These
types are of the form {\_FloatN}, where {N} gives size in bits of the
type.

One instantiation of the interchange types introduced by
\protect\hyperlink{CFP15}{{[}CFP15{]}} is the {\_Float16} type. ACLE
defines the {\_\_fp16} type as a storage and interchange only format, on
which arithmetic operations are defined to first promote to a type with
at least the range and precision of float.

This has implications for the result of operations which would result in
rounding had the operation taken place in a native 16-bit type. As
software may rely on this behaviour for correctness, arithmetic
operations on {\_\_fp16} are defined to promote even when the Armv8.2-A
fp16 extension is available.

Arm recommends that portable software is written to use the {\_Float16}
type defined in \protect\hyperlink{CFP15}{{[}CFP15{]}}.

Type conversion between a value of type {\_\_fp16} and a value of type
{\_Float16} leaves the object representation of the converted value
unchanged.

When {\_\_ARM\_FP16\_FORMAT\_IEEE == 1}, this has no effect on the value
of the object. However, as the representation of certain values has a
different meaning when using the Arm alternative format for 16-bit
floating point values \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (A2.7.4)
\protect\hyperlink{ARMARMv8}{{[}ARMARMv8{]}} (A1.4.2), when
{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE == 1} the type conversion may
introduce or remove infinity or NaN representations.

Arm recommends that software implementations warn on type conversions
between {\_\_fp16} and {\_Float16} if
{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE == 1}.

In an arithmetic operation where one operand is of {\_\_fp16} type and
the other is of {\_Float16 type}, the {\_Float16} type is first
converted to {\_\_fp16} type following the rules above, and then the
operation is completed as if both operands were of {\_\_fp16} type.

\protect\hyperlink{CFP15}{{[}CFP15{]}} and
\protect\hyperlink{C11}{{[}C11{]}} do not define vector types, however
many C implementations do provide these extensions. Where they exist,
type conversion between a value of type vector of {\_\_fp16} and a value
of type vector of {\_Float16} leaves the object representation of the
converted value unchanged.

ACLE does not define vector of {\_Float16} types.

\hypertarget{half-precision-brain-floating-point}{%
\subsubsection{Half-precision brain
floating-point}\label{half-precision-brain-floating-point}}

ACLE defines the {\_\_bf16} type, which can be used for half-precision
(16-bit) brain floating-point in an alternative format, defined by Arm,
which closely resembles the IEEE 754 single-precision floating point
format.

The {\_\_bf16} type is only available when the
{\_\_ARM\_BF16\_FORMAT\_ALTERNATIVE} feature macro is defined. When it
is available it can only be used by the ACLE intrinsics ; it cannot be
used with standard C operators. It is expected that arithmetic using
standard C operators be used using a single-precision floating point
format and the value be converted to {\_\_bf16} when required using ACLE
intrinsics.

Armv8.2-A introduces floating point instructions to convert 32-bit to
brain 16-bit i.e.~from float to {\_\_bf16.} They are not available in
earlier architectures, therefore have to rely on emulation libraries or
a sequence of instructions to achieve the conversion.

Providing emulation libraries for half-precision floating point
conversions when not implemented in hardware is implementation-defined.

\hypertarget{architecture-and-cpu-names}{%
\section{Architecture and CPU names}\label{architecture-and-cpu-names}}

\hypertarget{introduction-1}{%
\subsection{Introduction}\label{introduction-1}}

The intention of this section is to standardize architecture names, for
example for use in compiler command lines. Toolchains should accept
these names case-insensitively where possible, or use all lowercase
where not possible. Tools may apply local conventions such as using
hyphens instead of underscores.

(Note: processor names, including from the Arm Cortex ® processor
family, are used as illustrative examples. This specification is
applicable to any processors implementing the Arm architecture.)

\hypertarget{architecture-names}{%
\subsection{Architecture names}\label{architecture-names}}

\hypertarget{cpu-architecture}{%
\subsubsection{CPU architecture}\label{cpu-architecture}}

The recommended CPU architecture names are as specified under
{Tag\_CPU\_arch} in \protect\hyperlink{BA}{{[}BA{]}}. For details of how
to use predefined macros to test architecture in source code, see
\protect\hyperlink{ssec-ATisa}{ssec-ATisa}.

The following table lists the architectures and the A32 and T32
instruction set versions.

\begin{longtable}[]{@{}lllll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.12\columnwidth}\raggedright
\textbf{Name}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
\textbf{Features}\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\textbf{A32}\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\textbf{T32}\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
\textbf{Example processor}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv4\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv4\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
DEC/Intel StrongARM\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv4T\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv4 with Thumb instruction set\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm7TDMI\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv5T\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv5 with Thumb instruction set\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
5\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm10TDMI\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv5TE\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv5T with DSP extensions\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
5\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm9E, Intel XScale\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv5TEJ\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv5TE with Jazelle ® extensions\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
5\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm926EJ\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv6\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv6 (includes TEJ)\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
6\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm1136J r0\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv6K\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv6 with kernel extensions\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
6\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm1136J r1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv6T2\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv6 with Thumb-2 architecture\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
6\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
3\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm1156T2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv6Z\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv6K with Security Extensions (includes K)\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
6\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Arm1176JZ-S\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv6-M\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
T32 (M-profile)\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-M0, Cortex-M1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv7-A\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv7 application profile\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
7\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-A8, Cortex-A9\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv7-R\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv7 realtime profile\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
7\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-R4\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv7-M\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv7 microcontroller profile: Thumb-2 instructions only\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-M3\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv7E-M\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv7-M with DSP extensions\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-M4\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv8-A AArch32\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv8 application profile\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
8\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
4\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-A57, Cortex-A53\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.12\columnwidth}\raggedright
Armv8-A AArch64\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
Armv8 application profile\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
8\strut
\end{minipage} & \begin{minipage}[t]{0.06\columnwidth}\raggedright
\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
Cortex-A57, Cortex-A53\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

Note that there is some architectural variation that is not visible
through ACLE; either because it is only relevant at the system level
(for example the Large Physical Address Extension) or because it would
be handled by the compiler (for example hardware divide might or might
not be present in the Armv7-A architecture).

\hypertarget{fpu-architecture}{%
\subsubsection{FPU architecture}\label{fpu-architecture}}

For details of how to test FPU features in source code, see
\protect\hyperlink{ssec-HWFPSIMD}{ssec-HWFPSIMD}. In particular, for
testing which precisions are supported in hardware, see
\texttt{\textbackslash{}\_ssec-HWFP}.

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\textbf{Name}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
\textbf{Features}\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
\textbf{Example processor}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv2}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv2\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Arm1136JF-S\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv3}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv3\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-A8\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv3\_FP16}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv3 with FP16\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-A9 (with Neon)\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv3\_D16}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv3 with 16 D-registers\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-R4F\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv3\_D16\_FP16}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv3 with 16 D-registers and FP16\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-A9 (without Neon), Cortex-R7\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv3\_SP\_D16}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv3 with 16 D-registers, single-precision only\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-R5 with SP-only\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv4}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv4 (including FMA and FP16)\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-A15\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{VFPv4\_D16}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
VFPv4 (including FMA and FP16) with 16 D-registers\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-A5 (VFP option)\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.14\columnwidth}\raggedright
\texttt{FPv4\_SP}\strut
\end{minipage} & \begin{minipage}[t]{0.45\columnwidth}\raggedright
FPv4 with single-precision only\strut
\end{minipage} & \begin{minipage}[t]{0.32\columnwidth}\raggedright
Cortex-M4.fp\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{cpu-names}{%
\subsection{CPU names}\label{cpu-names}}

ACLE does not standardize CPU names for use in command-line options and
similar contexts. Standard vendor product names should be used.

Object producers should place the CPU name in the {Tag\_CPU\_name} build
attribute.

\hypertarget{feature-test-macros}{%
\section{Feature test macros}\label{feature-test-macros}}

\hypertarget{introduction-2}{%
\subsection{Introduction}\label{introduction-2}}

The feature test macros allow programmers to determine the availability
of ACLE or subsets of it, or of target architectural features. This may
indicate the availability of some source language extensions (for
example intrinsics) or the likely level of performance of some standard
C features, such as integer division and floating-point.

Several macros are defined as numeric values to indicate the level of
support for particular features. These macros are undefined if the
feature is not present. (Aside: in Standard C/C++, references to
undefined macros expand to 0 in preprocessor expressions, so a
comparison such as:

\begin{verbatim}
#if __ARM_ARCH >= 7
\end{verbatim}

will have the expected effect of evaluating to false if the macro is not
defined.)

All ACLE macros begin with the prefix {\_\_ARM\_.} All ACLE macros
expand to integral constant expressions suitable for use in an \#if
directive, unless otherwise specified. Syntactically, they must be
primary-expressions generally this means an implementation should
enclose them in parentheses if they are not simple constants.

\hypertarget{testing-for-arm-c-language-extensions}{%
\subsection{Testing for Arm C Language
Extensions}\label{testing-for-arm-c-language-extensions}}

{\_\_ARM\_ACLE} is defined to the version of this specification
implemented, as {100 * major\_version + minor\_version}. An
implementation implementing version 2.1 of the ACLE specification will
define {\_\_ARM\_ACLE} as 201.

\hypertarget{endianness}{%
\subsection{Endianness}\label{endianness}}

{\_\_ARM\_BIG\_ENDIAN} is defined as 1 if data is stored by default in
big-endian format. If the macro is not set, data is stored in
little-endian format. (Aside: the ``mixed-endian'' format for
double-precision numbers, used on some very old Arm FPU implementations,
is not supported by ACLE or the Arm ABI.)

\hypertarget{a32-and-t32-instruction-set-architecture-and-features}{%
\subsection{A32 and T32 instruction set architecture and
features}\label{a32-and-t32-instruction-set-architecture-and-features}}

References to the target architecture refer to the target as configured
in the tools, for example by appropriate command-line options. This may
be a subset or intersection of actual targets, in order to produce a
binary that runs on more than one real architecture. For example, use of
specific features may be disabled.

In some cases, hardware features may be accessible from only one or
other of A32 or T32 state. For example, in the v5TE and v6
architectures, DSP instructions and (where available) VFP instructions,
are only accessible in A32 state, while in the v7-R architecture,
hardware divide is only accessible from T32 state. Where both states are
available, the implementation should set feature test macros indicating
that the hardware feature is accessible. To provide access to the
hardware feature, an implementation might override the programmer's
preference for target instruction set, or generate an interworking call
to a helper function. This mechanism is outside the scope of ACLE. In
cases where the implementation is given a hard requirement to use only
one state (for example to support validation, or post-processing) then
it should set feature test macros only for the hardware features
available in that state as if compiling for a core where the other
instruction set was not present.

An implementation that allows a user to indicate which functions go into
which state (either as a hard requirement or a preference) is not
required to change the settings of architectural feature test macros.

\hypertarget{a32t32-instruction-set-architecture}{%
\subsubsection{A32/T32 instruction set
architecture}\label{a32t32-instruction-set-architecture}}

{\_\_ARM\_ARCH} is defined as an integer value indicating the current
Arm instruction set architecture (for example 7 for the Arm v7-A
architecture implemented by Cortex-A8 or the Armv7-M architecture
implemented by Cortex-M3 or 8 for the Armv8-A architecture implemented
by Cortex-A57). Armv8.1-A \protect\hyperlink{ARMARMv81}{{[}ARMARMv81{]}}
onwards, the value of {\_\_ARM\_ARCH} is scaled up to include minor
versions. The formula to calculate the value of {\_\_ARM\_ARCH} from
Armv8.1-A \protect\hyperlink{ARMARMv81}{{[}ARMARMv81{]}} onwards is
given by the following formula:

\begin{verbatim}
For an Arm architecture ArmvX.Y, __ARM_ARCH = X * 100 + Y. E.g.
for Armv8.1 __ARM_ARCH = 801.
\end{verbatim}

Since ACLE only supports the Arm architecture, this macro would always
be defined in an ACLE implementation.

Note that the {\_\_ARM\_ARCH} macro is defined even for cores which only
support the T32 instruction set.

{\_\_ARM\_ARCH\_ISA\_ARM} is defined to 1 if the core supports the Arm
instruction set. It is not defined for M-profile cores.

{\_\_ARM\_ARCH\_ISA\_THUMB} is defined to 1 if the core supports the
original T32 instruction set (including the v6-M architecture) and 2 if
it supports the T32 instruction set as found in the v6T2 architecture
and all v7 architectures.

{\_\_ARM\_ARCH\_ISA\_A64} is defined to 1 if the core supports AArch64's
A64 instruction set.

{\_\_ARM\_32BIT\_STATE} is defined to 1 if code is being generated for
AArch32.

{\_\_ARM\_64BIT\_STATE} is defined to 1 if code is being generated for
AArch64.

\hypertarget{architectural-profile-a-r-m-or-pre-cortex}{%
\subsubsection{Architectural profile (A, R, M or
pre-Cortex)}\label{architectural-profile-a-r-m-or-pre-cortex}}

{\_\_ARM\_ARCH\_PROFILE} is defined to be one of the char literals
{`A'}, {`R'}, {`M'} or {`S'}, or unset, according to the architectural
profile of the target. {`S'} indicates the common subset of the A and R
profiles. The common subset of the A, R and M profiles is indicated by:

\begin{verbatim}
__ARM_ARCH == 7 && !defined (__ARM_ARCH_PROFILE)
\end{verbatim}

This macro corresponds to the {Tag\_CPU\_arch\_profile} object build
attribute. It may be useful to writers of system code. It is expected in
most cases programmers will use more feature-specific tests.

The macro is undefined for architectural targets which predate the use
of architectural profiles.

\hypertarget{unaligned-access-supported-in-hardware}{%
\subsubsection{Unaligned access supported in
hardware}\label{unaligned-access-supported-in-hardware}}

{\_\_ARM\_FEATURE\_UNALIGNED} is defined if the target supports
unaligned access in hardware, at least to the extent of being able to
load or store an integer word at any alignment with a single
instruction. (There may be restrictions on load-multiple and
floating-point accesses.) Note that whether a code generation target
permits unaligned access will in general depend on the settings of
system register bits, so an implementation should define this macro to
match the user's expectations and intentions. For example, a
command-line option might be provided to disable the use of unaligned
access, in which case this macro would not be defined.

\hypertarget{ldrexstrex}{%
\subsubsection{LDREX/STREX}\label{ldrexstrex}}

This feature was deprecated in ACLE 2.0. It is strongly recommended that
C11/C++11 atomics be used instead.

{\_\_ARM\_FEATURE\_LDREX} is defined if the load/store-exclusive
instructions (LDREX/STREX) are supported. Its value is a set of bits
indicating available widths of the access, as powers of 2. The following
bits are used:

\begin{longtable}[]{@{}llll@{}}
\toprule
\endhead
\textbf{Bit} & \textbf{Value} & \textbf{Access width} &
\textbf{Instruction}\tabularnewline
0 & 0x01 & byte & LDREXB/STREXB\tabularnewline
1 & 0x02 & halfword & LDREXH/STREXH\tabularnewline
2 & 0x04 & word & LDREX/STREX\tabularnewline
3 & 0x08 & doubleword & LDREXD/STREXD\tabularnewline
\bottomrule
\end{longtable}

Other bits are reserved.

The following values of {\_\_ARM\_FEATURE\_LDREX} may occur:

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Macro value} & \textbf{Access widths} & \textbf{Example
architecture}\tabularnewline
(undefined) & none & Armv5, Armv6-M\tabularnewline
0x04 & word & Armv6\tabularnewline
0x07 & word, halfword, byte & Armv7-M\tabularnewline
0x0F & doubleword, word, halfword, byte & Armv6K,
Armv7-A/R\tabularnewline
\bottomrule
\end{longtable}

Other values are reserved.

The LDREX/STREX instructions are introduced in recent versions of the
Arm architecture and supersede the SWP instruction. Where both are
available, Arm strongly recommends programmers to use LDREX/STREX rather
than SWP. Note that platforms may choose to make SWP unavailable in user
mode and emulate it through a trap to a platform routine, or fault it.

\hypertarget{large-system-extensions}{%
\subsubsection{Large System Extensions}\label{large-system-extensions}}

{\_\_ARM\_FEATURE\_ATOMICS} is defined if the Large System Extensions
introduced in the Armv8.1-A
\protect\hyperlink{ARMARMv81}{{[}ARMARMv81{]}} architecture are
supported on this target. Note: It is strongly recommended that
standardized C11/C++11 atomics are used to implement atomic operations
in user code.

\hypertarget{clz}{%
\subsubsection{CLZ}\label{clz}}

{\_\_ARM\_FEATURE\_CLZ} is defined to 1 if the CLZ (count leading
zeroes) instruction is supported in hardware. Note that ACLE provides
the {\_\_clz()} family of intrinsics (see
\protect\hyperlink{ssec-Mdpi}{ssec-Mdpi}) even when
{\_\_ARM\_FEATURE\_CLZ} is not defined.

\hypertarget{q-saturation-flag}{%
\subsubsection{Q (saturation) flag}\label{q-saturation-flag}}

{\_\_ARM\_FEATURE\_QBIT} is defined to 1 if the Q (saturation) global
flag exists and the intrinsics defined in
\protect\hyperlink{ssec-Qflag2}{ssec-Qflag2} are available. This flag is
used with the DSP saturating-arithmetic instructions (such as QADD) and
the width-specified saturating instructions (SSAT and USAT). Note that
either of these classes of instructions may exist without the other: for
example, v5E has only QADD while v7-M has only SSAT.

Intrinsics associated with the Q-bit and their feature macro
{\_\_ARM\_FEATURE\_QBIT} are deprecated in ACLE 2.0 for A-profile. They
are fully supported for M-profile and R-profile. This macro is defined
for AArch32 only.

\hypertarget{dsp-instructions}{%
\subsubsection{DSP instructions}\label{dsp-instructions}}

{\_\_ARM\_FEATURE\_DSP} is defined to 1 if the DSP (v5E) instructions
are supported and the intrinsics defined in
\protect\hyperlink{ssec-Satin}{ssec-Satin} are available. These
instructions include QADD, SMULBB and others. This feature also implies
support for the Q flag.

{\_\_ARM\_FEATURE\_DSP} and its associated intrinsics are deprecated in
ACLE 2.0 for A-profile. They are fully supported for M and R-profiles.
This macro is defined for AArch32 only.

\hypertarget{saturation-instructions}{%
\subsubsection{Saturation instructions}\label{saturation-instructions}}

{\_\_ARM\_FEATURE\_SAT} is defined to 1 if the SSAT and USAT
instructions are supported and the intrinsics defined in
\protect\hyperlink{ssec-Wsatin}{ssec-Wsatin} are available. This feature
also implies support for the Q flag.

{\_\_ARM\_FEATURE\_SAT} and its associated intrinsics are deprecated in
ACLE 2.0 for A-profile. They are fully supported for M and R-profiles.
This macro is defined for AArch32 only.

\hypertarget{bit-simd-instructions}{%
\subsubsection{32-bit SIMD instructions}\label{bit-simd-instructions}}

{\_\_ARM\_FEATURE\_SIMD32} is defined to 1 if the 32-bit SIMD
instructions are supported and the intrinsics defined in
\protect\hyperlink{ssec-32SIMD}{ssec-32SIMD} are available. This also
implies support for the GE global flags which indicate byte-by-byte
comparison results.

{\_\_ARM\_FEATURE\_SIMD32} is deprecated in ACLE 2.0 for A-profile.
Users are encouraged to use Neon Intrinsics as an equivalent for the
32-bit SIMD intrinsics functionality. However they are fully supported
for M and R-profiles. This is defined for AArch32 only.

\hypertarget{hardware-integer-divide}{%
\subsubsection{Hardware integer divide}\label{hardware-integer-divide}}

{\_\_ARM\_FEATURE\_IDIV} is defined to 1 if the target has hardware
support for 32-bit integer division in all available instruction sets.
Signed and unsigned versions are both assumed to be available. The
intention is to allow programmers to choose alternative algorithm
implementations depending on the likely speed of integer division.

Some older R-profile targets have hardware divide available in the T32
instruction set only. This can be tested for using the following test:

\begin{verbatim}
#if __ARM_FEATURE_IDIV || (__ARM_ARCH_PROFILE == 'R')
\end{verbatim}

\hypertarget{transactional-memory-extension}{%
\subsubsection{Transactional Memory
Extension}\label{transactional-memory-extension}}

{\_\_ARM\_FEATURE\_TME} is defined to {1} if the Transactional Memory
Extension instructions are supported in hardware and intrinsics defined
in \protect\hyperlink{sec-TME-intrinsics}{sec-TME-intrinsics} are
available.

\hypertarget{floating-point-advanced-simd-neon-and-mve-hardware}{%
\subsection{Floating-point, Advanced SIMD (Neon) and MVE
hardware}\label{floating-point-advanced-simd-neon-and-mve-hardware}}

\hypertarget{hardware-floating-point}{%
\subsubsection{Hardware floating point}\label{hardware-floating-point}}

{\_\_ARM\_FP} is set if hardware floating-point is available. The value
is a set of bits indicating the floating-point precisions supported. The
following bits are used:

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Bit} & \textbf{Value} & \textbf{Precision}\tabularnewline
1 & 0x02 & half (16-bit) data type only\tabularnewline
2 & 0x04 & single (32-bit)\tabularnewline
3 & 0x08 & double (64-bit)\tabularnewline
\bottomrule
\end{longtable}

Bits 0 and 4..31 are reserved

Currently, the following values of {\_\_ARM\_FP} may occur (assuming the
processor configuration option for hardware floating-point support is
selected where available):

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Value} & \textbf{Precisions} & \textbf{Example
processor}\tabularnewline
(undefined) & none & any processor without hardware floating-point
support\tabularnewline
0x04 & single & Cortex-R5 when configured with SP only\tabularnewline
0x06 & single, half & Cortex-M4.fp\tabularnewline
0x0C & double, single & Arm9, Arm11, Cortex-A8, Cortex-R4\tabularnewline
0x0E & double, single, half & Cortex-A9, Cortex-A15,
Cortex-R7\tabularnewline
\bottomrule
\end{longtable}

Other values are reserved.

Standard C implementations support single and double precision
floating-point irrespective of whether floating-point hardware is
available. However, an implementation might choose to offer a mode to
diagnose or fault use of floating-point arithmetic at a precision not
supported in hardware.

Support for 16-bit floating-point language or 16-bit brain
floating-point language extensions (see
\protect\hyperlink{ssec-FP16fmt}{ssec-FP16fmt} and
\protect\hyperlink{ssec-BF16fmt}{ssec-BF16fmt}) is only required if
supported in hardware

\hypertarget{half-precision-16-bit-floating-point-format}{%
\subsubsection{Half-precision (16-bit) floating-point
format}\label{half-precision-16-bit-floating-point-format}}

{\_\_ARM\_FP16\_FORMAT\_IEEE} is defined to 1 if the IEEE 754-2008
\protect\hyperlink{IEEE-FP}{{[}IEEE-FP{]}} 16-bit floating-point format
is used.

{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE} is defined to 1 if the Arm
alternative \protect\hyperlink{ARMARM}{{[}ARMARM{]}} 16-bit
floating-point format is used. This format removes support for
infinities and NaNs in order to provide an extra exponent bit.

At most one of these macros will be defined. See
\protect\hyperlink{ssec-fp16-type}{ssec-fp16-type} for details of
half-precision floating-point types.

\hypertarget{brain-half-precision-16-bit-floating-point-format}{%
\subsubsection{Brain half-precision (16-bit) floating-point
format}\label{brain-half-precision-16-bit-floating-point-format}}

{\_\_ARM\_BF16\_FORMAT\_ALTERNATIVE} is defined to 1 if the Arm
alternative \protect\hyperlink{ARMARM}{{[}ARMARM{]}} 16-bit brain
floating-point format is used. This format closely resembles the IEEE
754 single-precision format. As such a brain half-precision floating
point value can be converted to an IEEE 754 single-floating point format
by appending 16 zero bits at the end.

{\_\_ARM\_FEATURE\_BF16\_VECTOR\_ARITHMETIC} is defined to {1} if the
brain 16-bit floating-point arithmetic instructions are supported in
hardware and the associated vector intrinsics defined by ACLE are
available. Note that this implies:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\_\_ARM\_FP \& 0x02 == 1}
\item
  {\_\_ARM\_NEON\_FP \& 0x02 == 1}
\end{itemize}
\end{quote}

See \protect\hyperlink{ssec-bf16-type}{ssec-bf16-type} for details of
half-precision brain floating-point types.

\hypertarget{fused-multiply-accumulate-fma}{%
\subsubsection{Fused multiply-accumulate
(FMA)}\label{fused-multiply-accumulate-fma}}

{\_\_ARM\_FEATURE\_FMA} is defined to 1 if the hardware floating-point
architecture supports fused floating-point multiply-accumulate,
i.e.~without intermediate rounding. Note that C implementations are
encouraged \protect\hyperlink{C99}{{[}C99{]}} (7.12) to ensure that
\textless{}math.h\textgreater{} defines {FP\_FAST\_FMAF} or
{FP\_FAST\_FMA,} which can be tested by portable C code. A C
implementation on Arm might define these macros by testing
{\_\_ARM\_FEATURE\_FMA} and {\_\_ARM\_FP.}

\hypertarget{advanced-simd-architecture-extension-neon}{%
\subsubsection{Advanced SIMD architecture extension
(Neon)}\label{advanced-simd-architecture-extension-neon}}

{\_\_ARM\_NEON} is defined to a value indicating the Advanced SIMD
(Neon) architecture supported. The only current value is 1.

In principle, for AArch32, the Neon architecture can exist in an
integer-only version. To test for the presence of Neon floating-point
vector instructions, test {\_\_ARM\_NEON\_FP.} When Neon does occur in
an integer-only version, the VFP scalar instruction set is also not
present. See \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (table A2-4) for
architecturally permitted combinations.

{\_\_ARM\_NEON} is always set to 1 for AArch64.

\hypertarget{neon-floating-point}{%
\subsubsection{Neon floating-point}\label{neon-floating-point}}

{\_\_ARM\_NEON\_FP} is defined as a bitmap to indicate floating-point
support in the Neon architecture. The meaning of the values is the same
as for {\_\_ARM\_FP.} This macro is undefined when the Neon extension is
not present or does not support floating-point.

Current AArch32 Neon implementations do not support double-precision
floating-point even when it is present in VFP. 16-bit floating-point
format is supported in Neon if and only if it is supported in VFP.
Consequently, the definition of {\_\_ARM\_NEON\_FP} is the same as
{\_\_ARM\_FP} except that the bit to indicate double-precision is not
set for AArch32. Double-precision is always set for AArch64.

If {\_\_ARM\_FEATURE\_FMA} and {\_\_ARM\_NEON\_FP} are both defined,
fused-multiply instructions are available in Neon also.

\hypertarget{m-profile-vector-extension}{%
\subsubsection{M-profile Vector
Extension}\label{m-profile-vector-extension}}

{\_\_ARM\_FEATURE\_MVE} is defined as a bitmap to indicate M-profile
Vector Extension (MVE) support.

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Bit} & \textbf{Value} & \textbf{Support}\tabularnewline
0 & 0x01 & Integer MVE\tabularnewline
1 & 0x02 & Floating-point MVE\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{wireless-mmx}{%
\subsubsection{Wireless MMX}\label{wireless-mmx}}

If Wireless MMX operations are available on the target, {\_\_ARM\_WMMX}
is defined to a value that indicates the level of support, corresponding
to the {Tag\_WMMX\_arch} build attribute.

This specification does not further define source-language features to
support Wireless MMX.

\hypertarget{crypto-extension}{%
\subsubsection{Crypto extension}\label{crypto-extension}}

NOTE: The {\_\_ARM\_FEATURE\_CRYPTO} macro is deprecated in favor of the
finer grained feature macros described below.

{\_\_ARM\_FEATURE\_CRYPTO} is defined to 1 if the Armv8-A Crypto
instructions are supported and intrinsics targeting them are available.
These instructions include AES\{E, D\}, SHA1\{C, P, M\} and others. This
also implies {\_\_ARM\_FEATURE\_AES} and {\_\_ARM\_FEATURE\_SHA2}.

\hypertarget{aes-extension}{%
\subsubsection{AES extension}\label{aes-extension}}

{\_\_ARM\_FEATURE\_AES} is defined to 1 if the AES Crypto instructions
from Armv8-A are supported and intrinsics targeting them are available.
These instructions include AES\{E, D\}, AESMC, AESIMC and others.

\hypertarget{sha2-extension}{%
\subsubsection{SHA2 extension}\label{sha2-extension}}

{\_\_ARM\_FEATURE\_SHA2} is defined to 1 if the SHA1 \& SHA2 Crypto
instructions from Armv8-A are supported and intrinsics targeting them
are available. These instructions include SHA1\{C, P, M\} and others.

\hypertarget{sha512-extension}{%
\subsubsection{SHA512 extension}\label{sha512-extension}}

{\_\_ARM\_FEATURE\_SHA512} is defined to 1 if the SHA2 Crypto
instructions from Armv8.2-A are supported and intrinsics targeting them
are available. These instructions include SHA1\{C, P, M\} and others.

\hypertarget{sha3-extension}{%
\subsubsection{SHA3 extension}\label{sha3-extension}}

{\_\_ARM\_FEATURE\_SHA3} is defined to 1 if the SHA1 \& SHA2 Crypto
instructions from Armv8-A and the SHA2 and SHA3 instructions from
Armv8.2-A and newer are supported and intrinsics targeting them are
available. These instructions include AES\{E, D\}, SHA1\{C, P, M\}, RAX,
and others.

\hypertarget{sm3-extension}{%
\subsubsection{SM3 extension}\label{sm3-extension}}

{\_\_ARM\_FEATURE\_SM3} is defined to 1 if the SM3 Crypto instructions
from Armv8.2-A are supported and intrinsics targeting them are
available. These instructions include SM3\{TT1A, TT1B\}, and others.

\hypertarget{sm4-extension}{%
\subsubsection{SM4 extension}\label{sm4-extension}}

{\_\_ARM\_FEATURE\_SM4} is defined to 1 if the SM4 Crypto instructions
from Armv8.2-A are supported and intrinsics targeting them are
available. These instructions include SM4\{E, EKEY\} and others.

\hypertarget{fp16-fml-extension}{%
\subsubsection{FP16 FML extension}\label{fp16-fml-extension}}

{\_\_ARM\_FEATURE\_FP16\_FML} is defined to 1 if the FP16 multiplication
variant instructions from Armv8.2-A are supported and intrinsics
targeting them are available. Available when
{\_\_ARM\_FEATURE\_FP16\_SCALAR\_ARITHMETIC}.

\hypertarget{crc32-extension}{%
\subsubsection{CRC32 extension}\label{crc32-extension}}

{\_\_ARM\_FEATURE\_CRC32} is defined to 1 if the CRC32 instructions are
supported and the intrinsics defined in
\protect\hyperlink{ssec-crc32}{ssec-crc32} are available. These
instructions include CRC32B, CRC32H and others. This is only available
when {\_\_ARM\_ARCH \textgreater{}= 8}.

\hypertarget{random-number-generation-extension}{%
\subsubsection{Random Number Generation
Extension}\label{random-number-generation-extension}}

{\_\_ARM\_FEATURE\_RNG} is defined to 1 if the Random Number Generation
instructions are supported and the intrinsics defined in
\protect\hyperlink{ssec-rand}{ssec-rand} are available.

\hypertarget{directed-rounding}{%
\subsubsection{Directed rounding}\label{directed-rounding}}

{\_\_ARM\_FEATURE\_DIRECTED\_ROUNDING} is defined to 1 if the directed
rounding and conversion vector instructions are supported and rounding
and conversion intrinsics are available. This is only available when
{\_\_ARM\_ARCH \textgreater{}= 8}.

\hypertarget{numeric-maximum-and-minimum}{%
\subsubsection{Numeric maximum and
minimum}\label{numeric-maximum-and-minimum}}

{\_\_ARM\_FEATURE\_NUMERIC\_MAXMIN} is defined to 1 if the IEEE 754-2008
compliant floating point maximum and minimum vector instructions are
supported and intrinsics targeting these instructions are available.
This is only available when {\_\_ARM\_ARCH \textgreater{}= 8}.

\hypertarget{half-precision-argument-and-result}{%
\subsubsection{Half-precision argument and
result}\label{half-precision-argument-and-result}}

{\_\_ARM\_FP16\_ARGS} is defined to 1 if {\_\_fp16} can be used as an
argument and result.

\hypertarget{rounding-doubling-multiplies}{%
\subsubsection{Rounding doubling
multiplies}\label{rounding-doubling-multiplies}}

{\_\_ARM\_FEATURE\_QRDMX} is defined to 1 if SQRDMLAH and SQRDMLSH
instructions and their associated intrinsics are available.

\hypertarget{bit-floating-point-data-processing-operations}{%
\subsubsection{16-bit floating-point data processing
operations}\label{bit-floating-point-data-processing-operations}}

{\_\_ARM\_FEATURE\_FP16\_SCALAR\_ARITHMETIC} is defined to {1} if the
16-bit floating-point arithmetic instructions are supported in hardware
and the associated scalar intrinsics defined by ACLE are available. Note
that this implies:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\_\_ARM\_FP16\_FORMAT\_IEEE == 1}
\item
  {\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE == 0}
\item
  {\_\_ARM\_FP \& 0x02 == 1}
\end{itemize}
\end{quote}

{\_\_ARM\_FEATURE\_FP16\_VECTOR\_ARITHMETIC} is defined to {1} if the
16-bit floating-point arithmetic instructions are supported in hardware
and the associated vector intrinsics defined by ACLE are available. Note
that this implies:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\_\_ARM\_FP16\_FORMAT\_IEEE == 1}
\item
  {\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE == 0}
\item
  {\_\_ARM\_FP \& 0x02 == 1}
\item
  {\_\_ARM\_NEON\_FP \& 0x02 == 1}
\end{itemize}
\end{quote}

\hypertarget{javascript-floating-point-conversion}{%
\subsubsection{Javascript floating-point
conversion}\label{javascript-floating-point-conversion}}

{\_\_ARM\_FEATURE\_JCVT} is defined to 1 if the FJCVTZS (AArch64) or
VJCVT (AArch32) instruction and the associated intrinsic is available.

\hypertarget{floating-point-model}{%
\subsection{Floating-point model}\label{floating-point-model}}

These macros test the floating-point model implemented by the compiler
and libraries. The model determines the guarantees on arithmetic and
exceptions.

{\_\_ARM\_FP\_FAST} is defined to 1 if floating-point optimizations may
occur such that the computed results are different from those prescribed
by the order of operations according to the C standard. Examples of such
optimizations would be reassociation of expressions to reduce depth, and
replacement of a division by constant with multiplication by its
reciprocal.

{\_\_ARM\_FP\_FENV\_ROUNDING} is defined to 1 if the implementation
allows the rounding to be configured at runtime using the standard C
fesetround() function and will apply this rounding to future
floating-point operations. The rounding mode applies to both scalar
floating-point and Neon.

The floating-point implementation might or might not support denormal
values. If denormal values are not supported then they are flushed to
zero.

Implementations may also define the following macros in appropriate
floating-point modes:

{\_\_STDC\_IEC\_559\_\_} is defined if the implementation conforms to
IEC This implies support for floating-point exception status flags,
including the inexact exception. This macro is specified by
\protect\hyperlink{C99}{{[}C99{]}} (6.10.8).

{\_\_SUPPORT\_SNAN\_\_} is defined if the implementation supports
signalling NaNs. This macro is specified by the C standards proposal
WG14 N965 Optional support for Signaling NaNs. (Note: this was not
adopted into C11.)

\hypertarget{procedure-call-standard}{%
\subsection{Procedure call standard}\label{procedure-call-standard}}

{\_\_ARM\_PCS} is defined to 1 if the default procedure calling standard
for the translation unit conforms to the base PCS defined in
\protect\hyperlink{AAPCS}{{[}AAPCS{]}}. This is supported on AArch32
only.

{\_\_ARM\_PCS\_VFP} is defined to 1 if the default is to pass
floating-point parameters in hardware floating-point registers using the
VFP variant PCS defined in \protect\hyperlink{AAPCS}{{[}AAPCS{]}}. This
is supported on AArch32 only.

{\_\_ARM\_PCS\_AAPCS64} is defined to 1 if the default procedure calling
standard for the translation unit conforms to the
\protect\hyperlink{AAPCS64}{{[}AAPCS64{]}}.

Note that this should reflect the implementation default for the
translation unit. Implementations which allow the PCS to be set for a
function, class or namespace are not expected to redefine the macro
within that scope.

\hypertarget{position-independent-code}{%
\subsection{Position-independent code}\label{position-independent-code}}

{\_\_ARM\_ROPI} is defined to 1 if the translation unit is being
compiled in read-only position independent mode. In this mode, all
read-only data and functions are at a link-time constant offset from the
program counter.

{\_\_ARM\_RWPI} is defined to 1 if the translation unit is being
compiled in read-write position independent mode. In this mode, all
writable data is at a link-time constant offset from the static base
register defined in \protect\hyperlink{AAPCS}{{[}AAPCS{]}}.

The ROPI and RWPI position independence modes are compatible with each
other, so the {\_\_ARM\_ROPI} and {\_\_ARM\_RWPI} macros may be defined
at the same time.

\hypertarget{coprocessor-intrinsics}{%
\subsection{Coprocessor intrinsics}\label{coprocessor-intrinsics}}

{\_\_ARM\_FEATURE\_COPROC} is defined as a bitmap to indicate the
presence of coprocessor intrinsics for the target architecture. If
{\_\_ARM\_FEATURE\_COPROC} is undefined or zero, that means there is no
support for coprocessor intrinsics on the target architecture. The
following bits are used:

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.05\columnwidth}\raggedright
\textbf{Bit}\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
\textbf{Value}\strut
\end{minipage} & \begin{minipage}[t]{0.79\columnwidth}\raggedright
\textbf{Intrinsics Available}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.05\columnwidth}\raggedright
0\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
0x1\strut
\end{minipage} & \begin{minipage}[t]{0.79\columnwidth}\raggedright
\_\_arm\_cdp \_\_arm\_ldc, \_\_arm\_ldcl, \_\_arm\_stc, \_\_arm\_stcl,
\_\_arm\_mcr and \_\_arm\_mrc\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
0x2\strut
\end{minipage} & \begin{minipage}[t]{0.79\columnwidth}\raggedright
\_\_arm\_cdp2, \_\_arm\_ldc2, \_\_arm\_stc2, \_\_arm\_ldc2l,
\_\_arm\_stc2l, \_\_arm\_mcr2 and \_\_arm\_mrc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.05\columnwidth}\raggedright
2\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
0x4\strut
\end{minipage} & \begin{minipage}[t]{0.79\columnwidth}\raggedright
\_\_arm\_mcrr and \_\_arm\_mrrc\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.05\columnwidth}\raggedright
3\strut
\end{minipage} & \begin{minipage}[t]{0.07\columnwidth}\raggedright
0x8\strut
\end{minipage} & \begin{minipage}[t]{0.79\columnwidth}\raggedright
\_\_arm\_mcrr2 and \_\_arm\_mrrc2\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{armv8.5-a-floating-point-rounding-extension}{%
\subsection{Armv8.5-A Floating-point rounding
extension}\label{armv8.5-a-floating-point-rounding-extension}}

{\_\_ARM\_FEATURE\_FRINT} is defined to 1 if the Armv8.5-A rounding
number instructions are supported and the scalar and vector intrinsics
are available. This macro may only ever be defined in the AArch64
execution state. The scalar intrinsics are specified in
\protect\hyperlink{ssec-Fpdpi}{ssec-Fpdpi} and are not expected to be
for general use. They are defined for uses that require the specialist
rounding behavior of the relevant instructions. The vector intrinsics
are specified in the Arm Neon Intrinsics Reference Architecture
Specification \protect\hyperlink{Neon}{{[}Neon{]}}.

\hypertarget{dot-product-extension}{%
\subsection{Dot Product extension}\label{dot-product-extension}}

{\_\_ARM\_FEATURE\_DOTPROD} is defined if the dot product data
manipulation instructions are supported and the vector intrinsics are
available. Note that this implies:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\_\_ARM\_NEON == 1}
\end{itemize}
\end{quote}

\hypertarget{complex-number-intrinsics}{%
\subsection{Complex number intrinsics}\label{complex-number-intrinsics}}

{\_\_ARM\_FEATURE\_COMPLEX} is defined if the complex addition and
complex multiply-accumulate vector instructions are supported. Note that
this implies:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\_\_ARM\_NEON == 1}
\end{itemize}
\end{quote}

These instructions require that the input vectors are organized such
that the real and imaginary parts of the complex number are stored in
alternating sequences: real, imag, real, imag, \ldots{} etc.

\hypertarget{branch-target-identification}{%
\subsection{Branch Target
Identification}\label{branch-target-identification}}

{\_\_ARM\_FEATURE\_BTI\_DEFAULT} is defined to 1 if the Branch Target
Identification extension is used to protect branch destinations by
default. The protection applied to any particular function may be
overriden by mechanisms such as function attributes.

\hypertarget{pointer-authentication}{%
\subsection{Pointer Authentication}\label{pointer-authentication}}

{\_\_ARM\_FEATURE\_PAC\_DEFAULT} is defined as a bitmap to indicate the
use of the Pointer Authentication extension to protect code against code
reuse attacks by default. The bits are defined as follows:

\begin{longtable}[]{@{}ll@{}}
\toprule
\endhead
\textbf{Bit} & \textbf{Meaning}\tabularnewline
0 & Protection using the A key\tabularnewline
1 & Protection using the B key\tabularnewline
2 & Protection including leaf functions\tabularnewline
\bottomrule
\end{longtable}

For example, a value of {0x5} indicates that the Pointer Authentication
extension is used to protect function entry points, including leaf
functions, using the A key for signing. The protection applied to any
particular function may be overriden by mechanisms such as function
attributes.

\hypertarget{matrix-multiply-intrinsics}{%
\subsection{Matrix Multiply
Intrinsics}\label{matrix-multiply-intrinsics}}

{\_\_ARM\_FEATURE\_MATMUL\_INT8} is defined if the integer matrix
multiply instructions are supported. Note that this implies:

\begin{itemize}
\tightlist
\item
  {\_\_ARM\_NEON == 1}
\end{itemize}

\hypertarget{custom-datapath-extension}{%
\subsection{Custom Datapath Extension}\label{custom-datapath-extension}}

{\_\_ARM\_FEATURE\_CDE} is defined to 1 if the Arm Custom Datapath
Extension (CDE) is supported.

{\_\_ARM\_FEATURE\_CDE\_COPROC} is a bitmap indicating the CDE
coprocessors available. The following bits are used:

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Bit} & \textbf{Value} & \textbf{CDE Coprocessor
available}\tabularnewline
0 & 0x01 & {p0}\tabularnewline
1 & 0x02 & {p1}\tabularnewline
2 & 0x04 & {p2}\tabularnewline
3 & 0x08 & {p3}\tabularnewline
4 & 0x10 & {p4}\tabularnewline
5 & 0x20 & {p5}\tabularnewline
6 & 0x40 & {p6}\tabularnewline
7 & 0x80 & {p7}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{armv8.7-a-loadstore-64-byte-extension}{%
\subsection{Armv8.7-A Load/Store 64 Byte
extension}\label{armv8.7-a-loadstore-64-byte-extension}}

{\_\_ARM\_FEATURE\_LS64} is defined to 1 if the Armv8.7-A {LD64B},
{ST64B}, {ST64BV} and {ST64BV0} instructions for atomic 64-byte access
to device memory are supported. This macro may only ever be defined in
the AArch64 execution state. Intrinsics for using these instructions are
specified in \protect\hyperlink{ssec-LS64}{ssec-LS64}.

\hypertarget{mapping-of-object-build-attributes-to-predefines}{%
\subsection{Mapping of object build attributes to
predefines}\label{mapping-of-object-build-attributes-to-predefines}}

This section is provided for guidance. Details of build attributes can
be found in \protect\hyperlink{BA}{{[}BA{]}}.

\begin{longtable}[]{@{}lll@{}}
\toprule
\textbf{Tag no.} & \textbf{Tag} & \textbf{Predefined
macro}\tabularnewline
\midrule
\endhead
6 & \texttt{Tag\_CPU\_arch} & \texttt{\_\_ARM\_ARCH},
\texttt{\_\_ARM\_FEATURE\_DSP}\tabularnewline
7 & \texttt{Tag\_CPU\_arch\_profile} &
\texttt{\_\_ARM\_PROFILE}\tabularnewline
8 & \texttt{Tag\_ARM\_ISA\_use} &
\texttt{\_\_ARM\_ISA\_ARM}\tabularnewline
9 & \texttt{Tag\_THUMB\_ISA\_use} &
\texttt{\_\_ARM\_ISA\_THUMB}\tabularnewline
11 & \texttt{Tag\_WMMX\_arch} & \texttt{\_\_ARM\_WMMX}\tabularnewline
18 & \texttt{Tag\_ABI\_PCS\_wchar\_t} &
\texttt{\_\_ARM\_SIZEOF\_WCHAR\_T}\tabularnewline
20 & \texttt{Tag\_ABI\_FP\_denormal} &\tabularnewline
21 & \texttt{Tag\_ABI\_FP\_exceptions} &\tabularnewline
22 & \texttt{Tag\_ABI\_FP\_user\_exceptions} &\tabularnewline
23 & \texttt{Tag\_ABI\_FP\_number\_model} &\tabularnewline
26 & \texttt{Tag\_ABI\_enum\_size} &
\texttt{\_\_ARM\_SIZEOF\_MINIMAL\_ENUM}\tabularnewline
34 & \texttt{Tag\_CPU\_unaligned\_access} &
\texttt{\_\_ARM\_FEATURE\_UNALIGNED}\tabularnewline
36 & \texttt{Tag\_FP\_HP\_extension} &
\texttt{\_\_ARM\_FP16\_FORMAT\_IEEE}\tabularnewline
& &\tabularnewline
& & \texttt{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE}\tabularnewline
38 & \texttt{Tag\_ABI\_FP\_16bit\_for} &
\texttt{\_\_ARM\_FP16\_FORMAT\_IEEE}\tabularnewline
& &\tabularnewline
& & \texttt{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{summary-of-predefined-macros}{%
\subsection{Summary of predefined
macros}\label{summary-of-predefined-macros}}

\begin{longtable}[]{@{}lll@{}}
\toprule
\begin{minipage}[b]{0.42\columnwidth}\raggedright
\textbf{Macro name}\strut
\end{minipage} & \begin{minipage}[b]{0.44\columnwidth}\raggedright
\textbf{Meaning}\strut
\end{minipage} & \begin{minipage}[b]{0.05\columnwidth}\raggedright
\textbf{Example}\strut
\end{minipage}\tabularnewline
\midrule
\endhead
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_32BIT\_STATE}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Code is for AArch32 state\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_64BIT\_STATE}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Code is for AArch64 state\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ACLE}
\protect\hyperlink{ssec-TfACLE}{{[}ssec-TfACLE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Indicates ACLE implemented\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
101\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ALIGN\_MAX\_PWR}
\protect\hyperlink{ssec-Aoso}{{[}ssec-Aoso{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Log of maximum alignment of static object\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
20\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ALIGN\_MAX\_STACK\_PWR}
\protect\hyperlink{ssec-Aoso2}{{[}ssec-Aoso2{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Log of maximum alignment of stack object\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
3\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ARCH}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Arm architecture level\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
7\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ARCH\_ISA\_A64}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
AArch64 ISA present\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ARCH\_ISA\_ARM}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Arm instruction set present\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ARCH\_ISA\_THUMB}
\protect\hyperlink{ssec-ATisa}{{[}ssec-ATisa{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
T32 instruction set present\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ARCH\_PROFILE}
\protect\hyperlink{ssec-Archp}{{[}ssec-Archp{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Architecture profile\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
\texttt{\textquotesingle{}A\textquotesingle{}}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_BIG\_ENDIAN}
\protect\hyperlink{ssec-Endi}{{[}ssec-Endi{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Memory is big-endian\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_COMPLEX}
\protect\hyperlink{ssec-COMPLX}{{[}ssec-COMPLX{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Armv8.3-A extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_BTI\_DEFAULT}
\protect\hyperlink{ssec-BTI}{{[}ssec-BTI{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Branch Target Identification\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_PAC\_DEFAULT}
\protect\hyperlink{ssec-PAC}{{[}ssec-PAC{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Pointer authentication\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x5\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_CLZ}
\protect\hyperlink{ssec-CLZ}{{[}ssec-CLZ{]}},
\protect\hyperlink{ssec-Mdpi}{{[}ssec-Mdpi{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
CLZ instruction\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_CRC32}
\protect\hyperlink{ssec-CRC32E}{{[}ssec-CRC32E{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
CRC32 extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_CRYPTO}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Crypto extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_DIRECTED\_ROUNDING}
\protect\hyperlink{ssec-v8rnd}{{[}ssec-v8rnd{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Directed Rounding\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_DOTPROD}
\protect\hyperlink{ssec-Dot}{{[}ssec-Dot{]}},
\protect\hyperlink{ssec-DotIns}{{[}ssec-DotIns{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Dot product extension (ARM v8.2-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_FRINT}
\protect\hyperlink{ssec-Frint}{{[}ssec-Frint{]}},
\protect\hyperlink{ssec-FrintIns}{{[}ssec-FrintIns{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Floating-point rounding extension (Arm v8.5-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_DSP}
\protect\hyperlink{ssec-DSPins}{{[}ssec-DSPins{]}},
\protect\hyperlink{ssec-Satin}{{[}ssec-Satin{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
DSP instructions (Arm v5E) (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_AES}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-AES}{{[}ssec-AES{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
AES Crypto extension (Arm v8-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_FMA}
\protect\hyperlink{ssec-FMA}{{[}ssec-FMA{]}},
\protect\hyperlink{ssec-Fpdpi}{{[}ssec-Fpdpi{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Floating-point fused multiply-accumulate\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_IDIV}
\protect\hyperlink{ssec-HID}{{[}ssec-HID{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Hardware Integer Divide\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_JCVT}
\protect\hyperlink{ssec-JCVT}{{[}ssec-JCVT{]}},
\protect\hyperlink{ssec-Fpdpi}{{[}ssec-Fpdpi{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Javascript conversion (ARMv8.3-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_LDREX} \emph{(Deprecated)}
\protect\hyperlink{ssec-LDREX}{{[}ssec-LDREX{]}},
\protect\hyperlink{ssec-Sbahi}{{[}ssec-Sbahi{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Load/store exclusive instructions\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x0F\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_MATMUL\_INT8}
\protect\hyperlink{ssec-MatMul}{{[}ssec-MatMul{]}},
\protect\hyperlink{ssec-MatMulIns}{{[}ssec-MatMulIns{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Integer Matrix Multiply extension (Armv8.6-A, optional Armv8.2-A,
Armv8.3-A, Armv8.4-A, Armv8.5-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_MEMORY\_TAGGING}
\protect\hyperlink{ssec-MTE}{{[}ssec-MTE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Memory Tagging (Armv8.5-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_ATOMICS}
\protect\hyperlink{ssec-ATOMICS}{{[}ssec-ATOMICS{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Large System Extensions\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_NUMERIC\_MAXMIN}
\protect\hyperlink{ssec-v8max}{{[}ssec-v8max{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Numeric Maximum and Minimum\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_QBIT}
\protect\hyperlink{ssec-Qflag}{{[}ssec-Qflag{]}},
\protect\hyperlink{ssec-Qflag2}{{[}ssec-Qflag2{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Q (saturation) flag (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_QRDMX}
\protect\hyperlink{ssec-RDM}{{[}ssec-RDM{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SQRDMLxH instructions and associated intrinsics availability\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SAT}
\protect\hyperlink{ssec-Satins}{{[}ssec-Satins{]}},
\protect\hyperlink{ssec-Wsatin}{{[}ssec-Wsatin{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Width-specified saturation instructions (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SHA2}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-SHA2}{{[}ssec-SHA2{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SHA2 Crypto extension (Arm v8-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SHA512}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-SHA512}{{[}ssec-SHA512{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SHA2 Crypto ext. (Arm v8.4-A, optional Armv8.2-A, Armv8.3-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SHA3}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-SHA3}{{[}ssec-SHA3{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SHA3 Crypto extension (Arm v8.4-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SIMD32}
\protect\hyperlink{ssec-Satins}{{[}ssec-Satins{]}},
\protect\hyperlink{ssec-32SIMD}{{[}ssec-32SIMD{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
32-bit SIMD instructions (Armv6) (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SM3}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-SM3}{{[}ssec-SM3{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SM3 Crypto extension (Arm v8.4-A, optional Armv8.2-A, Armv8.3-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_SM4}
\protect\hyperlink{ssec-CrypE}{{[}ssec-CrypE{]}},
\protect\hyperlink{ssec-SM4}{{[}ssec-SM4{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
SM4 Crypto extension (Arm v8.4-A, optional Armv8.2-A, Armv8.3-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_FP16\_FML}
\protect\hyperlink{ssec-FP16FML}{{[}ssec-FP16FML{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
FP16 FML extension (Arm v8.4-A, optional Armv8.2-A, Armv8.3-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_UNALIGNED}
\protect\hyperlink{ssec-Uasih}{{[}ssec-Uasih{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Hardware support for unaligned access\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP}
\protect\hyperlink{ssec-HWFP}{{[}ssec-HWFP{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Hardware floating-point\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP16\_ARGS}
\protect\hyperlink{ssec-FP16arg}{{[}ssec-FP16arg{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
\texttt{\_\_fp16} argument and result\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x0C\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP16\_FORMAT\_ALTERNATIVE}
\protect\hyperlink{ssec-FP16fmt}{{[}ssec-FP16fmt{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
16-bit floating-point, alternative format\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP16\_FORMAT\_IEEE}
\protect\hyperlink{ssec-FP16fmt}{{[}ssec-FP16fmt{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
16-bit floating-point, IEEE format\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP\_FAST}
\protect\hyperlink{ssec-FPm}{{[}ssec-FPm{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Accuracy-losing optimizations\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FP\_FENV\_ROUNDING}
\protect\hyperlink{ssec-FPm}{{[}ssec-FPm{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Rounding is configurable at runtime\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_BF16\_FORMAT\_ALTERNATIVE}
\protect\hyperlink{ssec-BF16fmt}{{[}ssec-BF16fmt{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
16-bit brain floating-point, alternative format\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_BF16}
\protect\hyperlink{ssec-BF16fmt}{{[}ssec-BF16fmt{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
16-bit brain floating-point, vector instruction\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_MVE}
\protect\hyperlink{ssec-MVE}{{[}ssec-MVE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
M-profile Vector Extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_CDE}
\protect\hyperlink{ssec-CDE}{{[}ssec-CDE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Custom Datapath Extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x01\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_CDE\_COPROC}
\protect\hyperlink{ssec-CDE}{{[}ssec-CDE{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Custom Datapath Extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0xf\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_NEON}
\protect\hyperlink{ssec-NEONfp}{{[}ssec-NEONfp{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Advanced SIMD (Neon) extension\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_NEON\_FP}
\protect\hyperlink{ssec-WMMX}{{[}ssec-WMMX{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Advanced SIMD (Neon) floating-point\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x04\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_COPROC}
\protect\hyperlink{ssec-CoProc}{{[}ssec-CoProc{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Coprocessor Intrinsics\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_PCS} \protect\hyperlink{ssec-Pcs}{{[}ssec-Pcs{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Arm procedure call standard (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
0x01\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_PCS\_AAPCS64}
\protect\hyperlink{ssec-Pcs}{{[}ssec-Pcs{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Arm PCS for AArch64.\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_PCS\_VFP}
\protect\hyperlink{ssec-Pcs}{{[}ssec-Pcs{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Arm PCS hardware FP variant in use (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_FEATURE\_RNG}
\protect\hyperlink{ssec-rng}{{[}ssec-rng{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Random Number Generation Extension (Armv8.5-A)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_ROPI}
\protect\hyperlink{ssec-Pic}{{[}ssec-Pic{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Read-only PIC in use\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_RWPI}
\protect\hyperlink{ssec-Pic}{{[}ssec-Pic{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Read-write PIC in use\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_SIZEOF\_MINIMAL\_ENUM}
\protect\hyperlink{ssec-Imptype}{{[}ssec-Imptype{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Size of minimal enumeration type: 1 or 4\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_SIZEOF\_WCHAR\_T}
\protect\hyperlink{ssec-Imptype}{{[}ssec-Imptype{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Size of \texttt{wchar\_t}: 2 or 4\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.42\columnwidth}\raggedright
\texttt{\_\_ARM\_WMMX}
\protect\hyperlink{ssec-WMMX}{{[}ssec-WMMX{]}}\strut
\end{minipage} & \begin{minipage}[t]{0.44\columnwidth}\raggedright
Wireless MMX extension (32-bit-only)\strut
\end{minipage} & \begin{minipage}[t]{0.05\columnwidth}\raggedright
1\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{attributes-and-pragmas}{%
\section{Attributes and pragmas}\label{attributes-and-pragmas}}

\hypertarget{attribute-syntax}{%
\subsection{Attribute syntax}\label{attribute-syntax}}

The general rules for attribute syntax are described in the GCC
documentation
\textless{}\url{http://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html}\textgreater{}.
Briefly, for this declaration:

\begin{verbatim}
A int B x C, D y E;
\end{verbatim}

attribute {A} applies to both {x} and {y}; {B} and {C} apply to {x}
only, and {D} and {E} apply to {y} only. Programmers are recommended to
keep declarations simple if attributes are used.

Unless otherwise stated, all attribute arguments must be compile-time
constants.

\hypertarget{hardwaresoftware-floating-point-calling-convention}{%
\subsection{Hardware/software floating-point calling
convention}\label{hardwaresoftware-floating-point-calling-convention}}

The AArch32 PCS defines a base standard, as well as several variants.

On targets with hardware FP the AAPCS provides for procedure calls to
use either integer or floating-point argument and result registers. ACLE
allows this to be selectable per function. :

\begin{verbatim}
__attribute__((pcs("aapcs")))
\end{verbatim}

applied to a function, selects software (integer) FP calling convention.
:

\begin{verbatim}
__attribute__((pcs("aapcs-vfp")))
\end{verbatim}

applied to a function, selects hardware FP calling convention.

The AArch64 PCS standard variants do not change how parameters are
passed, so no PCS attributes are supported.

The pcs attribute applies to functions and function types.
Implementations are allowed to treat the procedure call specification as
part of the type, i.e.~as a language linkage in the sense of {[}C++
\#1{]}.

\hypertarget{target-selection}{%
\subsection{Target selection}\label{target-selection}}

The following target selection attributes are supported:

\begin{verbatim}
__attribute__((target("arm")))
\end{verbatim}

when applied to a function, forces A32 state code generation. :

\begin{verbatim}
__attribute__((target("thumb")))
\end{verbatim}

when applied to a function, forces T32 state code generation.

The implementation must generate code in the required state unless it is
impossible to do so. For example, on an Armv5 or Armv6 target with VFP
(and without the T32 instruction set), if a function is forced to T32
state, any floating-point operations or intrinsics that are only
available in A32 state must be generated as calls to library functions
or compiler-generated functions.

This attribute does not apply to AArch64.

\hypertarget{weak-linkage}{%
\subsection{Weak linkage}\label{weak-linkage}}

{\_\_attribute\_\_((weak))} can be attached to declarations and
definitions to indicate that they have weak static linkage ({STB\_WEAK}
in ELF objects). As definitions, they can be overridden by other
definitions of the same symbol. As references, they do not need to be
satisfied and will be resolved to zero if a definition is not present.

\hypertarget{patchable-constants}{%
\subsubsection{Patchable constants}\label{patchable-constants}}

In addition, this specification requires that weakly defined initialized
constants are not used for constant propagation, allowing the value to
be safely changed by patching after the object is produced.

\hypertarget{alignment}{%
\subsection{Alignment}\label{alignment}}

The new standards for C \protect\hyperlink{C11}{{[}C11{]}} (6.7.5) and
C++ \protect\hyperlink{CPP11}{{[}CPP11{]}} (7.6.2) add syntax for
aligning objects and types. ACLE provides an alternative syntax
described in this section.

\hypertarget{alignment-attribute}{%
\subsubsection{Alignment attribute}\label{alignment-attribute}}

{\_\_attribute\_\_((aligned(N)))} can be associated with data,
functions, types and fields. N must be an integral constant expression
and must be a power of 2, for example 1, 2, 4, 8. The maximum alignment
depends on the storage class of the object being aligned. The size of a
data type is always a multiple of its alignment. This is a consequence
of the rule in C that the spacing between array elements is equal to the
element size.

The aligned attribute does not act as a type qualifier. For example,
given:

\begin{verbatim}
char x `__attribute__((aligned(8)));`
int y `__attribute__((aligned(1)));`
\end{verbatim}

the type of {\&x} is {char *} and the type of {\&y} is {int *}. The
following declarations are equivalent:

\begin{verbatim}
struct S x __attribute__((aligned(16))); /* ACLE */

struct S _Alignas(16) x/* C11 */

#include <stdalign.h> /* C11 (alternative) */
struct S alignas(16) x;

struct S alignas(16) x; /* C++11 */
\end{verbatim}

\hypertarget{alignment-of-static-objects}{%
\subsubsection{Alignment of static
objects}\label{alignment-of-static-objects}}

The macro {\_\_ARM\_ALIGN\_MAX\_PWR} indicates (as the exponent of a
power of 2) the maximum available alignment of static data -- for
example 4 for 16-byte alignment. So the following is always valid:

\begin{verbatim}
int x __attribute__((aligned(1 << __ARM_ALIGN_MAX_PWR)));
\end{verbatim}

or, using the C11/C++11 syntax:

\begin{verbatim}
alignas(1 << __ARM_ALIGN_MAX_PWR) int x;
\end{verbatim}

Since an alignment request on an object does not change its type or
size, x in this example would have type int and size 4.

There is in principle no limit on the alignment of static objects,
within the constraints of available memory. In the Arm ABI an object
with a requested alignment would go into an ELF section with at least as
strict an alignment requirement. However, an implementation supporting
position-independent dynamic objects or overlays may need to place
restrictions on their alignment demands.

\hypertarget{alignment-of-stack-objects}{%
\subsubsection{Alignment of stack
objects}\label{alignment-of-stack-objects}}

It must be possible to align any local object up to the stack alignment
as specified in the AAPCS for AArch32 (i.e.~8 bytes) or as specified in
AAPCS64 for AArch64 (i.e.~16 bytes) this being also the maximal
alignment of any native type.

An implementation may, but is not required to, permit the allocation of
local objects with greater alignment, for example 16 or 32 bytes for
AArch32. (This would involve some runtime adjustment such that the
object address was not a fixed offset from the stack pointer on entry.)

If a program requests alignment greater than the implementation
supports, it is recommended that the compiler warn but not fault this.
Programmers should expect over-alignment of local objects to be treated
as a hint.

The macro {\_\_ARM\_ALIGN\_MAX\_STACK\_PWR} indicates (as the exponent
of a power of 2) the maximum available stack alignment. For example, a
value of 3 indicates 8-byte alignment.

\hypertarget{procedure-calls}{%
\subsubsection{Procedure calls}\label{procedure-calls}}

For procedure calls, where a parameter has aligned type, data should be
passed as if it was a basic type of the given type and alignment. For
example, given the aligned type:

\begin{verbatim}
struct S { int a[2]; } __attribute__((aligned(8)));
\end{verbatim}

the second argument of:

\begin{verbatim}
f(int, struct S);
\end{verbatim}

should be passed as if it were:

\begin{verbatim}
f(int, long long);
\end{verbatim}

which means that in AArch32 AAPCS the second parameter is in {R2/R3}
rather than {R1/R2}.

\hypertarget{alignment-of-c-heap-storage}{%
\subsubsection{Alignment of C heap
storage}\label{alignment-of-c-heap-storage}}

The standard C allocation functions \protect\hyperlink{C99}{{[}C99{]}}
(7.20.3), such as malloc(), return storage aligned to the normal maximal
alignment, i.e. the largest alignment of any (standard) type.

Implementations may, but are not required to, provide a function to
return heap storage of greater alignment. Suitable functions are:

\begin{verbatim}
int posix_memalign(void **memptr, size_t alignment, size_t size );
\end{verbatim}

as defined in \protect\hyperlink{POSIX}{{[}POSIX{]}}, or:

\begin{verbatim}
void *aligned_alloc(size_t alignment, size_t size);
\end{verbatim}

as defined in \protect\hyperlink{C11}{{[}C11{]}} (7.22.3.1).

\hypertarget{alignment-of-c-heap-allocation}{%
\subsubsection{Alignment of C++ heap
allocation}\label{alignment-of-c-heap-allocation}}

In C++, an allocation (with new) knows the object's type. If the type is
aligned, the allocation should also be aligned. There are two cases to
consider depending on whether the user has provided an allocation
function.

If the user has provided an allocation function for an object or array
of over-aligned type, it is that function's responsibility to return
suitably aligned storage. The size requested by the runtime library will
be a multiple of the alignment (trivially so, for the non-array case).

(The AArch32 C++ ABI does not explicitly deal with the runtime behavior
when dealing with arrays of alignment greater than 8. In this situation,
any cookie will be 8 bytes as usual, immediately preceding the array;
this means that the cookie is not necessarily at the address seen by the
allocation and deallocation functions. Implementations will need to make
some adjustments before and after calls to the ABI-defined C++ runtime,
or may provide additional non-standard runtime helper functions.)
Example:

\begin{verbatim}
struct float4 {
  void *operator new[](size_t s) {
    void *p;
    posix_memalign(&p, 16, s);
    return p;
  }
  float data[4];
} __attribute__((aligned(16)));
\end{verbatim}

If the user has not provided their own allocation function, the behavior
is implementation-defined.

The generic itanium C++ ABI, which we use in AArch64, already handles
arrays with arbitrarily aligned elements

\hypertarget{other-attributes}{%
\subsection{Other attributes}\label{other-attributes}}

The following attributes should be supported and their definitions
follow \protect\hyperlink{GCC}{{[}GCC{]}}. These attributes are not
specific to Arm or the Arm ABI.

{alias}, {common}, {nocommon}, {noinline}, {packed}, {section},
{visibility}, {weak}

\begin{itemize}
\tightlist
\item
  Some specific requirements on the weak attribute are detailed in
  \protect\hyperlink{sec-Weak-linkage}{sec-Weak-linkage}.
\end{itemize}

\hypertarget{synchronization-barrier-and-hint-intrinsics}{%
\section{Synchronization, barrier, and hint
intrinsics}\label{synchronization-barrier-and-hint-intrinsics}}

\hypertarget{introduction-3}{%
\subsection{Introduction}\label{introduction-3}}

This section provides intrinsics for managing data that may be accessed
concurrently between processors, or between a processor and a device.
Some intrinsics atomically update data, while others place barriers
around accesses to data to ensure that accesses are visible in the
correct order.

Memory prefetch intrinsics are also described in this section.

\hypertarget{atomic-update-primitives}{%
\subsection{Atomic update primitives}\label{atomic-update-primitives}}

\hypertarget{cc-standard-atomic-primitives}{%
\subsubsection{C/C++ standard atomic
primitives}\label{cc-standard-atomic-primitives}}

The new C and C++ standards \protect\hyperlink{C11}{{[}C11{]}} (7.17),
\protect\hyperlink{CPP11}{{[}CPP11{]}} (clause 29) provide a
comprehensive library of atomic operations and barriers, including
operations to read and write data with particular ordering requirements.
Programmers are recommended to use this where available.

\hypertarget{ia-64gcc-atomic-update-primitives}{%
\subsubsection{IA-64/GCC atomic update
primitives}\label{ia-64gcc-atomic-update-primitives}}

The {\_\_sync} family of intrinsics (introduced in
\protect\hyperlink{IA-64}{{[}IA-64{]}} (section 7.4), and as documented
in the GCC documentation) may be provided, especially if the C/C++
atomics are not available, and are recommended as being portable and
widely understood. These may be expanded inline, or call library
functions. Note that, unusually, these intrinsics are polymorphic they
will specialize to instructions suitable for the size of their
arguments.

\hypertarget{memory-barriers}{%
\subsection{Memory barriers}\label{memory-barriers}}

Memory barriers ensure specific ordering properties between memory
accesses. For more details on memory barriers, see {[}ARMARM{]}
(A3.8.3). The intrinsics in this section are available for all targets.
They may be no-ops (i.e.~generate no code, but possibly act as a code
motion barrier in compilers) on targets where the relevant instructions
do not exist, but only if the property they guarantee would have held
anyway. On targets where the relevant instructions exist but are
implemented as no-ops, these intrinsics generate the instructions.

The memory barrier intrinsics take a numeric argument indicating the
scope and access type of the barrier, as shown in the following table.
(The assembler mnemonics for these numbers, as shown in the table, are
not available in the intrinsics.) The argument should be an integral
constant expression within the required range see
\protect\hyperlink{sec-Constant-arguments-to-intrinsics}{sec-Constant-arguments-to-intrinsics}.

\begin{longtable}[]{@{}llll@{}}
\toprule
\endhead
\textbf{Argument} & \textbf{Mnemonic} & \textbf{Domain} &
\textbf{Ordered Accesses (before-after)}\tabularnewline
15 & SY & Full system & Any-Any\tabularnewline
14 & ST & Full system & Store-Store\tabularnewline
13 & LD & Full system & Load-Load, Load-Store\tabularnewline
11 & ISH & Inner shareable & Any-Any\tabularnewline
10 & ISHST & Inner shareable & Store-Store\tabularnewline
9 & ISHLD & Inner shareable & Load-Load, Load-Store\tabularnewline
7 & NSH or UN & Non-shareable & Any-Any\tabularnewline
6 & NSHST & Non-shareable & Store-Store\tabularnewline
5 & NSHLD & Non-shareable & Load-Load, Load-Store\tabularnewline
3 & OSH & Outer shareable & Any-Any\tabularnewline
2 & OSHST & Outer shareable & Store-Store\tabularnewline
1 & OSHLD & Outer shareable & Load-Load, Load-Store\tabularnewline
\bottomrule
\end{longtable}

The following memory barrier intrinsics are available: :

\begin{verbatim}
void __dmb(/*constant*/ unsigned int);
\end{verbatim}

Generates a DMB (data memory barrier) instruction or equivalent CP15
instruction. DMB ensures the observed ordering of memory accesses.
Memory accesses of the specified type issued before the DMB are
guaranteed to be observed (in the specified scope) before memory
accesses issued after the DMB. For example, DMB should be used between
storing data, and updating a flag variable that makes that data
available to another core.

The {\_\_dmb()} intrinsic also acts as a compiler memory barrier of the
appropriate type. :

\begin{verbatim}
void __dsb(/*constant*/ unsigned int);
\end{verbatim}

Generates a DSB (data synchronization barrier) instruction or equivalent
CP15 instruction. DSB ensures the completion of memory accesses. A DSB
behaves as the equivalent DMB and has additional properties. After a DSB
instruction completes, all memory accesses of the specified type issued
before the DSB are guaranteed to have completed.

The {\_\_dsb()} intrinsic also acts as a compiler memory barrier of the
appropriate type. :

\begin{verbatim}
void __isb(/*constant*/ unsigned int);
\end{verbatim}

Generates an ISB (instruction synchronization barrier) instruction or
equivalent CP15 instruction. This instruction flushes the processor
pipeline fetch buffers, so that following instructions are fetched from
cache or memory. An ISB is needed after some system maintenance
operations.

An ISB is also needed before transferring control to code that has been
loaded or modified in memory, for example by an overlay mechanism or
just-in-time code generator. (Note that if instruction and data caches
are separate, privileged cache maintenance operations would be needed in
order to unify the caches.)

The only supported argument for the {\_\_isb()} intrinsic is 15,
corresponding to the SY (full system) scope of the ISB instruction.

\hypertarget{examples}{%
\subsubsection{Examples}\label{examples}}

In this example, process {P1} makes some data available to process {P2}
and sets a flag to indicate this. :

\begin{verbatim}
P1:

  value = x;
  /* issue full-system memory barrier for previous store:
     setting of flag is guaranteed not to be observed before
     write to value */
  __dmb(14);
  flag = true;

P2:

  /* busy-wait until the data is available */
  while (!flag) {}
  /* issue full-system memory barrier: read of value is guaranteed
     not to be observed by memory system before read of flag */
  __dmb(15);
  /* use value */;
\end{verbatim}

In this example, process {P1} makes data available to {P2} by putting it
on a queue. :

\begin{verbatim}
P1:

  work = new WorkItem;
  work->payload = x;
  /* issue full-system memory barrier for previous store:
     consumer cannot observe work item on queue before write to
     work item's payload */
  __dmb(14);
  queue_head = work;

P2:

  /* busy-wait until work item appears */
  while (!(work = `queue_head))` {}
  /* no barrier needed: load of payload is data-dependent */
  /* use work->payload */
\end{verbatim}

\hypertarget{hints}{%
\subsection{Hints}\label{hints}}

The intrinsics in this section are available for all targets. They may
be no-ops (i.e.~generate no code, but possibly act as a code motion
barrier in compilers) on targets where the relevant instructions do not
exist. On targets where the relevant instructions exist but are
implemented as no-ops, these intrinsics generate the instructions. :

\begin{verbatim}
void __wfi(void);
\end{verbatim}

Generates a WFI (wait for interrupt) hint instruction, or nothing. The
WFI instruction allows (but does not require) the processor to enter a
low-power state until one of a number of asynchronous events occurs. :

\begin{verbatim}
void __wfe(void);
\end{verbatim}

Generates a WFE (wait for event) hint instruction, or nothing. The WFE
instruction allows (but does not require) the processor to enter a
low-power state until some event occurs such as a SEV being issued by
another processor. :

\begin{verbatim}
void __sev(void);
\end{verbatim}

Generates a SEV (send a global event) hint instruction. This causes an
event to be signaled to all processors in a multiprocessor system. It is
a NOP on a uniprocessor system. :

\begin{verbatim}
void __sevl(void);
\end{verbatim}

Generates a send a local event hint instruction. This causes an event to
be signaled to only the processor executing this instruction. In a
multiprocessor system, it is not required to affect the other
processors. :

\begin{verbatim}
void __yield(void);
\end{verbatim}

Generates a YIELD hint instruction. This enables multithreading software
to indicate to the hardware that it is performing a task, for example a
spin-lock, that could be swapped out to improve overall system
performance. :

\begin{verbatim}
void __dbg(/*constant*/ unsigned int);
\end{verbatim}

Generates a DBG instruction. This provides a hint to debugging and
related systems. The argument must be a constant integer from 0 to 15
inclusive. See implementation documentation for the effect (if any) of
this instruction and the meaning of the argument. This is available only
when compiling for AArch32.

\hypertarget{swap}{%
\subsection{Swap}\label{swap}}

{\_\_swp} is available for all targets. This intrinsic expands to a
sequence equivalent to the deprecated (and possibly unavailable) SWP
instruction. :

\begin{verbatim}
uint32_t __swp(uint32_t, volatile void *);
\end{verbatim}

Unconditionally stores a new value at the given address, and returns the
old value.

As with the IA-64/GCC primitives described in 0, the {\_\_swp} intrinsic
is polymorphic. The second argument must provide the address of a
byte-sized object or an aligned word-sized object and it must be
possible to determine the size of this object from the argument
expression.

This intrinsic is implemented by LDREX/STREX (or LDREXB/STREXB) where
available, as if by:

\begin{verbatim}
uint32_t __swp(uint32_t x, volatile uint32_t *p) {
  uint32_t v;
  /* use LDREX/STREX intrinsics not specified by ACLE */
  do v = __ldrex(p); while (__strex(x, p));
  return v;
}
\end{verbatim}

or alternatively,:

\begin{verbatim}
uint32_t __swp(uint32_t x, uint32_t *p) {
  uint32_t v;
  /* use IA-64/GCC atomic builtins */
  do v = *p; while (!__sync_bool_compare_and_swap(p, v, x));
  return v;
}
\end{verbatim}

It is recommended that compilers should produce a
downgradeable/upgradeable warning on encountering the {\_\_swp}
intrinsic.

Only if load-store exclusive instructions are not available will the
intrinsic use the SWP/SWPB instructions.

It is strongly recommended to use standard and flexible atomic
primitives such as those available in the C++
\textless{}atomic\textgreater{} header. {\_\_swp} is provided solely to
allow straightforward (and possibly automated) replacement of explicit
use of SWP in inline assembler. SWP is obsolete in the Arm architecture,
and in recent versions of the architecture, may be configured to be
unavailable in user-mode. (Aside: unconditional atomic swap is also less
powerful as a synchronization primitive than
load-exclusive/store-conditional.)

\hypertarget{memory-prefetch-intrinsics}{%
\subsection{Memory prefetch
intrinsics}\label{memory-prefetch-intrinsics}}

Intrinsics are provided to prefetch data or instructions. The size of
the data or function is ignored. Note that the intrinsics may be
implemented as no-ops (i.e.~not generate a prefetch instruction, if none
is available). Also, even where the architecture does provide a prefetch
instruction, a particular implementation may implement the instruction
as a no-op (i.e.~the instruction has no effect).

\hypertarget{data-prefetch}{%
\subsubsection{Data prefetch}\label{data-prefetch}}

\begin{verbatim}
void __pld(void const volatile *addr);
\end{verbatim}

Generates a data prefetch instruction, if available. The argument should
be any expression that may designate a data address. The data is
prefetched to the innermost level of cache, for reading. :

\begin{verbatim}
void __pldx(/*constant*/ unsigned int /*access_kind*/,
            /*constant*/ unsigned int /*cache_level*/,
            /*constant*/ unsigned int /*retention_policy*/,
            void const volatile *addr);
\end{verbatim}

Generates a data prefetch instruction. This intrinsic allows the
specification of the expected access kind (read or write), the cache
level to load the data, the data retention policy (temporal or
streaming), The relevant arguments can only be one of the following
values.

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\textbf{Access Kind} & \textbf{Value} & \textbf{Summary}\tabularnewline
PLD & 0 & Fetch the addressed location for reading\tabularnewline
PST & 1 & Fetch the addressed location for writing\tabularnewline
\bottomrule
\end{longtable}

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
Cache Level & Value & Summary\tabularnewline
L1 & 0 & Fetch the addressed location to L1 cache\tabularnewline
L2 & 1 & Fetch the addressed location to L2 cache\tabularnewline
L3 & 2 & Fetch the addressed location to L3 cache\tabularnewline
\bottomrule
\end{longtable}

\begin{longtable}[]{@{}lll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.18\columnwidth}\raggedright
\textbf{Retention Policy}\strut
\end{minipage} & \begin{minipage}[t]{0.08\columnwidth}\raggedright
\textbf{Value}\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
\textbf{Summary}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.18\columnwidth}\raggedright
KEEP\strut
\end{minipage} & \begin{minipage}[t]{0.08\columnwidth}\raggedright
0\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Temporal fetch of the addressed location (i.e.~allocate in cache
normally)\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.18\columnwidth}\raggedright
STRM\strut
\end{minipage} & \begin{minipage}[t]{0.08\columnwidth}\raggedright
1\strut
\end{minipage} & \begin{minipage}[t]{0.66\columnwidth}\raggedright
Streaming fetch of the addressed location (i.e.~memory used only
once)\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{instruction-prefetch}{%
\subsubsection{Instruction prefetch}\label{instruction-prefetch}}

\begin{verbatim}
void __pli(T addr);
\end{verbatim}

Generates a code prefetch instruction, if available. If a specific code
prefetch instruction is not available, this intrinsic may generate a
data-prefetch instruction to fetch the addressed code to the innermost
level of unified cache. It will not fetch code to data-cache in a split
cache level. :

\begin{verbatim}
void __plix(/*constant*/ unsigned int /*cache_level*/,
            /*constant*/ unsigned int /*retention_policy*/,
            T addr);
\end{verbatim}

Generates a code prefetch instruction. This intrinsic allows the
specification of the cache level to load the code, the retention policy
(temporal or streaming). The relevant arguments can have the same values
as in {\_\_pldx.}

{\_\_pldx} and {\_\_plix} arguments cache level and retention policy are
ignored on unsupported targets.

\hypertarget{nop}{%
\subsection{NOP}\label{nop}}

\begin{verbatim}
void __nop(void);
\end{verbatim}

Generates an unspecified no-op instruction. Note that not all
architectures provide a distinguished NOP instruction. On those that do,
it is unspecified whether this intrinsic generates it or another
instruction. It is not guaranteed that inserting this instruction will
increase execution time.

\hypertarget{data-processing-intrinsics}{%
\section{Data-processing intrinsics}\label{data-processing-intrinsics}}

The intrinsics in this section are provided for algorithm optimization.

The {\textless{}arm\_acle.h\textgreater{}} header should be included
before using these intrinsics.

Implementations are not required to introduce precisely the instructions
whose names match the intrinsics. However, implementations should aim to
ensure that a computation expressed compactly with intrinsics will
generate a similarly compact sequence of machine code. In general, C's
as-if rule \protect\hyperlink{C99}{{[}C99{]}} (5.1.2.3) applies, meaning
that the compiled code must behave \emph{as if} the instruction had been
generated.

In general, these intrinsics are aimed at DSP algorithm optimization on
M-profile and R-profile. Use on A-profile is deprecated. However, the
miscellaneous intrinsics and CRC32 intrinsics described in
\protect\hyperlink{ssec-Mdpi}{ssec-Mdpi} and
\protect\hyperlink{ssec-crc32}{ssec-crc32} respectively are suitable for
all profiles.

\hypertarget{programmers-model-of-global-state}{%
\subsection{Programmer's model of global
state}\label{programmers-model-of-global-state}}

\hypertarget{the-q-saturation-flag}{%
\subsubsection{The Q (saturation) flag}\label{the-q-saturation-flag}}

The Q flag is a cumulative (sticky) saturation bit in the APSR
(Application Program Status Register) indicating that an operation
saturated, or in some cases, overflowed. It is set on saturation by most
intrinsics in the DSP and SIMD intrinsic sets, though some SIMD
intrinsics feature saturating operations which do not set the Q flag.

\protect\hyperlink{AAPCS}{{[}AAPCS{]}} (5.1.1) states:

The N, Z, C, V and Q flags (bits 27-31) and the GE{[}3:0{]} bits (bits
16-19) are undefined on entry to or return from a public interface.

Note that this does not state that these bits (in particular the Q flag)
are undefined across any C/C++ function call boundary only across a
public interface. The Q and GE bits could be manipulated in well-defined
ways by local functions, for example when constructing functions to be
used in DSP algorithms.

Implementations must avoid introducing instructions (such as SSAT/USAT,
or SMLABB) which affect the Q flag, if the programmer is testing whether
the Q flag was set by explicit use of intrinsics and if the
implementation's introduction of an instruction may affect the value
seen. The implementation might choose to model the definition and use
(liveness) of the Q flag in the way that it models the liveness of any
visible variable, or it might suppress introduction of Q-affecting
instructions in any routine in which the Q flag is tested.

ACLE does not define how or whether the Q flag is preserved across
function call boundaries. (This is seen as an area for future
specification.)

In general, the Q flag should appear to C/C++ code in a similar way to
the standard floating-point cumulative exception flags, as global (or
thread-local) state that can be tested, set or reset through an API.

The following intrinsics are available when {\_\_ARM\_FEATURE\_QBIT} is
defined:

int {\_\_saturation\_occurred(void);}

Returns 1 if the Q flag is set, 0 if not.

void {\_\_set\_saturation\_occurred(int);}

Sets or resets the Q flag according to the LSB of the value.
{\_\_set\_saturation\_occurred(0)} might be used before performing a
sequence of operations after which the Q flag is tested. (In general,
the Q flag cannot be assumed to be unset at the start of a function.)

void {\_\_ignore\_saturation(void);}

This intrinsic is a hint and may be ignored. It indicates to the
compiler that the value of the Q flag is not live (needed) at or
subsequent to the program point at which the intrinsic occurs. It may
allow the compiler to remove preceding instructions, or to change the
instruction sequence in such a way as to result in a different value of
the Q flag. (A specific example is that it may recognize clipping idioms
in C code and implement them with an instruction such as SSAT that may
set the Q flag.)

\hypertarget{the-ge-flags}{%
\subsubsection{The GE flags}\label{the-ge-flags}}

The GE (Greater than or Equal to) flags are four bits in the APSR. They
are used with the 32-bit SIMD intrinsics described in
\protect\hyperlink{ssec-32SIMD}{ssec-32SIMD}.

There are four GE flags, one for each 8-bit lane of a 32-bit SIMD
operation. Certain non-saturating 32-bit SIMD intrinsics set the GE bits
to indicate overflow of addition or subtraction. For 4x8-bit operations
the GE bits are set one for each byte. For 2x16-bit operations the GE
bits are paired together, one for the high halfword and the other pair
for the low halfword. The only supported way to read or use the GE bits
(in this specification) is by using the {\_\_sel} intrinsic, see
\protect\hyperlink{sec-Parallel-selection}{sec-Parallel-selection}.

\hypertarget{floating-point-environment}{%
\subsubsection{Floating-point
environment}\label{floating-point-environment}}

An implementation should implement the features of
\textless{}fenv.h\textgreater{} for accessing the floating-point runtime
environment. Programmers should use this rather than accessing the VFP
FPSCR directly. For example, on a target supporting VFP the cumulative
exception flags (for example IXC, OFC) can be read from the FPSCR by
using the fetestexcept() function, and the rounding mode (RMode) bits
can be read using the fegetround() function.

ACLE does not support changing the DN, FZ or AHP bits at runtime.

VFP short vector mode (enabled by setting the Stride and Len bits) is
deprecated, and is unavailable on later VFP implementations. ACLE
provides no support for this mode.

\hypertarget{miscellaneous-data-processing-intrinsics}{%
\subsection{Miscellaneous data-processing
intrinsics}\label{miscellaneous-data-processing-intrinsics}}

The following intrinsics perform general data-processing operations.
They have no effect on global state.

{[}Note: documentation of the {\_\_nop} intrinsic has moved to
\protect\hyperlink{ssec-nop}{ssec-nop}{]}

For completeness and to aid portability between LP64 and LLP64 models,
ACLE also defines intrinsics with {l} suffix. :

\begin{verbatim}
uint32_t __ror(uint32_t x, uint32_t y);
unsigned long __rorl(unsigned long x, uint32_t y);
uint64_t __rorll(uint64_t x, uint32_t y);
\end{verbatim}

Rotates the argument {x} right by {y} bits. {y} can take any value.
These intrinsics are available on all targets. :

\begin{verbatim}
unsigned int __clz(uint32_t x);
unsigned int __clzl(unsigned long x);
unsigned int __clzll(uint64_t x);
\end{verbatim}

Returns the number of leading zero bits in {x}. When {x} is zero it
returns the argument width, i.e.~32 or 64. These intrinsics are
available on all targets. On targets without the CLZ instruction it
should be implemented as an instruction sequence or a call to such a
sequence. A suitable sequence can be found in
\protect\hyperlink{Warren}{{[}Warren{]}} (fig.~5-7). Hardware support
for these intrinsics is indicated by {\_\_ARM\_FEATURE\_CLZ}. :

\begin{verbatim}
unsigned int __cls(uint32_t x);
unsigned int __clsl(unsigned long x);
unsigned int __clsll(uint64_t x);
\end{verbatim}

Returns the number of leading sign bits in {x}. When {x} is zero it
returns the argument width - 1, i.e.~31 or 63. These intrinsics are
available on all targets. On targets without the CLZ instruction it
should be implemented as an instruction sequence or a call to such a
sequence. Fast hardware implementation (using a CLS instruction or a
short code sequence involving the CLZ instruction) is indicated by
{\_\_ARM\_FEATURE\_CLZ.} :

\begin{verbatim}
uint32_t __rev(uint32_t);
unsigned long __revl(unsigned long);
uint64_t __revll(uint64_t);
\end{verbatim}

Reverses the byte order within a word or doubleword. These intrinsics
are available on all targets and should be expanded to an efficient
straight-line code sequence on targets without byte reversal
instructions. :

\begin{verbatim}
uint32_t __rev16(uint32_t);
unsigned long __rev16l(unsigned long);
uint64_t __rev16ll(uint64_t);
\end{verbatim}

Reverses the byte order within each halfword of a word. For example,
{0x12345678} becomes {0x34127856}. These intrinsics are available on all
targets and should be expanded to an efficient straight-line code
sequence on targets without byte reversal instructions. :

\begin{verbatim}
int16_t __revsh(int16_t);
\end{verbatim}

Reverses the byte order in a 16-bit value and returns the signed 16-bit
result. For example, {0x0080} becomes {0x8000}. This intrinsic is
available on all targets and should be expanded to an efficient
straight-line code sequence on targets without byte reversal
instructions. :

\begin{verbatim}
uint32_t __rbit(uint32_t x);
unsigned long __rbitl(unsigned long x);
uint64_t __rbitll(uint64_t x);
\end{verbatim}

Reverses the bits in {x}. These intrinsics are only available on targets
with the RBIT instruction.

\hypertarget{examples-1}{%
\subsubsection{Examples}\label{examples-1}}

\begin{verbatim}
#ifdef __ARM_BIG_ENDIAN
#define htonl(x) (uint32_t)(x)
#define htons(x) (uint16_t)(x)
#else /* little-endian */
#define htonl(x) __rev(x)
#define htons(x) (uint16_t)__revsh(x)
#endif /* endianness */
#define ntohl(x) htonl(x)
#define ntohs(x) htons(x)

/* Count leading sign bits */
inline unsigned int count_sign(int32_t x) { return __clz(x ^ (x << 1)); }

/* Count trailing zeroes */
inline unsigned int count_trail(uint32_t x) {
#if (__ARM_ARCH >= 6 && __ARM_ISA_THUMB >= 2) || __ARM_ARCH >= 7
/* RBIT is available */
  return __clz(__rbit(x));
#else
  unsigned int n = __clz(x & -x);   /* get the position of the last bit */
  return n == 32 ? n : (31-n);
#endif
}
\end{verbatim}

\hypertarget{bit-multiplications}{%
\subsection{16-bit multiplications}\label{bit-multiplications}}

The intrinsics in this section provide direct access to the 16x16 and
16x32 bit multiplies introduced in Armv5E. Compilers are also encouraged
to exploit these instructions from C code. These intrinsics are
available when {\_\_ARM\_FEATURE\_DSP} is defined, and are not available
on non-5E targets. These multiplies cannot overflow. :

\begin{verbatim}
int32_t __smulbb(int32_t, int32_t);
\end{verbatim}

Multiplies two 16-bit signed integers, i.e.~the low halfwords of the
operands. :

\begin{verbatim}
int32_t __smulbt(int32_t, int32_t);
\end{verbatim}

Multiplies the low halfword of the first operand and the high halfword
of the second operand. :

\begin{verbatim}
int32_t __smultb(int32_t, int32_t);
\end{verbatim}

Multiplies the high halfword of the first operand and the low halfword
of the second operand. :

\begin{verbatim}
int32_t __smultt(int32_t, int32_t);
\end{verbatim}

Multiplies the high halfwords of the operands. :

\begin{verbatim}
int32_t __smulwb(int32_t, int32_t);
\end{verbatim}

Multiplies the 32-bit signed first operand with the low halfword (as a
16-bit signed integer) of the second operand. Return the top 32 bits of
the 48-bit product. :

\begin{verbatim}
int32_t __smulwt(int32_t, int32_t);
\end{verbatim}

Multiplies the 32-bit signed first operand with the high halfword (as a
16-bit signed integer) of the second operand. Return the top 32 bits of
the 48-bit product.

\hypertarget{saturating-intrinsics}{%
\subsection{Saturating intrinsics}\label{saturating-intrinsics}}

\hypertarget{width-specified-saturation-intrinsics}{%
\subsubsection{Width-specified saturation
intrinsics}\label{width-specified-saturation-intrinsics}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SAT} is defined.
They saturate a 32-bit value at a given bit position. The saturation
width must be an integral constant expression -- see
\protect\hyperlink{sec-Constant-arguments-to-intrinsics}{sec-Constant-arguments-to-intrinsics}.

\begin{verbatim}
int32_t __ssat(int32_t, /*constant*/ unsigned int);
\end{verbatim}

Saturates a signed integer to the given bit width in the range 1 to 32.
For example, the result of saturation to 8-bit width will be in the
range -128 to 127. The Q flag is set if the operation saturates. :

\begin{verbatim}
uint32_t __usat(int32_t, /*constant*/ unsigned int);
\end{verbatim}

Saturates a signed integer to an unsigned (non-negative) integer of a
bit width in the range 0 to 31. For example, the result of saturation to
8-bit width is in the range 0 to 255, with all negative inputs going to
zero. The Q flag is set if the operation saturates.

\hypertarget{saturating-addition-and-subtraction-intrinsics}{%
\subsubsection{Saturating addition and subtraction
intrinsics}\label{saturating-addition-and-subtraction-intrinsics}}

These intrinsics are available when {\_\_ARM\_FEATURE\_DSP} is defined.

The saturating intrinsics operate on 32-bit signed integer data. There
are no special saturated or fixed point types. :

\begin{verbatim}
int32_t __qadd(int32_t, int32_t);
\end{verbatim}

Adds two 32-bit signed integers, with saturation. Sets the Q flag if the
addition saturates. :

\begin{verbatim}
int32_t __qsub(int32_t, int32_t);
\end{verbatim}

Subtracts two 32-bit signed integers, with saturation. Sets the Q flag
if the subtraction saturates. :

\begin{verbatim}
int32_t __qdbl(int32_t);
\end{verbatim}

Doubles a signed 32-bit number, with saturation. {\_\_qdbl(x)} is equal
to {\_\_qadd(x,x)} except that the argument x is evaluated only once.
Sets the Q flag if the addition saturates.

\hypertarget{accumulating-multiplications}{%
\subsubsection{Accumulating
multiplications}\label{accumulating-multiplications}}

These intrinsics are available when {\_\_ARM\_FEATURE\_DSP} is defined.
:

\begin{verbatim}
int32_t __smlabb(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies two 16-bit signed integers, the low halfwords of the first
two operands, and adds to the third operand. Sets the Q flag if the
addition overflows. (Note that the addition is the usual 32-bit modulo
addition which wraps on overflow, not a saturating addition. The
multiplication cannot overflow.):

\begin{verbatim}
int32_t __smlabt(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies the low halfword of the first operand and the high halfword
of the second operand, and adds to the third operand, as for
{\_\_smlabb}. :

\begin{verbatim}
int32_t __smlatb(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies the high halfword of the first operand and the low halfword
of the second operand, and adds to the third operand, as for
{\_\_smlabb}. :

\begin{verbatim}
int32_t __smlatt(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies the high halfwords of the first two operands and adds to the
third operand, as for {\_\_smlabb}. :

\begin{verbatim}
int32_t __smlawb(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies the 32-bit signed first operand with the low halfword (as a
16-bit signed integer) of the second operand. Adds the top 32 bits of
the 48-bit product to the third operand. Sets the Q flag if the addition
overflows. (See note for {\_\_smlabb}). :

\begin{verbatim}
int32_t __smlawt(int32_t, int32_t, int32_t);
\end{verbatim}

Multiplies the 32-bit signed first operand with the high halfword (as a
16-bit signed integer) of the second operand and adds the top 32 bits of
the 48-bit result to the third operand as for {\_\_smlawb}.

\hypertarget{examples-2}{%
\subsubsection{Examples}\label{examples-2}}

The ACLE DSP intrinsics can be used to define ETSI/ITU-T basic
operations \protect\hyperlink{G.191}{{[}G.191{]}}: :

\begin{verbatim}
#include <arm_acle.h>
inline int32_t L_add(int32_t x, int32_t y) { return __qadd(x, y); }
inline int32_t L_negate(int32_t x) { return __qsub(0, x); }
inline int32_t L_mult(int16_t x, int16_t y) { return __qdbl(x*y); }
inline int16_t add(int16_t x, int16_t y) { return (int16_t)(__qadd(x<<16, y<<16) >> 16); }
inline int16_t norm_l(int32_t x) { return __clz(x ^ (x<<1)) & 31; }
...
\end{verbatim}

This example assumes the implementation preserves the Q flag on return
from an inline function.

\hypertarget{bit-simd-intrinsics}{%
\subsection{32-bit SIMD intrinsics}\label{bit-simd-intrinsics}}

\hypertarget{availability}{%
\subsubsection{Availability}\label{availability}}

Armv6 introduced instructions to perform 32-bit SIMD operations (i.e.
two 16-bit operations or four 8-bit operations) on the Arm
general-purpose registers. These instructions are not related to the
much more versatile Advanced SIMD (Neon) extension, whose support is
described in
\protect\hyperlink{sec-NEON-intrinsics}{sec-NEON-intrinsics}.

The 32-bit SIMD intrinsics are available on targets featuring Armv6 and
upwards, including the A and R profiles. In the M profile they are
available in the Armv7E-M architecture. Availability of the 32-bit SIMD
intrinsics implies availability of the saturating intrinsics.

Availability of the SIMD intrinsics is indicated by the
{\_\_ARM\_FEATURE\_SIMD32} predefine.

To access the intrinsics, the {\textless{}arm\_acle.h\textgreater{}}
header should be included.

\hypertarget{data-types-for-32-bit-simd-intrinsics}{%
\subsubsection{Data types for 32-bit SIMD
intrinsics}\label{data-types-for-32-bit-simd-intrinsics}}

The header {\textless{}arm\_acle.h\textgreater{}} should be included
before using these intrinsics.

The SIMD intrinsics generally operate on and return 32-bit words
consisting of two 16-bit or four 8-bit values. These are represented as
{int16x2\_t} and {int8x4\_t} below for illustration. Some intrinsics
also feature scalar accumulator operands and/or results.

When defining the intrinsics, implementations can define SIMD operands
using a 32-bit integral type (such as {unsigned int}).

The header {\textless{}arm\_acle.h\textgreater{}} defines typedefs
{int16x2\_t}, {uint16x2\_t}, {int8x4\_t}, and {uint8x4\_t.} These should
be defined as 32-bit integral types of the appropriate sign. There are
no intrinsics provided to pack or unpack values of these types. This can
be done with shifting and masking operations.

\hypertarget{use-of-the-q-flag-by-32-bit-simd-intrinsics}{%
\subsubsection{Use of the Q flag by 32-bit SIMD
intrinsics}\label{use-of-the-q-flag-by-32-bit-simd-intrinsics}}

Some 32-bit SIMD instructions may set the Q flag described in
\protect\hyperlink{ssec-Qflag2}{ssec-Qflag2}. The behavior of the
intrinsics matches that of the instructions.

Generally, instructions that perform lane-by-lane saturating operations
do not set the Q flag. For example, {\_\_qadd16} does not set the Q
flag, even if saturation occurs in one or more lanes.

The explicit saturation operations {\_\_ssat} and {\_\_usat} set the Q
flag if saturation occurs. Similarly, {\_\_ssat16} and {\_\_usat16} set
the Q flag if saturation occurs in either lane.

Some instructions, such as {\_\_smlad}, set the Q flag if overflow
occurs on an accumulation, even though the accumulation is not a
saturating operation (i.e.~does not clip its result to the limits of the
type).

In the following descriptions of intrinsics, if the description does not
mention whether the intrinsic affects the Q flag, the intrinsic does not
affect it.

\hypertarget{parallel-16-bit-saturation}{%
\subsubsection{Parallel 16-bit
saturation}\label{parallel-16-bit-saturation}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. They saturate two 16-bit values to a given bit width as for the
{\_\_ssat} and {\_\_usat} intrinsics defined in
\protect\hyperlink{ssec-Wsatin}{ssec-wsatin}. :

\begin{verbatim}
int16x2_t __ssat16(int16x2_t, /*constant*/ unsigned int);
\end{verbatim}

Saturates two 16-bit signed values to a width in the range 1 to 16. The
Q flag is set if either operation saturates. :

\begin{verbatim}
int16x2_t __usat16(int16x2_t, /*constant */ unsigned int);
\end{verbatim}

Saturates two 16-bit signed values to a bit width in the range 0 to 15.
The input values are signed and the output values are non-negative, with
all negative inputs going to zero. The Q flag is set if either operation
saturates.

\hypertarget{packing-and-unpacking}{%
\subsubsection{Packing and unpacking}\label{packing-and-unpacking}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. :

\begin{verbatim}
int16x2_t __sxtab16(int16x2_t, int8x4_t);
\end{verbatim}

Two values (at bit positions 0..7 and 16..23) are extracted from the
second operand, sign-extended to 16 bits, and added to the first
operand. :

\begin{verbatim}
int16x2_t __sxtb16(int8x4_t);
\end{verbatim}

Two values (at bit positions 0..7 and 16..23) are extracted from the
first operand, sign-extended to 16 bits, and returned as the result. :

\begin{verbatim}
uint16x2_t __uxtab16(uint16x2_t, uint8x4_t);
\end{verbatim}

Two values (at bit positions 0..7 and 16..23) are extracted from the
second operand, zero-extended to 16 bits, and added to the first
operand. :

\begin{verbatim}
uint16x2_t __uxtb16(uint8x4_t);
\end{verbatim}

Two values (at bit positions 0..7 and 16..23) are extracted from the
first operand, zero-extended to 16 bits, and returned as the result.

\hypertarget{parallel-selection}{%
\subsubsection{Parallel selection}\label{parallel-selection}}

This intrinsic is available when {\_\_ARM\_FEATURE\_SIMD32} is defined.
:

\begin{verbatim}
uint8x4_t __sel(uint8x4_t, uint8x4_t);
\end{verbatim}

Selects each byte of the result from either the first operand or the
second operand, according to the values of the GE bits. For each result
byte, if the corresponding GE bit is set then the byte from the first
operand is used, otherwise the byte from the second operand is used.
Because of the way that {int16x2\_t} operations set two (duplicate) GE
bits per value, the {\_\_sel} intrinsic works equally well on
{(u)int16x2\_t} and {(u)int8x4\_t} data.

\hypertarget{parallel-8-bit-addition-and-subtraction}{%
\subsubsection{Parallel 8-bit addition and
subtraction}\label{parallel-8-bit-addition-and-subtraction}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. Each intrinsic performs 8-bit parallel addition or subtraction.
In some cases the result may be halved or saturated. :

\begin{verbatim}
int8x4_t __qadd8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit addition, saturated to the range {-2**7} to {2**7-1}. :

\begin{verbatim}
int8x4_t __qsub8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit subtraction, with saturation. :

\begin{verbatim}
int8x4_t __sadd8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit signed addition. The GE bits are set according to the results. :

\begin{verbatim}
int8x4_t __shadd8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit signed addition, halving the results. :

\begin{verbatim}
int8x4_t __shsub8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit signed subtraction, halving the results. :

\begin{verbatim}
int8x4_t __ssub8(int8x4_t, int8x4_t);
\end{verbatim}

4x8-bit signed subtraction. The GE bits are set according to the
results. :

\begin{verbatim}
uint8x4_t __uadd8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned addition. The GE bits are set according to the results.
:

\begin{verbatim}
uint8x4_t __uhadd8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned addition, halving the results. :

\begin{verbatim}
uint8x4_t __uhsub8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned subtraction, halving the results. :

\begin{verbatim}
uint8x4_t __uqadd8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned addition, saturating to the range {0} to {2**8-1}. :

\begin{verbatim}
uint8x4_t __uqsub8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned subtraction, saturating to the range {0} to {2**8-1}. :

\begin{verbatim}
uint8x4_t __usub8(uint8x4_t, uint8x4_t);
\end{verbatim}

4x8-bit unsigned subtraction. The GE bits are set according to the
results.

\hypertarget{sum-of-8-bit-absolute-differences}{%
\subsubsection{Sum of 8-bit absolute
differences}\label{sum-of-8-bit-absolute-differences}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. They perform an 8-bit sum-of-absolute differences operation,
typically used in motion estimation. :

\begin{verbatim}
uint32_t __usad8(uint8x4_t, uint8x4_t);
\end{verbatim}

Performs 4x8-bit unsigned subtraction, and adds the absolute values of
the differences together, returning the result as a single unsigned
integer. :

\begin{verbatim}
uint32_t __usada8(uint8x4_t, uint8x4_t, uint32_t);
\end{verbatim}

Performs 4x8-bit unsigned subtraction, adds the absolute values of the
differences together, and adds the result to the third operand.

\hypertarget{parallel-16-bit-addition-and-subtraction}{%
\subsubsection{Parallel 16-bit addition and
subtraction}\label{parallel-16-bit-addition-and-subtraction}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. Each intrinsic performs 16-bit parallel addition and/or
subtraction. In some cases the result may be halved or saturated. :

\begin{verbatim}
int16x2_t __qadd16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit addition, saturated to the range {-2**15} to {2**15-1}. :

\begin{verbatim}
int16x2_t __qasx(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of second operand, adds high halfwords and subtracts
low halfwords, saturating in each case. :

\begin{verbatim}
int16x2_t __qsax(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of second operand, subtracts high halfwords and adds
low halfwords, saturating in each case. :

\begin{verbatim}
int16x2_t __qsub16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit subtraction, with saturation. :

\begin{verbatim}
int16x2_t __sadd16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit signed addition. The GE bits are set according to the results.
:

\begin{verbatim}
int16x2_t __sasx(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, adds high halfwords and
subtracts low halfwords. The GE bits are set according to the results. :

\begin{verbatim}
int16x2_t __shadd16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit signed addition, halving the results. :

\begin{verbatim}
int16x2_t __shasx(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, adds high halfwords and
subtract low halfwords, halving the results. :

\begin{verbatim}
int16x2_t __shsax(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, subtracts high halfwords and
add low halfwords, halving the results. :

\begin{verbatim}
int16x2_t __shsub16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit signed subtraction, halving the results. :

\begin{verbatim}
int16x2_t __ssax(int16x2_t, int16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, subtracts high halfwords and
adds low halfwords. The GE bits are set according to the results. :

\begin{verbatim}
int16x2_t __ssub16(int16x2_t, int16x2_t);
\end{verbatim}

2x16-bit signed subtraction. The GE bits are set according to the
results. :

\begin{verbatim}
uint16x2_t __uadd16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned addition. The GE bits are set according to the
results. :

\begin{verbatim}
uint16x2_t __uasx(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, adds high halfwords and
subtracts low halfwords. The GE bits are set according to the results of
unsigned addition. :

\begin{verbatim}
uint16x2_t __uhadd16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned addition, halving the results. :

\begin{verbatim}
uint16x2_t __uhasx(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, adds high halfwords and
subtracts low halfwords, halving the results. :

\begin{verbatim}
uint16x2_t __uhsax(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, subtracts high halfwords and
adds low halfwords, halving the results. :

\begin{verbatim}
uint16x2_t __uhsub16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned subtraction, halving the results. :

\begin{verbatim}
uint16x2_t __uqadd16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned addition, saturating to the range {0} to {2**16-1}. :

\begin{verbatim}
uint16x2_t __uqasx(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, and performs saturating
unsigned addition on the high halfwords and saturating unsigned
subtraction on the low halfwords. :

\begin{verbatim}
uint16x2_t __uqsax(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges halfwords of the second operand, and performs saturating
unsigned subtraction on the high halfwords and saturating unsigned
addition on the low halfwords. :

\begin{verbatim}
uint16x2_t __uqsub16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned subtraction, saturating to the range {0} to {2**16-1}.
:

\begin{verbatim}
uint16x2_t __usax(uint16x2_t, uint16x2_t);
\end{verbatim}

Exchanges the halfwords of the second operand, subtracts the high
halfwords and adds the low halfwords. Sets the GE bits according to the
results of unsigned addition. :

\begin{verbatim}
uint16x2_t __usub16(uint16x2_t, uint16x2_t);
\end{verbatim}

2x16-bit unsigned subtraction. The GE bits are set according to the
results.

\hypertarget{parallel-16-bit-multiplication}{%
\subsubsection{Parallel 16-bit
multiplication}\label{parallel-16-bit-multiplication}}

These intrinsics are available when {\_\_ARM\_FEATURE\_SIMD32} is
defined. Each intrinsic performs two 16-bit multiplications. :

\begin{verbatim}
int32_t __smlad(int16x2_t, int16x2_t, int32_t);
\end{verbatim}

Performs 2x16-bit multiplication and adds both results to the third
operand. Sets the Q flag if the addition overflows. (Overflow cannot
occur during the multiplications.):

\begin{verbatim}
int32_t __smladx(int16x2_t, int16x2_t, int32_t);
\end{verbatim}

Exchanges the halfwords of the second operand, performs 2x16-bit
multiplication, and adds both results to the third operand. Sets the Q
flag if the addition overflows. (Overflow cannot occur during the
multiplications.):

\begin{verbatim}
int64_t __smlald(int16x2_t, int16x2_t, int64_t);
\end{verbatim}

Performs 2x16-bit multiplication and adds both results to the 64-bit
third operand. Overflow in the addition is not detected. :

\begin{verbatim}
int64_t __smlaldx(int16x2_t, int16x2_t, int64_t);
\end{verbatim}

Exchanges the halfwords of the second operand, performs 2x16-bit
multiplication and adds both results to the 64-bit third operand. ::
Overflow in the addition is not detected. :

\begin{verbatim}
int32_t __smlsd(int16x2_t, int16x2_t, int32_t);
\end{verbatim}

Performs two 16-bit signed multiplications. Takes the difference of the
products, subtracting the high-halfword product from the low-halfword
product, and adds the difference to the third operand. Sets the Q flag
if the addition overflows. (Overflow cannot occur during the
multiplications or the subtraction.) :

\begin{verbatim}
int32_t __smlsdx(int16x2_t, int16x2_t, int32_t);
\end{verbatim}

Performs two 16-bit signed multiplications. The product of the high
halfword of the first operand and the low halfword of the second operand
is subtracted from the product of the low halfword of the first operand
and the high halfword of the second operand, and the difference is added
to the third operand. Sets the Q flag if the addition overflows.
(Overflow cannot occur during the multiplications or the subtraction.) :

\begin{verbatim}
int64_t __smlsld(int16x2_t, int16x2_t, int64_t);
\end{verbatim}

Perform two 16-bit signed multiplications. Take the difference of the
products, subtracting the high-halfword product from the low-halfword
product, and add the difference to the third operand. Overflow in the
64-bit addition is not detected. (Overflow cannot occur during the
multiplications or the subtraction.) :

\begin{verbatim}
int64_t __smlsldx(int16x2_t, int16x2_t, int64_t);
\end{verbatim}

Perform two 16-bit signed multiplications. The product of the high
halfword of the first operand and the low halfword of the second operand
is subtracted from the product of the low halfword of the first operand
and the high halfword of the second operand, and the difference is added
to the third operand. Overflow in the 64-bit addition is not detected.
(Overflow cannot occur during the multiplications or the subtraction.) :

\begin{verbatim}
int32_t __smuad(int16x2_t, int16x2_t);
\end{verbatim}

Perform 2x16-bit signed multiplications, adding the products together.
:: Set the Q flag if the addition overflows. :

\begin{verbatim}
int32_t __smuadx(int16x2_t, int16x2_t);
\end{verbatim}

Exchange the halfwords of the second operand (or equivalently, the first
operand), perform 2x16-bit signed multiplications, and add the products
together. Set the Q flag if the addition overflows. :

\begin{verbatim}
int32_t __smusd(int16x2_t, int16x2_t);
\end{verbatim}

Perform two 16-bit signed multiplications. Take the difference of the
products, subtracting the high-halfword product from the low-halfword
product. :

\begin{verbatim}
int32_t __smusdx(int16x2_t, int16x2_t);
\end{verbatim}

Perform two 16-bit signed multiplications. The product of the high
halfword of the first operand and the low halfword of the second operand
is subtracted from the product of the low halfword of the first operand
and the high halfword of the second operand.

\hypertarget{examples-3}{%
\subsubsection{Examples}\label{examples-3}}

Taking the elementwise maximum of two SIMD values each of which consists
of four 8-bit signed numbers:

\begin{verbatim}
int8x4_t max8x4(int8x4_t x, int8x4_t y) { __ssub8(x, y); return __sel(x, y); }
\end{verbatim}

As described in :ref:sec-Parallel-selection, where SIMD values consist
of two 16-bit unsigned numbers:

\begin{verbatim}
int16x2_t max16x2(int16x2_t x, int16x2_t y) { __usub16(x, y); return __sel(x, y); }
\end{verbatim}

Note that even though the result of the subtraction is not used, the
compiler must still generate the instruction, because of its side-effect
on the GE bits which are tested by the {\_\_sel()} intrinsic.

\hypertarget{floating-point-data-processing-intrinsics}{%
\subsection{Floating-point data-processing
intrinsics}\label{floating-point-data-processing-intrinsics}}

The intrinsics in this section provide direct access to selected
floating-point instructions. They are defined only if the appropriate
precision is available in hardware, as indicated by {\_\_ARM\_FP} (see
\protect\hyperlink{ssec-HWFP}{ssec-HWFP}). :

\begin{verbatim}
double __sqrt(double x);
float __sqrtf(float x);
\end{verbatim}

The {\_\_sqrt} intrinsics compute the square root of their operand. They
have no effect on errno. Negative values produce a default NaN result
and possible floating-point exception as described in {[}ARMARM{]}
(A2.7.7). :

\begin{verbatim}
double __fma(double x, double y, double z);
float __fmaf(float x, float y, float z);
\end{verbatim}

The {\_\_fma} intrinsics compute {(x*y)+z}, without intermediate
rounding. These intrinsics are available only if {\_\_ARM\_FEATURE\_FMA}
is defined. On a Standard C implementation it should not normally be
necessary to use these intrinsics, because the fma functions defined in
{[}C99{]} (7.12.13) should expand directly to the instructions if
available. :

\begin{verbatim}
float __rintnf (float);
double __rintn (double);
\end{verbatim}

The {\_\_rintn} intrinsics perform a floating point round to integral,
to nearest with ties to even. The {\_\_rintn} intrinsic is available
when {\_\_ARM\_FEATURE\_DIRECTED\_ROUNDING} is defined to 1. For other
rounding modes like ` to nearest with ties to away ' it is strongly
recommended that C99 standard functions be used. To achieve a floating
point convert to integer, rounding to ` nearest with ties to even '
operation, use these rounding functions with a type-cast to integral
values. For example: :

\begin{verbatim}
(int) __rintnf (a);
\end{verbatim}

maps to a floating point convert to signed integer, rounding to nearest
with ties to even operation. :

\begin{verbatim}
int32_t __jcvt (double);
\end{verbatim}

Converts a double-precision floating-point number to a 32-bit signed
integer following the Javascript Convert instruction semantics
\protect\hyperlink{ARMARMv83}{{[}ARMARMv83{]}}. The {\_\_jcvt} intrinsic
is available if {\_\_ARM\_FEATURE\_JCVT} is defined.

\begin{verbatim}
float __rint32zf (float);
double __rint32z (double);
float __rint64zf (float);
double __rint64z (double);
float __rint32xf (float);
double __rint32x (double);
float __rint64xf (float);
double __rint64x (double);
\end{verbatim}

These intrinsics round their floating-point argument to a floating-point
value that would be representable in a 32-bit or 64-bit signed integer
type. Out-of-Range values are forced to the Most Negative Integer
representable in the target size, and an Invalid Operation
Floating-Point Exception is generated. The rounding mode can be either
the ambient rounding mode (for example {\_\_rint32xf}) or towards zero
(for example {\_\_rint32zf}).

These instructions are introduced in the Armv8.5-A extensions
\protect\hyperlink{ARMARMv85}{{[}ARMARMv85{]}} and are available only in
the AArch64 execution state. The intrinsics are available when
{\_\_ARM\_FEATURE\_FRINT} is defined.

\hypertarget{random-number-generation-intrinsics}{%
\subsection{Random number generation
intrinsics}\label{random-number-generation-intrinsics}}

The Random number generation intrinsics provide access to the Random
Number instructions introduced in Armv8.5-A. These intrinsics are only
defined for the AArch64 execution state and are available when
{\_\_ARM\_FEATURE\_RNG} is defined. :

\begin{verbatim}
int __rndr (uint64_t *);
\end{verbatim}

Stores a 64-bit random number into the object pointed to by the argument
and returns zero. If the implementation could not generate a random
number within a reasonable period of time the object pointed to by the
input is set to zero and a non-zero value is returned. :

\begin{verbatim}
int __rndrrs (uint64_t *);
\end{verbatim}

Reseeds the random number generator. After that stores a 64-bit random
number into the object pointed to by the argument and returns zero. If
the implementation could not generate a random number within a
reasonable period of time the object pointed to by the input is set to
zero and a non-zero value is returned.

These intrinsics have side-effects on the system beyond their results.
Implementations must preserve them even if the results of the intrinsics
are unused.

To access these intrinsics, {\textless{}arm\_acle.h\textgreater{}}
should be included.

\hypertarget{crc32-intrinsics}{%
\subsection{CRC32 intrinsics}\label{crc32-intrinsics}}

CRC32 intrinsics provide direct access to CRC32 instructions
CRC32\{C\}\{B, H, W, X\} in both Armv8 AArch32 and AArch64 execution
states. These intrinsics are available when {\_\_ARM\_FEATURE\_CRC32} is
defined. :

\begin{verbatim}
uint32_t __crc32b (uint32_t a, uint8_t b);
\end{verbatim}

Performs CRC-32 checksum from bytes. :

\begin{verbatim}
uint32_t __crc32h (uint32_t a, uint16_t b);
\end{verbatim}

Performs CRC-32 checksum from half-words. :

\begin{verbatim}
uint32_t __crc32w (uint32_t a, uint32_t b);
\end{verbatim}

Performs CRC-32 checksum from words. :

\begin{verbatim}
uint32_t __crc32d (uint32_t a, uint64_t b);
\end{verbatim}

Performs CRC-32 checksum from double words. :

\begin{verbatim}
uint32_t __crc32cb (uint32_t a, uint8_t b);
\end{verbatim}

Performs CRC-32C checksum from bytes. :

\begin{verbatim}
uint32_t __crc32ch (uint32_t a, uint16_t b);
\end{verbatim}

Performs CRC-32C checksum from half-words. :

\begin{verbatim}
uint32_t __crc32cw (uint32_t a, uint32_t b);
\end{verbatim}

Performs CRC-32C checksum from words. :

\begin{verbatim}
uint32_t __crc32cd (uint32_t a, uint64_t b);
\end{verbatim}

Performs CRC-32C checksum from double words.

To access these intrinsics, {\textless{}arm\_acle.h\textgreater{}}
should be included.

\hypertarget{loadstore-64-byte-intrinsics}{%
\subsection{Load/store 64 Byte
intrinsics}\label{loadstore-64-byte-intrinsics}}

These intrinsics provide direct access to the Armv8.7-A {LD64B},
{ST64B}, {ST64BV} and {ST64BV0} instructions for atomic 64-byte access
to device memory. These intrinsics are available when
{\_\_ARM\_FEATURE\_LS64} is defined.

The header {\textless{}arm\_acle.h\textgreater{}} defines these
intrinsics, and also the data type {data512\_t} that they use.

The type {data512\_t} is a 64-byte structure type containing a single
member {val} which is an array of 8 {uint64\_t}, as if declared like
this: :

\begin{verbatim}
typedef struct {
    uint64_t val[8];
} data512_t;
\end{verbatim}

The following intrinsics are defined on this data type. In all cases,
the address {addr} must be aligned to a multiple of 64 bytes. :

\begin{verbatim}
data512_t __arm_ld64b(const void *addr);
\end{verbatim}

Loads 64 bytes of data atomically from the address {addr}. The address
must be in a memory region that supports 64-byte load/store operations.
:

\begin{verbatim}
void __arm_st64b(void *addr, data512_t value);
\end{verbatim}

Stores the 64 bytes in {value} atomically to the address {addr}. The
address must be in a memory region that supports 64-byte load/store
operations. :

\begin{verbatim}
uint64_t __arm_st64bv(void *addr, data512_t value);
\end{verbatim}

Attempts to store the 64 bytes in {value} atomically to the address
{addr}. It returns a 64-bit value from the response of the device
written to.

\begin{verbatim}
uint64_t __arm_st64bv0(void *addr, data512_t value);
\end{verbatim}

Performs the same operation as {\_\_arm\_st64bv}, except that the data
stored to memory is modified by replacing the low 32 bits of
{value.val{[}0{]}} with the contents of the {ACCDATA\_EL1} system
register. The returned value is the same as for {\_\_arm\_st64bv}.

\hypertarget{custom-datapath-extension-1}{%
\section{Custom Datapath Extension}\label{custom-datapath-extension-1}}

The specification for CDE is in {BETA} state and may change or be
extended in the future.

The intrinsics in this section provide access to instructions in the
Custom Datapath Extension.

The {\textless{}arm\_cde.h\textgreater{}} header should be included
before using these intrinsics. The header is available when the
{\_\_ARM\_FEATURE\_CDE} feature macro is defined.

The intrinsics are stateless and pure, meaning an implementation is
permitted to discard an invocation of an intrinsic whose result is
unused without considering side-effects.

\hypertarget{cde-intrinsics}{%
\subsection{CDE intrinsics}\label{cde-intrinsics}}

The following intrinsics are available when {\_\_ARM\_FEATURE\_CDE} is
defined. These intrinsics use the {coproc} and {imm} compile-time
constants to generate the corresponding CDE instructions. The {coproc}
argument indicates the CDE coprocessor to use. The range of available
coprocessors is indicated by the bitmap {\_\_ARM\_FEATURE\_CDE\_COPROC},
described in \protect\hyperlink{ssec-CDE}{ssec-CDE}. The {imm} argument
must fit within the immediate range of the corresponding CDE
instruction. Values for these arguments outside these ranges must be
rejected.

\begin{verbatim}
uint32_t __arm_cx1(int coproc, uint32_t imm);
uint32_t __arm_cx1a(int coproc, uint32_t acc, uint32_t imm);
uint32_t __arm_cx2(int coproc, uint32_t n, uint32_t imm);
uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uint32_t imm);
uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32_t imm);
uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uint32_t m, uint32_t imm);

uint64_t __arm_cx1d(int coproc, uint32_t imm);
uint64_t __arm_cx1da(int coproc, uint64_t acc, uint32_t imm);
uint64_t __arm_cx2d(int coproc, uint32_t n, uint32_t imm);
uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, uint32_t imm);
uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint32_t imm);
uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, uint32_t m, uint32_t imm);
\end{verbatim}

The following intrinsics are also available when {\_\_ARM\_FEATURE\_CDE}
is defined, providing access to the CDE instructions that read and write
the floating-point registers:

\begin{verbatim}
uint32_t __arm_vcx1_u32(int coproc, uint32_t imm);
uint32_t __arm_vcx1a_u32(int coproc, uint32_t acc, uint32_t imm);
uint32_t __arm_vcx2_u32(int coproc, uint32_t n, uint32_t imm);
uint32_t __arm_vcx2a_u32(int coproc, uint32_t acc, uint32_t n, uint32_t imm);
uint32_t __arm_vcx3_u32(int coproc, uint32_t n, uint32_t m, uint32_t imm);
uint32_t __arm_vcx3a_u32(int coproc, uint32_t acc, uint32_t n, uint32_t m, uint32_t imm);
\end{verbatim}

In addition, the following intrinsics can be used to generate the
D-register forms of the instructions:

\begin{verbatim}
uint64_t __arm_vcx1d_u64(int coproc, uint32_t imm);
uint64_t __arm_vcx1da_u64(int coproc, uint64_t acc, uint32_t imm);
uint64_t __arm_vcx2d_u64(int coproc, uint64_t m, uint32_t imm);
uint64_t __arm_vcx2da_u64(int coproc, uint64_t acc, uint64_t m, uint32_t imm);
uint64_t __arm_vcx3d_u64(int coproc, uint64_t n, uint64_t m, uint32_t imm);
uint64_t __arm_vcx3da_u64(int coproc, uint64_t acc, uint64_t n, uint64_t m, uint32_t imm);
\end{verbatim}

The above intrinsics use the {uint32\_t} and {uint64\_t} types as
general container types.

The following intrinsics can be used to generate CDE instructions that
use the MVE Q registers.

\begin{verbatim}
uint8x16_t __arm_vcx1q_u8 (int coproc, uint32_t imm);
T __arm_vcx1qa(int coproc, T acc, uint32_t imm);
T __arm_vcx2q(int coproc, T n, uint32_t imm);
uint8x16_t __arm_vcx2q_u8(int coproc, T n, uint32_t imm);
T __arm_vcx2qa(int coproc, T acc, U n, uint32_t imm);
T __arm_vcx3q(int coproc, T n, U m, uint32_t imm);
uint8x16_t __arm_vcx3q_u8(int coproc, T n, U m, uint32_t imm);
T __arm_vcx3qa(int coproc, T acc, U n, V m, uint32_t imm);

T __arm_vcx1q_m(int coproc, T inactive, uint32_t imm, mve_pred16_t p);
T __arm_vcx2q_m(int coproc, T inactive, U n, uint32_t imm, mve_pred16_t p);
T __arm_vcx3q_m(int coproc, T inactive, U n, V m, uint32_t imm, mve_pred16_t p);

T __arm_vcx1qa_m(int coproc, T acc, uint32_t imm, mve_pred16_t p);
T __arm_vcx2qa_m(int coproc, T acc, U n, uint32_t imm, mve_pred16_t p);
T __arm_vcx3qa_m(int coproc, T acc, U n, V m, uint32_t imm, mve_pred16_t p);
\end{verbatim}

These intrinsics are polymorphic in the {T}, {U} and {V} types, which
must be of size 128 bits. The {\_\_arm\_vcx1q\_u8}, {\_\_arm\_vcx2q\_u8}
and {\_\_arm\_vcx3q\_u8} intrinsics return a container vector of 16
bytes that can be reinterpreted to other vector types as needed using
the intrinsics below:

\begin{verbatim}
uint16x8_t __arm_vreinterpretq_u16_u8 (uint8x16_t in);
int16x8_t __arm_vreinterpretq_s16_u8 (uint8x16_t in);
uint32x4_t __arm_vreinterpretq_u32_u8 (uint8x16_t in);
int32x4_t __arm_vreinterpretq_s32_u8 (uint8x16_t in);
uint64x2_t __arm_vreinterpretq_u64_u8 (uint8x16_t in);
int64x2_t __arm_vreinterpretq_s64_u8 (uint8x16_t in);
float16x8_t __arm_vreinterpretq_f16_u8 (uint8x16_t in);
float32x4_t __arm_vreinterpretq_f32_u8 (uint8x16_t in);
float64x2_t __arm_vreinterpretq_f64_u8 (uint8x16_t in);
\end{verbatim}

The parameter {inactive} can be set to an uninitialized (don't care)
value using the MVE {vuninitializedq} family of intrinsics.

\hypertarget{memory-tagging-intrinsics}{%
\section{Memory tagging intrinsics}\label{memory-tagging-intrinsics}}

The intrinsics in this section provide access to the Memory Tagging
Extension (MTE) introduced with the Armv8.5-A
\protect\hyperlink{ARMARMv85}{{[}ARMARMv85{]}} architecture.

The {\textless{}arm\_acle.h\textgreater{}} header should be included
before using these intrinsics.

These intrinsics are expected to be used in system code, including
freestanding environments. As such, implementations must guarantee that
no new linking dependencies to runtime support libraries will occur when
these intrinsics are used.

\hypertarget{memory-tagging}{%
\subsection{Memory tagging}\label{memory-tagging}}

Memory tagging is a lightweight, probabilistic version of a lock and key
system where one of a limited set of lock values can be associated with
the memory locations forming part of an allocation, and the equivalent
key is stored in unused high bits of addresses used as references to
that allocation. On each use of a reference the key is checked to make
sure that it matches with the lock before an access is made.

When allocating memory, programmers must assign a lock to that section
of memory. When freeing an allocation, programmers must change the lock
value so that further referencing using the previous key has a
reasonable probability of failure.

The intrinsics specified below support creation, storage, and retrieval
of the lock values, leaving software to select and set the values on
allocation and deallocation. The intrinsics are expected to help protect
heap allocations.

The lock is referred in the text below as {allocation tag} and the key
as {logical address tag} (or in short {logical tag}).

\hypertarget{terms-and-implementation-details}{%
\subsection{Terms and implementation
details}\label{terms-and-implementation-details}}

The memory system is extended with a new physical address space
containing an allocation tag for each 16-byte granule of memory in the
existing data physical address space. All loads and stores to memory
must pass a valid logical address tag as part of the reference. However,
SP- and PC-relative addresses are not checked. The logical tag is held
in the upper bits of the reference. There are 16 available logical tags
that can be used.

\hypertarget{mte-intrinsics}{%
\subsection{MTE intrinsics}\label{mte-intrinsics}}

These intrinsics are available when {\_\_ARM\_FEATURE\_MEMORY\_TAGGING}
is defined. Type T below can be any type. Where the function return type
is specified as T, the return type is determined from the input argument
which must be also be specified as of type T. If the input argument T
has qualifiers {const} or {volatile}, the return type T will also have
the {const} or {volatile} qualifier. :

\begin{verbatim}
T* __arm_mte_create_random_tag(T* src, uint64_t mask);
\end{verbatim}

This intrinsic returns a pointer containing a randomly created logical
address tag. The first argument is a pointer {src} containing an
address. The second argument is a {mask}, where the lower 16 bits
specify logical tags which must be excluded from consideration. The
intrinsic returns a pointer which is a copy of the input address but
also contains a randomly created logical tag (in the upper bits), that
excludes any logical tags specified by the {mask}. A {mask} of zero
excludes no tags. :

\begin{verbatim}
T* __arm_mte_increment_tag(T* src, unsigned offset);
\end{verbatim}

This intrinsic returns a pointer which is a copy of the input pointer
{src} but with the logical address tag part offset by a specified offset
value. The first argument is a pointer {src} containing an address and a
logical tag. The second argument is an offset which must be a compile
time constant value in the range {[}0,15{]}. The intrinsic adds {offset}
to the logical tag part of {src} returning a pointer with the
incremented logical tag. If adding the offset increments the logical tag
beyond the valid 16 tags, the value is wrapped around. :

\begin{verbatim}
uint64_t __arm_mte_exclude_tag(T* src, uint64_t excluded);
\end{verbatim}

This intrinsic adds a logical tag to the set of excluded logical tags.
The first argument is a pointer {src} containing an address and a
logical tag. The second argument {excluded} is a mask where the lower 16
bits specify logical tags which are in current excluded set. The
intrinsic adds the logical tag of {src} to the set specified by
{excluded} and returns the new excluded tag set. :

\begin{verbatim}
void __arm_mte_set_tag(T* tag_address);
\end{verbatim}

This intrinsic stores an allocation tag, computed from the logical tag,
to the tag memory thereby setting the allocation tag for the 16-byte
granule of memory. The argument is a pointer {tag\_address} containing a
logical tag and an address. The address must be 16-byte aligned. The
type of the pointer is ignored (i.e.~allocation tag is set only for a
single granule even if the pointer points to a type that is greater than
16 bytes). These intrinsics generate an unchecked access to memory. :

\begin{verbatim}
T* __arm_mte_get_tag(T* address);
\end{verbatim}

This intrinsic loads the allocation tag from tag memory and returns the
corresponding logical tag as part of the returned pointer value. The
argument is a pointer {address} containing an address from which
allocation tag memory is read. The pointer {address} need not be 16-byte
aligned as it applies to the 16-byte naturally aligned granule
containing the un-aligned pointer. The return value is a pointer whose
address part comes from {address} and the logical tag value is the value
computed from the allocation tag that was read from tag memory. :

\begin{verbatim}
ptrdiff_t __arm_mte_ptrdiff(T* a, T* b);
\end{verbatim}

The intrinsic calculates the difference between the address parts of the
two pointers, ignoring the tags. The return value is the sign-extended
result of the computation. The tag bits in the input pointers are
ignored for this operation.

\hypertarget{system-register-access}{%
\section{System register access}\label{system-register-access}}

\hypertarget{special-register-intrinsics}{%
\subsection{Special register
intrinsics}\label{special-register-intrinsics}}

Intrinsics are provided to read and write system and coprocessor
registers, collectively referred to as special register. :

\begin{verbatim}
uint32_t __arm_rsr(const char *special_register);
\end{verbatim}

Reads a 32-bit system register. :

\begin{verbatim}
uint64_t __arm_rsr64(const char *special_register);
\end{verbatim}

Reads a 64-bit system register. :

\begin{verbatim}
void* __arm_rsrp(const char *special_register);
\end{verbatim}

Reads a system register containing an address. :

\begin{verbatim}
float __arm_rsrf(const char *special_register);
\end{verbatim}

Reads a 32-bit coprocessor register containing a floating point value. :

\begin{verbatim}
double __arm_rsrf64(const char *special_register);
\end{verbatim}

Reads a 64-bit coprocessor register containing a floating point value. :

\begin{verbatim}
void __arm_wsr(const char *special_register, uint32_t value);
\end{verbatim}

Writes a 32-bit system register. :

\begin{verbatim}
void __arm_wsr64(const char *special_register, uint64_t value);
\end{verbatim}

Writes a 64-bit system register. :

\begin{verbatim}
void __arm_wsrp(const char *special_register, const void *value);
\end{verbatim}

Writes a system register containing an address. :

\begin{verbatim}
void __arm_wsrf(const char *special_register, float value);
\end{verbatim}

Writes a floating point value to a 32-bit coprocessor register. :

\begin{verbatim}
void __arm_wsrf64(const char *special_register, double value);
\end{verbatim}

Writes a floating point value to a 64-bit coprocessor register.

\hypertarget{special-register-designations}{%
\subsection{Special register
designations}\label{special-register-designations}}

The {special\_register} parameter must be a compile time string literal.
This means that the implementation can determine the register being
accessed at compile-time and produce the correct instruction without
having to resort to self-modifying code. All register specifiers are
case-insensitive (so ``apsr'' is equivalent to ``APSR''). The string
literal should have one of the forms described below.

\hypertarget{aarch32-32-bit-coprocessor-register}{%
\subsubsection{AArch32 32-bit coprocessor
register}\label{aarch32-32-bit-coprocessor-register}}

When specifying a 32-bit coprocessor register to {\_\_arm\_rsr},
{\_\_arm\_rsrp}, {\_\_arm\_rsrf}, {\_\_arm\_wsr}, {\_\_arm\_wsrp}, or
`\_\_arm\_wsrf`:

\begin{verbatim}
cp<coprocessor>:<opc1>:c<CRn>:c<CRm>:<opc2>
\end{verbatim}

Or (equivalently):

\begin{verbatim}
p<coprocessor>:<opc1>:c<CRn>:c<CRm>:<opc2>
\end{verbatim}

Where:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\textless{}coprocessor\textgreater{}} is a decimal integer in the
  range {{[}0, 15{]}}
\item
  {\textless{}opc1\textgreater{}}, {\textless{}opc2\textgreater{}} are
  decimal integers in the range {{[}0, 7{]}}
\item
  {\textless{}CRn\textgreater{}}, {\textless{}CRm\textgreater{}} are
  decimal integers in the range {{[}0, 15{]}}.
\end{itemize}
\end{quote}

The values of the register specifiers will be as described in
\protect\hyperlink{ARMARM}{{[}ARMARM{]}} or the Technical Reference
Manual (TRM) for the specific processor.

So to read MIDR:

\begin{verbatim}
unsigned int midr = __arm_rsr("cp15:0:c0:c0:0");
\end{verbatim}

ACLE does not specify predefined strings for the system coprocessor
register names documented in the Arm Architecture Reference Manual (for
example `` MIDR '').

\hypertarget{aarch32-32-bit-system-register}{%
\subsubsection{AArch32 32-bit system
register}\label{aarch32-32-bit-system-register}}

When specifying a 32-bit system register to {\_\_arm\_rsr},
{\_\_arm\_rsrp}, {\_\_arm\_wsr}, or {\_\_arm\_wsrp}, one of:

\begin{quote}
\begin{itemize}
\tightlist
\item
  The values accepted in the {spec\_reg} field of the MRS instruction
  \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (B6.1.5), for example CPSR.
\item
  The values accepted in the {spec\_reg} field of the MSR (immediate)
  instruction \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (B6.1.6).
\item
  The values accepted in the {spec\_reg} field of the VMRS instruction
  \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (B6.1.14), for example FPSID.
\item
  The values accepted in the {spec\_reg} field of the VMSR instruction
  \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (B6.1.15), for example FPSCR.
\item
  The values accepted in the {spec\_reg} field of the MSR and MRS
  instructions with virtualization extensions
  \protect\hyperlink{ARMARM}{{[}ARMARM{]}} (B1.7), for example
  {ELR\_Hyp}.
\item
  The values specified in Special register encodings used in Armv7-M
  system instructions. \protect\hyperlink{ARMv7M}{{[}ARMv7M{]}}
  (B5.1.1), for example PRIMASK.
\end{itemize}
\end{quote}

\hypertarget{aarch32-64-bit-coprocessor-register}{%
\subsubsection{AArch32 64-bit coprocessor
register}\label{aarch32-64-bit-coprocessor-register}}

When specifying a 64-bit coprocessor register to {\_\_arm\_rsr64},
{\_\_arm\_rsrf64}, {\_\_arm\_wsr64}, or `\_\_arm\_wsrf64`:

\begin{verbatim}
cp<coprocessor>:<opc1>:c<CRm>
\end{verbatim}

Or (equivalently):

\begin{verbatim}
p<coprocessor>:<opc1>:c<Rm>
\end{verbatim}

Where:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\textless{}coprocessor\textgreater{}} is a decimal integer in the
  range {{[}0, 15{]}}
\item
  {\textless{}opc1\textgreater{}} is a decimal integer in the range
  {{[}0, 7{]}}
\item
  {\textless{}CRm\textgreater{}} is a decimal integer in the range
  {{[}0, 15{]}}
\end{itemize}
\end{quote}

\hypertarget{aarch64-system-register}{%
\subsubsection{AArch64 system register}\label{aarch64-system-register}}

When specifying a system register to {\_\_arm\_rsr}, {\_\_arm\_rsr64},
{\_\_arm\_rsrp}, {\_\_arm\_wsr}, {\_\_arm\_wsr64} or `\_\_arm\_wsrp`:

\begin{verbatim}
"o0:op1:CRn:CRm:op2"
\end{verbatim}

Where:

\begin{quote}
\begin{itemize}
\tightlist
\item
  {\textless{}o0\textgreater{}} is a decimal integer in the range {{[}0,
  1{]}}
\item
  {\textless{}op1\textgreater{}}, {\textless{}op2\textgreater{}} are
  decimal integers in the range {{[}0, 7{]}}
\item
  {\textless{}CRm\textgreater{}}, {\textless{}CRn\textgreater{}} are
  decimal integers in the range {{[}0, 15{]}}
\end{itemize}
\end{quote}

\hypertarget{aarch64-processor-state-field}{%
\subsubsection{AArch64 processor state
field}\label{aarch64-processor-state-field}}

When specifying a processor state field to {\_\_arm\_rsr},
{\_\_arm\_rsp}, {\_\_arm\_wsr}, or {\_\_arm\_wsrp}, one of the values
accepted in the pstatefield of the MSR (immediate) instruction
\protect\hyperlink{ARMARMv8}{{[}ARMARMv8{]}} (C5.6.130).

\hypertarget{coprocessor-intrinsics-1}{%
\subsection{Coprocessor Intrinsics}\label{coprocessor-intrinsics-1}}

\hypertarget{aarch32-coprocessor-intrinsics}{%
\subsubsection{AArch32 coprocessor
intrinsics}\label{aarch32-coprocessor-intrinsics}}

In the intrinsics below {coproc}, {opc1}, {opc2}, {CRn} and {CRd} are
all compile time integer constants with appropriate values as defined by
the coprocessor for the intended architecture.

The argument order for all intrinsics is the same as the operand order
for the instruction as described in the Arm Architecture Reference
Manual, with the exception of {MRC}/ {MRC2}/ {MRRC}/{MRRC2} which omit
the Arm register arguments and instead returns a value and
{MCRR}/{MCRR2} which accepts a single 64 bit unsigned integer instead of
two 32-bit unsigned integers.

\hypertarget{aarch32-data-processing-coprocessor-intrinsics}{%
\subsubsection{AArch32 Data-processing coprocessor
intrinsics}\label{aarch32-data-processing-coprocessor-intrinsics}}

Intrinsics are provided to create coprocessor data-processing
instructions as follows:

\begin{longtable}[]{@{}ll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.55\columnwidth}\raggedright
\textbf{Intrinsics}\strut
\end{minipage} & \begin{minipage}[t]{0.39\columnwidth}\raggedright
\textbf{Equivalent Instruction}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.55\columnwidth}\raggedright
void \_\_arm\_cdp(coproc, opc1, CRd, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.39\columnwidth}\raggedright
CDP coproc, opc1, CRd, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.55\columnwidth}\raggedright
void \_\_arm\_cdp2(coproc, opc1, CRd, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.39\columnwidth}\raggedright
CDP2 coproc, opc1, CRd, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{aarch32-memory-coprocessor-transfer-intrinsics}{%
\paragraph{AArch32 Memory coprocessor transfer
intrinsics}\label{aarch32-memory-coprocessor-transfer-intrinsics}}

Intrinsics are provided to create coprocessor memory transfer
instructions as follows:

\begin{longtable}[]{@{}ll@{}}
\toprule
\endhead
\textbf{Intrinsics} & \textbf{Equivalent Instruction}\tabularnewline
void \_\_arm\_ldc(coproc, CRd, const void* p) & LDC coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_ldcl(coproc, CRd, const void* p) & LDCL coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_ldc2(coproc, CRd, const void* p) & LDC2 coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_ldc2l(coproc, CRd, const void* p) & LDC2L coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_stc(coproc, CRd, void* p) & STC coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_stcl(coproc, CRd, void* p) & STCL coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_stc2(coproc, CRd, void* p) & STC2 coproc, CRd,
{[}\ldots{}{]}\tabularnewline
void \_\_arm\_stc2l(coproc, CRd, void* p) & STC2L coproc, CRd,
{[}\ldots{}{]}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{aarch32-integer-to-coprocessor-transfer-intrinsics}{%
\subsubsection{AArch32 Integer to coprocessor transfer
intrinsics}\label{aarch32-integer-to-coprocessor-transfer-intrinsics}}

Intrinsics are provided to map to coprocessor to core register transfer
instructions as follows:

\begin{longtable}[]{@{}ll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.60\columnwidth}\raggedright
\textbf{Intrinsics}\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
\textbf{Equivalent Instruction}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
void \_\_arm\_mcr(coproc, opc1, uint32\_t value, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MCR coproc, opc1, Rt, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
void \_\_arm\_mcr2(coproc, opc1, uint32\_t value, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MCR2 coproc, opc1, Rt, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
uint32\_t \_\_arm\_mrc(coproc, opc1, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MRC coproc, opc1, Rt, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
uint32\_t \_\_arm\_mrc2(coproc, opc1, CRn, CRm, opc2)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MRC2 coproc, opc1, Rt, CRn, CRm, opc2\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
void \_\_arm\_mcrr(coproc, opc1, uint64\_t value, CRm)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MCRR coproc, opc1, Rt, Rt2, CRm\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
void \_\_arm\_mcrr2(coproc, opc1, uint64\_t value, CRm)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MCRR2 coproc, opc1, Rt, Rt2, CRm\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
uint64\_t \_\_arm\_mrrc(coproc, opc1, CRm)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MRRC coproc, opc1, Rt, Rt2, CRm\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.60\columnwidth}\raggedright
uint64\_t \_\_arm\_mrrc2(coproc, opc1, CRm)\strut
\end{minipage} & \begin{minipage}[t]{0.34\columnwidth}\raggedright
MRRC2 coproc, opc1, Rt, Rt2, CRm\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

The intrinsics {\_\_arm\_mcrr}/{\_\_arm\_mcrr2} accept a single unsigned
64-bit integer value instead of two 32-bit integers. The low half of the
value goes in register {Rt} and the high half goes in {Rt2}. Likewise
for {\_\_arm\_mrrc}/{\_\_arm\_mrrc2} which return an unsigned 64-bit
integer.

\hypertarget{unspecified-behavior}{%
\subsection{Unspecified behavior}\label{unspecified-behavior}}

ACLE does not specify how the implementation should behave in the
following cases:

\begin{quote}
\begin{itemize}
\tightlist
\item
  When merging multiple reads/writes of the same register.
\item
  When writing to a read-only register, or a register that is undefined
  on the architecture being compiled for.
\item
  When reading or writing to a register which the implementation models
  by some other means (this covers -- but is not limited to --
  reading/writing cp10 and cp11 registers when VFP is enabled, and
  reading/writing the CPSR).
\item
  When reading or writing a register using one of these intrinsics with
  an inappropriate type for the value being read or written to.
\item
  When writing to a coprocessor register that carries out a ``System
  operation''.
\item
  When using a register specifier which doesn't apply to the targetted
  architecture.
\end{itemize}
\end{quote}

\hypertarget{instruction-generation}{%
\section{Instruction generation}\label{instruction-generation}}

\hypertarget{instruction-generation-arranged-by-instruction}{%
\subsection{Instruction generation, arranged by
instruction}\label{instruction-generation-arranged-by-instruction}}

The following table indicates how instructions may be generated by
intrinsics, and/or C code. The table includes integer data processing
and certain system instructions.

Compilers are encouraged to use opportunities to combine instructions,
or to use shifted/rotated operands where available. In general,
intrinsics are not provided for accumulating variants of instructions in
cases where the accumulation is a simple addition (or subtraction)
following the instruction.

The table indicates which architectures the instruction is supported on,
as follows:

Architecture 8 means Armv8-A AArch32 and AArch64, 8-32 means
Armv8-AArch32 only. 8-64 means Armv8-AArch64 only.

Architecture 7 means Armv7-A and Armv7-R.

In the sequence of Arm architectures \{ 5, 5TE, 6, 6T2, 7 \} each
architecture includes its predecessor instruction set.

In the sequence of Thumb-only architectures \{ 6-M, 7-M, 7E-M \} each
architecture includes its predecessor instruction set.

7MP are the Armv7 architectures that implement the Multiprocessing
Extensions.

\begin{longtable}[]{@{}llll@{}}
\toprule
\endhead
\textbf{Instruction} & \textbf{Flags} & \textbf{Arch.} &
\textbf{Intrinsic or C code}\tabularnewline
BKPT & & 5 & none\tabularnewline
BFC & & 6T2, 7-M & C\tabularnewline
BFI & & 6T2, 7-M & C\tabularnewline
CLZ & & 5 & {\_\_clz,} {\_\_builtin\_clz}\tabularnewline
DBG & & 7, 7-M & {\_\_dbg}\tabularnewline
DMB & & 8,7, 6-M & {\_\_dmb}\tabularnewline
DSB & & 8, 7, 6-M & {\_\_dsb}\tabularnewline
FRINT32Z & & 8-64 & {\_\_rint32zf,} {\_\_rint32z}\tabularnewline
FRINT64Z & & 8-64 & {\_\_rint64zf,} {\_\_rint64z}\tabularnewline
FRINT32X & & 8-64 & {\_\_rint32xf,} {\_\_rint32x}\tabularnewline
FRINT64X & & 8-64 & {\_\_rint64xf,} {\_\_rint64x}\tabularnewline
ISB & & 8, 7, 6-M & {\_\_isb}\tabularnewline
LDREX & & 6, 7-M & {\_\_sync\_xxx}\tabularnewline
LDRT & & all & none\tabularnewline
MCR/MRC & & all & see
\protect\hyperlink{ssec-sysreg}{ssec-sysreg}\tabularnewline
MSR/MRS & & 6-M & see
\protect\hyperlink{ssec-sysreg}{ssec-sysreg}\tabularnewline
PKHBT & & 6 & C\tabularnewline
PKHTB & & 6 & C\tabularnewline
PLD & & 8-32,5TE, 7-M & {\_\_pld}\tabularnewline
PLDW & & 7-MP & {\_\_pldx}\tabularnewline
PLI & & 8-32,7 & {\_\_pli}\tabularnewline
QADD & Q & 5E, 7E-M & {\_\_qadd}\tabularnewline
QADD16 & & 6, 7E-M & {\_\_qadd16}\tabularnewline
QADD8 & & 6, 7E-M & {\_\_qadd8}\tabularnewline
QASX & & 6, 7E-M & {\_\_qasx}\tabularnewline
QDADD & Q & 5E, 7E-M & {\_\_qadd(\_\_qdbl)}\tabularnewline
QDSUB & Q & 5E, 7E-M & {\_\_qsub(\_\_qdbl)}\tabularnewline
QSAX & & 6, 7E-M & {\_\_qsax}\tabularnewline
QSUB & Q & 5E, 7E-M & {\_\_qsub}\tabularnewline
QSUB16 & & 6, 7E-M & {\_\_qsub16}\tabularnewline
QSUB8 & & 6, 7E-M & {\_\_qsub8}\tabularnewline
RBIT & & 8,6T2, 7-M & {\_\_rbit}, {\_\_builtin\_rbit}\tabularnewline
REV & & 8,6, 6-M & {\_\_rev}, {\_\_builtin\_bswap32}\tabularnewline
REV16 & & 8,6, 6-M & {\_\_rev16}\tabularnewline
REVSH & & 6, 6-M & {\_\_revsh}\tabularnewline
ROR & & all & {\_\_ror}\tabularnewline
SADD16 & GE & 6, 7E-M & {\_\_sadd16}\tabularnewline
SADD8 & GE & 6, 7E-M & {\_\_sadd8}\tabularnewline
SASX & GE & 6, 7E-M & {\_\_sasx}\tabularnewline
SBFX & & 8,6T2, 7-M & C\tabularnewline
SDIV & & 7-M+ & C\tabularnewline
SEL & (GE) & 6, 7E-M & {\_\_sel}\tabularnewline
SETEND & & 6 & n/a\tabularnewline
SEV & & 8,6K,6-M,7-M & {\_\_sev}\tabularnewline
SHADD16 & & 6, 7E-M & {\_\_shadd16}\tabularnewline
SHADD8 & & 6, 7E-M & {\_\_shadd8}\tabularnewline
SHASX & & 6, 7E-M & {\_\_shasx}\tabularnewline
SHSAX & & 6, 7E-M & {\_\_shsax}\tabularnewline
SHSUB16 & & 6, 7E-M & {\_\_shsub16}\tabularnewline
SHSUB8 & & 6, 7E-M & {\_\_shsub8}\tabularnewline
SMC & & 8,6Z, T2 & none\tabularnewline
SMI & & 6Z, T2 & none\tabularnewline
SMLABB & Q & 5E, 7E-M & {\_\_smlabb}\tabularnewline
SMLABT & Q & 5E, 7E-M & {\_\_smlabt}\tabularnewline
SMLAD & Q & 6, 7E-M & {\_\_smlad}\tabularnewline
SMLADX & Q & 6, 7E-M & {\_\_smladx}\tabularnewline
SMLAL & & all, 7-M & C\tabularnewline
SMLALBB & & 5E, 7E-M & {\_\_smulbb} and C\tabularnewline
SMLALBT & & 5E, 7E-M & {\_\_smulbt} and C\tabularnewline
SMLALTB & & 5E, 7E-M & {\_\_smultb} and C\tabularnewline
SMLALTT & & 5E, 7E-M & {\_\_smultt} and C\tabularnewline
SMLALD & & 6, 7E-M & {\_\_smlald}\tabularnewline
SMLALDX & & 6, 7E-M & {\_\_smlaldx}\tabularnewline
SMLATB & Q & 5E, 7E-M & {\_\_smlatb}\tabularnewline
SMLATT & Q & 5E, 7E-M & {\_\_smlatt}\tabularnewline
SMLAWB & Q & 5E, 7E-M & {\_\_smlawb}\tabularnewline
SMLAWT & Q & 5E, 7E-M & {\_\_smlawt}\tabularnewline
SMLSD & Q & 6, 7E-M & {\_\_smlsd}\tabularnewline
SMLSDX & Q & 6, 7E-M & {\_\_smlsdx}\tabularnewline
SMLSLD & & 6, 7E-M & {\_\_smlsld}\tabularnewline
SMLSLDX & & 6, 7E-M & {\_\_smlsldx}\tabularnewline
SMMLA & & 6, 7E-M & C\tabularnewline
SMMLAR & & 6, 7E-M & C\tabularnewline
SMMLS & & 6, 7E-M & C\tabularnewline
SMMLSR & & 6, 7E-M & C\tabularnewline
SMMUL & & 6, 7E-M & C\tabularnewline
SMMULR & & 6, 7E-M & C\tabularnewline
SMUAD & Q & 6, 7E-M & {\_\_smuad}\tabularnewline
SMUADX & Q & 6, 7E-M & {\_\_smuadx}\tabularnewline
SMULBB & & 5E, 7E-M & {\_\_smulbb;} C\tabularnewline
SMULBT & & 5E, 7E-M & {\_\_smulbt} ; C\tabularnewline
SMULTB & & 5E, 7E-M & {\_\_smultb;} C\tabularnewline
SMULTT & & 5E, 7E-M & {\_\_smultt;} C\tabularnewline
SMULL & & all, 7-M & C\tabularnewline
SMULWB & & 5E, 7E-M & {\_\_smulwb;} C\tabularnewline
SMULWT & & 5E, 7E-M & {\_\_smulwt;} C\tabularnewline
SMUSD & & 6, 7E-M & {\_\_smusd}\tabularnewline
SMUSDX & & 6, 7E-M & {\_\_smusd}\tabularnewline
SSAT & Q & 6, 7-M & {\_\_ssat}\tabularnewline
SSAT16 & Q & 6, 7E-M & {\_\_ssat16}\tabularnewline
SSAX & GE & 6, 7E-M & {\_\_ssax}\tabularnewline
SSUB16 & GE & 6, 7E-M & {\_\_ssub16}\tabularnewline
SSUB8 & GE & 6, 7E-M & {\_\_ssub8}\tabularnewline
STREX & & 6, 7-M & {\_\_sync\_xxx}\tabularnewline
STRT & & all & none\tabularnewline
SVC & & all & none\tabularnewline
SWP & & A32 only & {\_\_swp} {[}deprecated; see
\protect\hyperlink{ssec-swap}{ssec-swap}{]}\tabularnewline
SXTAB & & 6, 7E-M & {(int8\_t)x} + a\tabularnewline
SXTAB16 & & 6, 7E-M & {\_\_sxtab16}\tabularnewline
SXTAH & & 6, 7E-M & {(int16\_t)x} + a\tabularnewline
SXTB & & 8,6, 6-M & {(int8\_t)x}\tabularnewline
SXTB16 & & 6, 7E-M & {\_\_sxtb16}\tabularnewline
SXTH & & 8,6, 6-M & {(int16\_t)x}\tabularnewline
UADD16 & GE & 6, 7E-M & {\_\_uadd16}\tabularnewline
UADD8 & GE & 6, 7E-M & {\_\_uadd8}\tabularnewline
UASX & GE & 6, 7E-M & {\_\_uasx}\tabularnewline
UBFX & & 8,6T2, 7-M & C\tabularnewline
UDIV & & 7-M+ & C\tabularnewline
UHADD16 & & 6, 7E-M & {\_\_uhadd16}\tabularnewline
UHADD8 & & 6, 7E-M & {\_\_uhadd8}\tabularnewline
UHASX & & 6, 7E-M & {\_\_uhasx}\tabularnewline
UHSAX & & 6, 7E-M & {\_\_uhsax}\tabularnewline
UHSUB16 & & 6, 7E-M & {\_\_uhsub16}\tabularnewline
UHSUB8 & & 6, 7E-M & {\_\_uhsub8}\tabularnewline
UMAAL & & 6, 7E-M & C\tabularnewline
UMLAL & & all, 7-M & {acc += (uint64\_t)x * y}\tabularnewline
UMULL & & all, 7-M & C\tabularnewline
UQADD16 & & 6, 7E-M & {\_\_uqadd16}\tabularnewline
UQADD8 & & 6, 7E-M & {\_\_uqadd8}\tabularnewline
UQASX & & 6, 7E-M & {\_\_uqasx}\tabularnewline
UQSAX & & 6, 7E-M & {\_\_uqsax}\tabularnewline
UQSUB16 & & 6, 7E-M & {\_\_uqsub16}\tabularnewline
UQSUB8 & & 6, 7E-M & {\_\_uqsub8}\tabularnewline
USAD8 & & 6, 7E-M & {\_\_usad8}\tabularnewline
USADA8 & & 6, 7E-M & {\_\_usad8 + acc}\tabularnewline
USAT & Q & 6, 7-M & {\_\_usat}\tabularnewline
USAT16 & Q & 6, 7E-M & {\_\_usat16}\tabularnewline
USAX & & 6, 7E-M & {\_\_usax}\tabularnewline
USUB16 & & 6, 7E-M & {\_\_usub16}\tabularnewline
USUB8 & & 6, 7E-M & {\_\_usub8}\tabularnewline
UXTAB & & 6, 7E-M & {(uint8\_t)x + i}\tabularnewline
UXTAB16 & & 6, 7E-M & {\_\_uxtab16}\tabularnewline
UXTAH & & 6, 7E-M & {(uint16\_t)x + i}\tabularnewline
UXTB16 & & 6, 7E-M & {\_\_uxtb16}\tabularnewline
UXTH & & 8,6, 6-M & {(uint16\_t)x}\tabularnewline
VFMA & & VFPv4 & {fma}, {\_\_fma}\tabularnewline
VSQRT & & VFP & {sqrt}, {\_\_sqrt}\tabularnewline
WFE & & 8,6K, 6-M & {\_\_wfe}\tabularnewline
WFI & & 8,6K, 6-M & {\_\_wfi}\tabularnewline
YIELD & & 8,6K, 6-M & {\_\_yield}\tabularnewline
\bottomrule
\end{longtable}

\hypertarget{advanced-simd-neon-intrinsics}{%
\section{Advanced SIMD (Neon)
intrinsics}\label{advanced-simd-neon-intrinsics}}

\hypertarget{introduction-4}{%
\subsection{Introduction}\label{introduction-4}}

The Advanced SIMD instructions provide packed Single Instruction
Multiple Data (SIMD) and single-element scalar operations on a range of
integer and floating-point types.

Neon is an implementation of the Advanced SIMD instructions which is
provided as an extension for some Cortex-A Series processors. Where this
document refers to Neon instructions, such instructions refer to the
Advanced SIMD instructions as described by the Arm Architecture
Reference Manual \protect\hyperlink{ARMARMv8}{{[}ARMARMv8{]}}.

The Advanced SIMD extension provides for arithmetic, logical and
saturated arithmetic operations on 8-bit, 16-bit and 32-bit integers
(and sometimes on 64-bit integers) and on 32-bit and 64-bit
floating-point data, arranged in 64-bit and 128-bit vectors.

The intrinsics in this section provide C and C++ programmers with a
simple programming model allowing easy access to code-generation of the
Advanced SIMD instructions for both AArch64 and AArch32 execution
states.

\hypertarget{concepts}{%
\subsubsection{Concepts}\label{concepts}}

The Advanced SIMD instructions are designed to improve the performance
of multimedia and signal processing algorithms by operating on 64-bit or
128-bit \emph{vectors} of \emph{elements} of the same \emph{scalar} data
type.

For example, {uint16x4\_t} is a 64-bit vector type consisting of four
elements of the scalar {uint16\_t} data type. Likewise, {uint16x8\_t} is
a 128-bit vector type consisting of eight {uint16\_t} elements.

In a vector programming model, operations are performed in parallel
across the elements of the vector. For example, {vmul\_u16(a, b)} is a
vector intrinsic which takes two {uint16x4\_t} vector arguments {a} and
{b}, and returns the result of multiplying corresponding elements from
each vector together.

The Advanced SIMD extension also provides support for
\emph{vector-by-lane} and \emph{vector-by-scalar} operations. In these
operations, a scalar value is extracted from one element of a vector
input, or provided directly, duplicated to create a new vector with the
same number of elements as an input vector, and an operation is
performed in parallel between this new vector and other input vectors.

For example, {vmul\_lane\_u16(a, b, 1)}, is a vector-by-lane intrinsic
which takes two {uint16x4\_t} vector elements. From {b}, element {1} is
extracted, a new vector is formed which consists of four copies of {b},
and this new vector is multiplied by {a}.

\emph{Reduction}, \emph{cross-lane}, and \emph{pairwise} vector
operations work on pairs of elements within a vector, or across the
whole of a single vector performing the same operation between elements
of that vector. For example, {vaddv\_u16(a)} is a reduction intrinsic
which takes a {uint16x4\_t} vector, adds each of the four {uint16\_t}
elements together, and returns a {uint16\_t} result containing the sum.

\hypertarget{vector-data-types}{%
\subsubsection{Vector data types}\label{vector-data-types}}

Vector data types are named as a lane type and a multiple. Lane type
names are based on the types defined in
{\textless{}stdint.h\textgreater{}}. For example,. {int16x4\_t} is a
vector of four {int16\_t} values. The base types are {int8\_t},
{uint8\_t}, {int16\_t}, {uint16\_t}, {int32\_t}, {uint32\_t},
{int64\_t}, {uint64\_t}, {float16\_t}, {float32\_t}, {poly8\_t},
{poly16\_t}, {poly64\_t}, {poly128\_t} and {bfloat16\_t}. The multiples
are such that the resulting vector types are 64-bit and 128-bit. In
AArch64, {float64\_t} is also a base type.

Not all types can be used in all operations. Generally, the operations
available on a type correspond to the operations available on the
corresponding scalar type.

ACLE does not define whether {int64x1\_t} is the same type as
{int64\_t}, or whether {uint64x1\_t} is the same type as {uint64\_t}, or
whether {poly64x1\_t} is the same as {poly64\_t} for example for C++
overloading purposes.

float16 types are only available when the {\_\_fp16} type is defined,
i.e.~when supported by the hardware.

bfloat types are only available when the {\_\_bf16} type is defined,
i.e.~when supported by the hardware. The bfloat types are all opaque
types. That is to say they can only be used by intrinsics.

\hypertarget{advanced-simd-scalar-data-types}{%
\subsubsection{Advanced SIMD Scalar data
types}\label{advanced-simd-scalar-data-types}}

AArch64 supports Advanced SIMD scalar operations that work on standard
scalar data types viz.~{int8\_t}, {uint8\_t}, {int16\_t}, {uint16\_t},
{int32\_t}, {uint32\_t}, {int64\_t}, {uint64\_t}, {float32\_t},
{float64\_t.}

\hypertarget{vector-array-data-types}{%
\subsubsection{Vector array data types}\label{vector-array-data-types}}

Array types are defined for multiples of 2, 3 or 4 of all the vector
types, for use in load and store operations, in table-lookup operations,
and as the result type of operations that return a pair of vectors. For
a vector type {\textless{}type\textgreater{}\_t} the corresponding array
type is
{\textless{}type\textgreater{}x\textless{}length\textgreater{}\_t}.
Concretely, an array type is a structure containing a single array
element called val.

For example an array of two {int16x4\_t} types is {int16x4x2\_t}, and is
represented as:

\begin{verbatim}
struct int16x4x2_t { int16x4_t val[2]; };
\end{verbatim}

Note that this array of two 64-bit vector types is distinct from the
128-bit vector type {int16x8\_t}.

\hypertarget{scalar-data-types}{%
\subsubsection{Scalar data types}\label{scalar-data-types}}

For consistency, {\textless{}arm\_neon.h\textgreater{}} defines some
additional scalar data types to match the vector types.

{float32\_t} is defined as an alias for {float}.

If the {\_\_fp16} type is defined, {float16\_t} is defined as an alias
for it.

If the {\_\_bf16} type is defined, {bfloat16\_t} is defined as an alias
for it.

{poly8\_t}, {poly16\_t}, {poly64\_t} and {poly128\_t} are defined as
unsigned integer types. It is unspecified whether these are the same
type as {uint8\_t}, {uint16\_t}, {uint64\_t} and {uint128\_t} for
overloading and mangling purposes.

{float64\_t} is defined as an alias for {double}.

\hypertarget{bit-floating-point-arithmetic-scalar-intrinsics}{%
\subsubsection{16-bit floating-point arithmetic scalar
intrinsics}\label{bit-floating-point-arithmetic-scalar-intrinsics}}

The architecture extensions introduced by Armv8.2-A
\protect\hyperlink{ARMARMv82}{{[}ARMARMv82{]}} provide a set of data
processing instructions which operate on 16-bit floating-point
quantities. These instructions are available in both AArch64 and AArch32
execution states, for both Advanced SIMD and scalar floating-point
values.

ACLE defines two sets of intrinsics which correspond to these data
processing instructions; a set of scalar intrinsics, and a set of vector
intrinsics.

The intrinsics introduced in this section use the data types defined by
ACLE. In particular, scalar intrinsics use the {float16\_t} type defined
by ACLE as an alias for the {\_\_fp16} type, and vector intrinsics use
the {float16x4\_t} and {float16x8\_t} vector types.

Where the scalar 16-bit floating point intrinsics are available, an
implementation is required to ensure that including
{\textless{}arm\_neon.h\textgreater{}} has the effect of also including
{\textless{}arm\_fp16.h\textgreater{}}.

To only enable support for the scalar 16-bit floating-point intrinsics,
the header {\textless{}arm\_fp16.h\textgreater{}} may be included
directly.

\hypertarget{bit-brain-floating-point-arithmetic-scalar-intrinsics}{%
\subsubsection{16-bit brain floating-point arithmetic scalar
intrinsics}\label{bit-brain-floating-point-arithmetic-scalar-intrinsics}}

The architecture extensions introduced by Armv8.6-A
\protect\hyperlink{Bfloat16}{{[}Bfloat16{]}} provide a set of data
processing instructions which operate on brain 16-bit floating-point
quantities. These instructions are available in both AArch64 and AArch32
execution states, for both Advanced SIMD and scalar floating-point
values.

The brain 16-bit floating-point format (bfloat) differs from the older
16-bit floating-point format (float16) in that the former has an 8-bit
exponent similar to a single-precision floating-point format but has a
7-bit fraction.

ACLE defines two sets of intrinsics which correspond to these data
processing instructions; a set of scalar intrinsics, and a set of vector
intrinsics.

The intrinsics introduced in this section use the data types defined by
ACLE. In particular, scalar intrinsics use the {bfloat16\_t} type
defined by ACLE as an alias for the {\_\_bf16} type, and vector
intrinsics use the {bfloat16x4\_t} and {bfloat16x8\_t} vector types.

Where the 16-bit brain floating point intrinsics are available, an
implementation is required to ensure that including
{\textless{}arm\_neon.h\textgreater{}} has the effect of also including
{\textless{}arm\_bf16.h\textgreater{}}.

To only enable support for the 16-bit brain floating-point intrinsics,
the header {\textless{}arm\_bf16.h\textgreater{}} may be included
directly.

When {\_\_ARM\_BF16\_FORMAT\_ALTERNATIVE} is defined to {1} then these
types are storage only and cannot be used with anything other than ACLE
intrinsics. The underlying type for them is {uint16\_t}.

\hypertarget{operations-on-data-types}{%
\subsubsection{Operations on data
types}\label{operations-on-data-types}}

ACLE does not define implicit conversion between different data types.
E.g. :

\begin{verbatim}
int32x4_t x;
uint32x4_t y = x; // No representation change
float32x4_t z = x; // Conversion of integer to floating type
\end{verbatim}

Is not portable. Use the {vreinterpret} intrinsics to convert from one
vector type to another without changing representation, and use the
{vcvt} intrinsics to convert between integer and floating types; for
example:

\begin{verbatim}
int32x4_t x;
uint32x4_t y = vreinterpretq_u32_s32(x);
float32x4_t z = vcvt_f32_s32(x);
\end{verbatim}

ACLE does not define static construction of vector types. E.g. :

\begin{verbatim}
int32x4_t x = { 1, 2, 3, 4 };
\end{verbatim}

Is not portable. Use the {vcreate} or {vdup} intrinsics to construct
values from scalars.

In C++, ACLE does not define whether Advanced SIMD data types are POD
types or whether they can be inherited from.

\hypertarget{compatibility-with-other-vector-programming-models}{%
\subsubsection{Compatibility with other vector programming
models}\label{compatibility-with-other-vector-programming-models}}

ACLE does not specify how the Advanced SIMD Intrinsics interoperate with
alternative vector programming models. Consequently, programmers should
take particular care when combining the Advanced SIMD Intrinsics
programming model with such programming models.

For example, the GCC vector extensions permit initialising a variable
using array syntax, as so :

\begin{verbatim}
#include "arm_neon.h"
...
uint32x2_t x = {0, 1}; // GCC extension.
uint32_t y = vget_lane_s32 (x, 0); // ACLE Neon Intrinsic.
\end{verbatim}

But the definition of the GCC vector extensions is such that the value
stored in y will depend on both the target architecture (AArch32 or
AArch64) and whether the program is running in big- or little-endian
mode.

It is recommended that Advanced SIMD Intrinsics be used consistently:

\begin{verbatim}
#include "arm_neon.h"
...
const int temp[2] = {0, 1};
uint32x2_t x = vld1_s32 (temp);
uint32_t y = vget_lane_s32 (x, 0);
\end{verbatim}

\hypertarget{availability-of-advanced-simd-intrinsics-and-extensions}{%
\subsection{Availability of Advanced SIMD intrinsics and
Extensions}\label{availability-of-advanced-simd-intrinsics-and-extensions}}

\hypertarget{availability-of-advanced-simd-intrinsics}{%
\subsubsection{Availability of Advanced SIMD
intrinsics}\label{availability-of-advanced-simd-intrinsics}}

Advanced SIMD support is available if the {\_\_ARM\_NEON} macro is
predefined (see \protect\hyperlink{ssec-NEON}{ssec-NEON}). In order to
access the Advanced SIMD intrinsics, it is necessary to include the
{\textless{}arm\_neon.h\textgreater{}} header. :

\begin{verbatim}
#if __ARM_NEON
#include <arm_neon.h>
  /* Advanced SIMD intrinsics are now available to use.  */
#endif
\end{verbatim}

Some intrinsics are only available when compiling for the AArch64
execution state. This can be determined using the
{\_\_ARM\_64BIT\_STATE} predefined macro (see
\protect\hyperlink{ssec-ATisa}{ssec-ATisa}).

\hypertarget{availability-of-16-bit-floating-point-vector-interchange-types}{%
\subsubsection{Availability of 16-bit floating-point vector interchange
types}\label{availability-of-16-bit-floating-point-vector-interchange-types}}

When the 16-bit floating-point data type {\_\_fp16} is available as an
interchange type for scalar values, it is also available in the vector
interchange types {float16x4\_t} and {float16x8\_t}. When the vector
interchange types are available, conversion intrinsics between vector of
{\_\_fp16} and vector of {float} types are provided.

This is indicated by the setting of bit 1 in {\_\_ARM\_NEON\_FP} (see
\protect\hyperlink{ssec-NEONfp}{ssec-NEONfp}). :

\begin{verbatim}
#if __ARM_NEON_FP & 0x1
  /* 16-bit floating point vector types are available.  */
  float16x8_t storage;
#endif
\end{verbatim}

\hypertarget{availability-of-fused-multiply-accumulate-intrinsics}{%
\subsubsection{Availability of fused multiply-accumulate
intrinsics}\label{availability-of-fused-multiply-accumulate-intrinsics}}

Whenever fused multiply-accumulate is available for scalar operations,
it is also available as a vector operation in the Advanced SIMD
extension. When a vector fused multiply-accumulate is available,
intrinsics are defined to access it.

This is indicated by {\_\_ARM\_FEATURE\_FMA} (see
\protect\hyperlink{ssec-FMA}{ssec-FMA}). :

\begin{verbatim}
#if __ARM_FEATURE_FMA
  /* Fused multiply-accumulate intrinsics are available.  */
  float32x4_t a, b, c;
  vfma_f32 (a, b, c);
#endif
\end{verbatim}

\hypertarget{availability-of-armv8.1-a-advanced-simd-intrinsics}{%
\subsubsection{Availability of Armv8.1-A Advanced SIMD
intrinsics}\label{availability-of-armv8.1-a-advanced-simd-intrinsics}}

The Armv8.1-A \protect\hyperlink{ARMARMv81}{{[}ARMARMv81{]}}
architecture introduces two new instructions: SQRDMLAH and SQRDMLSH.
ACLE specifies vector and vector-by-lane intrinsics to access these
instructions where they are available in hardware.

This is indicated by {\_\_ARM\_FEATURE\_QRDMX} (see
\protect\hyperlink{ssec-RDM}{ssec-RDM}). :

\begin{verbatim}
#if __ARM_FEATURE_QRDMX
  /* Armv8.1-A RDMA extensions are available.  */
  int16x4_t a, b, c;
  vqrdmlah_s16 (a, b, c);
#endif
\end{verbatim}

\hypertarget{availability-of-16-bit-floating-point-arithmetic-intrinsics}{%
\subsubsection{Availability of 16-bit floating-point arithmetic
intrinsics}\label{availability-of-16-bit-floating-point-arithmetic-intrinsics}}

Armv8.2-A \protect\hyperlink{ARMARMv82}{{[}ARMARMv82{]}} introduces new
data processing instructions which operate on 16-bit floating point data
in the IEEE754-2008 {[}IEEE-FP{]} format. ACLE specifies intrinsics
which map to the vector forms of these instructions where they are
available in hardware.

This is indicated by {\_\_ARM\_FEATURE\_FP16\_VECTOR\_ARITHMETIC} (see
\protect\hyperlink{ssec-fp16-arith}{ssec-fp16-arith}). :

\begin{verbatim}
#if __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
  float16x8_t a, b;
  vaddq_f16 (a, b);
#endif
\end{verbatim}

ACLE also specifies intrinsics which map to the scalar forms of these
instructions, see
\protect\hyperlink{ssec-fp16-scalar}{ssec-fp16-scalar}. Availability of
the scalar intrinsics is indicated by
{\_\_ARM\_FEATURE\_FP16\_SCALAR\_ARITHMETIC}. :

\begin{verbatim}
#if __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
  float16_t a, b;
  vaddh_f16 (a, b);
#endif
\end{verbatim}

\hypertarget{availability-of-16-bit-brain-floating-point-arithmetic-intrinsics}{%
\subsubsection{Availability of 16-bit brain floating-point arithmetic
intrinsics}\label{availability-of-16-bit-brain-floating-point-arithmetic-intrinsics}}

Armv8.2-A \protect\hyperlink{ARMARMv82}{{[}ARMARMv82{]}} introduces new
data processing instructions which operate on 16-bit brain floating
point data as described in the Arm Architecture Reference Manual. ACLE
specifies intrinsics which map to the vector forms of these instructions
where they are available in hardware.

This is indicated by {\_\_ARM\_FEATURE\_BF16\_VECTOR\_ARITHMETIC} (see
\protect\hyperlink{ssec-BF16fmt}{ssec-BF16fmt}). :

\begin{verbatim}
#if __ARM_FEATURE_BF16_VECTOR_ARITHMETIC
  float32x2_t res = {0};
  bfloat16x4_t a' = vld1_bf16 (a);
  bfloat16x4_t b' = vld1_bf16 (b);
  res = vdot_bf16 (res, a', b');
#endif
\end{verbatim}

ACLE also specifies intrinsics which map to the scalar forms of these
instructions, see
\protect\hyperlink{ssec-bf16-scalar}{ssec-bf16-scalar}. Availability of
the scalar intrinsics is indicated by
{\_\_ARM\_FEATURE\_BF16\_SCALAR\_ARITHMETIC}. :

\begin{verbatim}
#if __ARM_FEATURE_BF16_SCALAR_ARITHMETIC
  bfloat16_t a;
  float32_t b = ..;
  a = b<convert> (b);
#endif
\end{verbatim}

\hypertarget{availability-of-armv8.4-a-advanced-simd-intrinsics}{%
\subsubsection{Availability of Armv8.4-A Advanced SIMD
intrinsics}\label{availability-of-armv8.4-a-advanced-simd-intrinsics}}

New Crypto and FP16 Floating Point Multiplication Variant instructions
in Armv8.4-A:

\begin{quote}
\begin{itemize}
\tightlist
\item
  New SHA512 crypto instructions (available if
  {\_\_ARM\_FEATURE\_SHA512})
\item
  New SHA3 crypto instructions (available if {\_\_ARM\_FEATURE\_SHA3})
\item
  SM3 crypto instructions (available if {\_\_ARM\_FEATURE\_SM3})
\item
  SM4 crypto instructions (available if {\_\_ARM\_FEATURE\_SM4})
\item
  New FML{[}A\textbar{}S{]} instructions (available if
  {\_\_ARM\_FEATURE\_FP16\_FML}).
\end{itemize}
\end{quote}

These instructions have been backported as optional instructions to
Armv8.2-A and Armv8.3-A.

\hypertarget{availability-of-dot-product-intrinsics}{%
\subsubsection{Availability of Dot Product
intrinsics}\label{availability-of-dot-product-intrinsics}}

The architecture extensions introduced by Armv8.2-A provide a set of dot
product instructions which operate on 8-bit sub-element quantities.
These instructions are available in both AArch64 and AArch32 execution
states using Advanced SIMD instructions. These intrinsics are available
when {\_\_ARM\_FEATURE\_DOTPROD} is defined (see
\protect\hyperlink{ssec-Dot}{ssec-Dot}). :

\begin{verbatim}
#if __ARM_FEATURE_DOTPROD
  uint8x8_t a, b;
  vdot_u8 (a, b);
#endif
\end{verbatim}

\hypertarget{availability-of-armv8.5-a-floating-point-rounding-intrinsics}{%
\subsubsection{Availability of Armv8.5-A floating-point rounding
intrinsics}\label{availability-of-armv8.5-a-floating-point-rounding-intrinsics}}

The architecture extensions introduced by Armv8.5-A provide a set of
floating-point rounding instructions that round a floating-point number
to an to a floating-point value that would be representable in a 32-bit
or 64-bit signed integer type. NaNs, Infinities and Out-of-Range values
are forced to the Most Negative Integer representable in the target
size, and an Invalid Operation Floating-Point Exception is generated.
These instructions are available only in the AArch64 execution state.
The intrinsics for these are available when {\_\_ARM\_FEATURE\_FRINT} is
defined. The Advanced SIMD intrinsics are specified in the Arm Neon
Intrinsics Reference Architecture Specification
\protect\hyperlink{Neon}{{[}Neon{]}}.

\hypertarget{availability-of-armv8.6-a-integer-matrix-multiply-intrinsics}{%
\subsubsection{Availability of Armv8.6-A Integer Matrix Multiply
intrinsics}\label{availability-of-armv8.6-a-integer-matrix-multiply-intrinsics}}

The architecture extensions introduced by Armv8.6-A provide a set of
integer matrix multiplication and mixed sign dot product instructions.
These instructions are optional from Armv8.2-A to Armv8.5-A.

These intrinsics are available when {\_\_ARM\_FEATURE\_MATMUL\_INT8} is
defined (see \protect\hyperlink{ssec-MatMul}{ssec-MatMul}).

\hypertarget{specification-of-advanced-simd-intrinsics}{%
\subsection{Specification of Advanced SIMD
intrinsics}\label{specification-of-advanced-simd-intrinsics}}

The Advanced SIMD intrinsics are specified in the Arm Neon Intrinsics
Reference Architecture Specification
\protect\hyperlink{Neon}{{[}Neon{]}}.

The behavior of an intrinsic is specified to be equivalent to the
AArch64 instruction it is mapped to in
\protect\hyperlink{Neon}{{[}Neon{]}}. Intrinsics are specified as a
mapping between their name, arguments and return values and the AArch64
instruction and assembler operands which they are equivalent to.

A compiler may make use of the as-if rule from C
\protect\hyperlink{C99}{{[}C99{]}} (5.1.2.3) to perform optimizations
which preserve the instruction semantics.

\hypertarget{undefined-behavior}{%
\subsection{Undefined behavior}\label{undefined-behavior}}

Care should be taken by compiler implementers not to introduce the
concept of undefined behavior to the semantics of an intrinsic. For
example, the {vabsd\_s64} intrinsic has well defined behaviour for all
input values, while the C99 {llabs} has undefined behaviour if the
result would not be representable in a {long long} type. It would thus
be incorrect to implement {vabsd\_s64} as a wrapper function or macro
around {llabs}.

\hypertarget{alignment-assertions}{%
\subsection{Alignment assertions}\label{alignment-assertions}}

The AArch32 Neon load and store instructions provide for alignment
assertions, which may speed up access to aligned data (and will fault
access to unaligned data). The Advanced SIMD intrinsics do not directly
provide a means for asserting alignment.

\hypertarget{m-profile-vector-extension-mve-intrinsics}{%
\section{M-profile Vector Extension (MVE)
intrinsics}\label{m-profile-vector-extension-mve-intrinsics}}

The M-profile Vector Extension (MVE)
\protect\hyperlink{MVE-spec}{{[}MVE-spec{]}} instructions provide packed
Single Instruction Multiple Data (SIMD) and single-element scalar
operations on a range of integer and floating-point types. MVE can also
be referred to as Helium.

The M-profile Vector Extension provides for arithmetic, logical and
saturated arithmetic operations on 8-bit, 16-bit and 32-bit integers
(and sometimes on 64-bit integers) and on 16-bit and 32-bit
floating-point data, arranged in 128-bit vectors.

The intrinsics in this section provide C and C++ programmers with a
simple programming model allowing easy access to the code generation of
the MVE instructions for the Armv8.1-M Mainline architecture.

\hypertarget{concepts-1}{%
\subsection{Concepts}\label{concepts-1}}

The MVE instructions are designed to improve the performance of SIMD
operations by operating on 128-bit \emph{vectors} of \emph{elements} of
the same \emph{scalar} data type.

For example, {uint16x8\_t} is a 128-bit vector type consisting of eight
elements of the scalar {uint16\_t} data type. Likewise, {uint8x16\_t} is
a 128-bit vector type consisting of sixteen {uint8\_t} elements.

In a vector programming model, operations are performed in parallel
across the elements of the vector. For example, {vmulq\_u16(a, b)} is a
vector intrinsic which takes two {uint16x8\_t} vector arguments {a} and
{b}, and returns the result of multiplying corresponding elements from
each vector together.

The M-profile Vector Extension also provides support for
\emph{vector-by-scalar} operations. In these operations, a scalar value
is provided directly, duplicated to create a new vector with the same
number of elements as an input vector, and an operation is performed in
parallel between this new vector and other input vectors.

For example, {vaddq\_n\_u16(a, s)}, is a vector-by-scalar intrinsic
which takes one {uint16x8\_t} vector argument and one {uint16\_t} scalar
argument. A new vector is formed which consists of eight copies of {s},
and this new vector is multiplied by {a}.

\emph{Reductions} work across the whole of a single vector performing
the same operation between elements of that vector. For example,
{vaddvq\_u16(a)} is a reduction intrinsic which takes a {uint16x8\_t}
vector, adds each of the eight {uint16\_t} elements together, and
returns a {uint32\_t} result containing the sum. Note the difference in
return types between MVE's {vaddvq\_u16} and Advanced SIMD's
implementation of the same name intrinsic, MVE returns the {uint32\_t}
type whereas Advanced SIMD returns the element type {uint16\_t}.

\emph{Cross-lane} and \emph{pairwise} vector operations work on pairs of
elements within a vector, sometimes performing the same operation like
in the case of the vector saturating doubling multiply subtract dual
returning high half with exchange {vqdmlsdhxq\_s8} or sometimes a
different one as is the case with the vector complex addition intrinsic
{vcaddq\_rot90\_s8}.

Some intrinsics may only read part of the input vectors whereas others
may only write part of the results. For example, the vector multiply
long intrinsics, depending on whether you use {vmullbq\_int\_s32} or
{vmulltq\_int\_s32}, will read the even (bottom) or odd (top) elements
of each {int16x8\_t} input vectors, multiply them and write to a
double-width {int32x4\_t} vector. In contrast the vector shift right and
narrow will read in a double-width input vector and, depending on
whether you pick the bottom or top variant, write to the even or odd
elements of the single-width result vector. For example,
{vshrnbq\_n\_s16(a, b, 2)} will take each eight elements of type
{int16\_t} of argument {b}, shift them right by two, narrow them to
eight bits and write them to the even elements of the {int8x16\_t}
result vector, where the odd elements are picked from the equally typed
{int8x16\_t} argument {a}.

\emph{Predication}: the M-profile Vector Extension uses vector
predication to allow SIMD operations on selected lanes. The MVE
intrinsics expose vector predication by providing predicated intrinsic
variants for instructions that support it. These intrinsics can be
recognized by one of the four suffixes: * {\_m} (merging) which
indicates that false-predicated lanes are not written to and keep the
same value as they had in the first argument of the intrinsic. * {\_p}
(predicated) which indicates that false-predicated lanes are not used in
the SIMD operation. For example {vaddvq\_p\_s8}, where the
false-predicated lanes are not added to the resulting sum. * {\_z}
(zero) which indicates that false-predicated lanes are filled with
zeroes. These are only used for load instructions. * {\_x} (dont-care)
which indicates that the false-predicated lanes have undefined values.
These are syntactic sugar for merge intrinsics with a {vuninitializedq}
inactive parameter.

These predicated intrinsics can also be recognized by their last
parameter being of type {mve\_pred16\_t}. This is an alias for the
{uint16\_t} type. Some predicated intrinsics may have a dedicated first
parameter to specify the value in the result vector for the
false-predicated lanes; this argument will be of the same type as the
result type. For example, {v = veorq\_m\_s8(inactive, a, b, p)}, will
write to each of the sixteen lanes of the result vector {v}, either the
result of the exclusive or between the corresponding lanes of vectors
{a} and {b}, or the corresponding lane of vector {inactive}, depending
on whether that lane is true- or false-predicated in {p}. The types of
{inactive}, {a}, {b} and {v} are all {int8x16\_t} in this case and {p}
has type {mve\_pred16\_t}.

When calling a predicated intrinsic, the predicate mask value should
contain the same value in all bits corresponding to the same element of
an input or output vector. For example, an instruction operating on
32-bit vector elements should have a predicate mask in which each block
of 4 bits is either all 0 or all 1.

\begin{verbatim}
mve_pred16_t mask8 = vcmpeqq_u8 (a, b);
uint8x16_t r8  = vaddq_m_u8  (inactive, a, b, mask8); // OK
uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDEFINED BEHAVIOR
mve_pred16_t mask8 = 0x5555;        // Predicate every other byte.
uint8x16_t r8  = vaddq_m_u8  (inactive, a, b, mask8); // OK
uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDEFINED BEHAVIOR
\end{verbatim}

In cases where the input and output vectors have different sizes (a
widening or narrowing operation), the mask should be consistent with the
largest element size used by the intrinsic. For example,
{vcvtbq\_m\_f16\_f32} and {vcvtbq\_m\_f32\_f16} should \emph{both} be
passed a predicate mask consistent with 32-bit vector lanes.

Users wishing to exploit the MVE architecture's predication behavior in
finer detail than this constraint permits are encouraged to use inline
assembly.

\hypertarget{scalar-shift-intrinsics}{%
\subsection{Scalar shift intrinsics}\label{scalar-shift-intrinsics}}

The M-profile Vector Extension (MVE) also provides a set of scalar shift
instructions that operate on signed and unsigned double-words and
single-words. These shifts can perform additional saturation, rounding,
or both. The ACLE for MVE defines intrinsics for these instructions.

\hypertarget{namespace}{%
\subsection{Namespace}\label{namespace}}

By default all M-profile Vector Extension intrinsics are available with
and without the {\_\_arm\_} prefix. If the
{\_\_ARM\_MVE\_PRESERVE\_USER\_NAMESPACE} macro is defined, the
{\_\_arm\_} prefix is mandatory. This is available to hide the
user-namespace-polluting variants of the intrinsics.

\hypertarget{intrinsic-polymorphism}{%
\subsection{Intrinsic polymorphism}\label{intrinsic-polymorphism}}

The ACLE for the M-profile Vector Extension intrinsics was designed in
such a way that it supports a polymorphic implementation of most
intrinsics. The polymorphic name of an intrinsic is indicated by leaving
out the type suffix enclosed in square brackets, for example the vector
addition intrinsic {vaddq{[}\_s32{]}} can be called using the function
name {vaddq}. Note that the polymorphism is only possible on input
parameter types and intrinsics with the same name must still have the
same number of parameters. This is expected to aid implementation of the
polymorphism using C11's {\_Generic} selection.

\hypertarget{vector-data-types-1}{%
\subsection{Vector data types}\label{vector-data-types-1}}

Vector data types are named as a lane type and a multiple. Lane type
names are based on the types defined in
{\textless{}stdint.h\textgreater{}}. For example,. {int16x8\_t} is a
vector of eight {int16\_t} values. The base types are {int8\_t},
{uint8\_t}, {int16\_t}, {uint16\_t}, {int32\_t}, {uint32\_t},
{int64\_t}, {uint64\_t}, {float16\_t} and {float32\_t}. The multiples
are such that the resulting vector types are 128-bit.

\hypertarget{vector-array-data-types-1}{%
\subsection{Vector array data types}\label{vector-array-data-types-1}}

Array types are defined for multiples of 2 and 4 of all the vector
types, for use in load and store operations. For a vector type
{\textless{}type\textgreater{}\_t} the corresponding array type is
{\textless{}type\textgreater{}x\textless{}length\textgreater{}\_t}.
Concretely, an array type is a structure containing a single array
element called {val}.

For example, an array of two {int16x8\_t} types is {int16x4x8\_t}, and
is represented as:

\begin{verbatim}
struct int16x8x2_t { int16x8_t val[2]; };
\end{verbatim}

\hypertarget{scalar-data-types-1}{%
\subsection{Scalar data types}\label{scalar-data-types-1}}

For consistency, {\textless{}arm\_mve.h\textgreater{}} defines some
additional scalar data types to match the vector types.

{float32\_t} is defined as an alias for {float}, {float16\_t} is defined
as an alias for {\_\_fp16} and {mve\_pred16\_t} is defined as an alias
for {uint16\_t}.

\hypertarget{operations-on-data-types-1}{%
\subsection{Operations on data types}\label{operations-on-data-types-1}}

ACLE does not define implicit conversion between different data types.
E.g. :

\begin{verbatim}
int32x4_t x;
uint32x4_t y = x; // No representation change
float32x4_t z = x; // Conversion of integer to floating type
\end{verbatim}

Is not portable. Use the {vreinterpretq} intrinsics to convert from one
vector type to another without changing representation, and use the
{vcvtq} intrinsics to convert between integer and floating types; for
example:

\begin{verbatim}
int32x4_t x;
uint32x4_t y = vreinterpretq_u32_s32(x);
float32x4_t z = vcvtq_f32_s32(x);
\end{verbatim}

ACLE does not define static construction of vector types. E.g. :

\begin{verbatim}
int32x4_t x = { 1, 2, 3, 4 };
\end{verbatim}

Is not portable. Use the {vcreateq} or {vdupq} intrinsics to construct
values from scalars.

In C++, ACLE does not define whether MVE data types are POD types or
whether they can be inherited from.

\hypertarget{compatibility-with-other-vector-programming-models-1}{%
\subsection{Compatibility with other vector programming
models}\label{compatibility-with-other-vector-programming-models-1}}

ACLE does not specify how the MVE Intrinsics interoperate with
alternative vector programming models. Consequently, programmers should
take particular care when combining the MVE programming model with such
programming models.

For example, the GCC vector extensions permit initialising a variable
using array syntax, as so :

\begin{verbatim}
#include "arm_mve.h"
...
uint32x4_t x = {0, 1, 2, 3}; // GCC extension.
uint32_t y = vgetq_lane_s32 (x, 0); // ACLE MVE Intrinsic.
\end{verbatim}

But the definition of the GCC vector extensions is such that the value
stored in {y} will depend on whether the program is running in big- or
little-endian mode.

It is recommended that MVE Intrinsics be used consistently:

\begin{verbatim}
#include "arm_mve.h"
...
const int temp[4] = {0, 1, 2, 3};
uint32x4_t x = vld1q_s32 (temp);
uint32_t y = vgetq_lane_s32 (x, 0);
\end{verbatim}

\hypertarget{availability-of-m-profile-vector-extension-intrinsics}{%
\subsection{Availability of M-profile Vector Extension
intrinsics}\label{availability-of-m-profile-vector-extension-intrinsics}}

M-profile Vector Extension support is available if the
{\_\_ARM\_FEATURE\_MVE} macro has a value other than 0 (see
\protect\hyperlink{ssec-MVE}{ssec-MVE}). The availability of the MVE
Floating Point data types and intrinsics are predicated on the value of
this macro having bit two set. In order to access the MVE intrinsics, it
is necessary to include the {\textless{}arm\_mve.h\textgreater{}}
header. :

\begin{verbatim}
#if (__ARM_FEATURE_MVE & 3) == 3
#include <arm_mve.h>
  /* MVE integer and floating point intrinsics are now available to use.  */
#elif __ARM_FEATURE_MVE & 1
#include <arm_mve.h>
  /* MVE integer intrinsics are now available to use.  */
#endif
\end{verbatim}

\hypertarget{specification-of-m-profile-vector-extension-intrinsics}{%
\subsubsection{Specification of M-profile Vector Extension
intrinsics}\label{specification-of-m-profile-vector-extension-intrinsics}}

The M-profile Vector Extension intrinsics are specified in the Arm MVE
Intrinsics Reference Architecture Specification
\protect\hyperlink{MVE}{{[}MVE{]}}.

The behavior of an intrinsic is specified to be equivalent to the MVE
instruction it is mapped to in \protect\hyperlink{MVE}{{[}MVE{]}}.
Intrinsics are specified as a mapping between their name, arguments and
return values and the MVE instruction and assembler operands which they
are equivalent to.

A compiler may make use of the as-if rule from C
\protect\hyperlink{C99}{{[}C99{]}} (5.1.2.3) to perform optimizations
which preserve the instruction semantics.

\hypertarget{undefined-behavior-1}{%
\subsubsection{Undefined behavior}\label{undefined-behavior-1}}

Care should be taken by compiler implementers not to introduce the
concept of undefined behavior to the semantics of an intrinsic.

\hypertarget{alignment-assertions-1}{%
\subsubsection{Alignment assertions}\label{alignment-assertions-1}}

The MVE load and store instructions provide for alignment assertions,
which may speed up access to aligned data (and will fault access to
unaligned data). The MVE intrinsics do not directly provide a means for
asserting alignment.

\hypertarget{future-directions}{%
\section{Future directions}\label{future-directions}}

\hypertarget{extensions-under-consideration}{%
\subsection{Extensions under
consideration}\label{extensions-under-consideration}}

\hypertarget{procedure-calls-and-the-q-ge-bits}{%
\subsubsection{Procedure calls and the Q / GE
bits}\label{procedure-calls-and-the-q-ge-bits}}

The Arm procedure call standard \protect\hyperlink{AAPCS}{{[}AAPCS{]}}
says that the Q and GE bits are undefined across public interfaces, but
in practice it is desirable to return saturation status from functions.
There are at least two common use cases:

To define small (inline) functions defined in terms of expressions
involving intrinsics, which provide abstractions or emulate other
intrinsic families; it is desirable for such functions to have the same
well-defined effects on the Q/GE bits as the corresponding intrinsics.

\hypertarget{dsp-library-functions}{%
\subsubsection{DSP library functions}\label{dsp-library-functions}}

Options being considered are to define an extension to the pcs attribute
to indicate that Q is meaningful on the return, and possibly also to
infer this in the case of functions marked as inline.

\hypertarget{returning-a-value-in-registers}{%
\subsubsection{Returning a value in
registers}\label{returning-a-value-in-registers}}

As a type attribute this would allow things like:

\begin{verbatim}
struct __attribute__((value_in_regs)) Point { int x[2]; };
\end{verbatim}

This would indicate that the result registers should be used as if the
type had been passed as the first argument. The implementation should
not complain if the attribute is applied inappropriately (i.e.~where
insufficient registers are available) it might be a template instance.

\hypertarget{custom-calling-conventions}{%
\subsubsection{Custom calling
conventions}\label{custom-calling-conventions}}

Some interfaces may use calling conventions that depart from the AAPCS.
Examples include:

Using additional argument registers, for example passing an argument in
R5, R7, R12.

Using additional result registers, for example R0 and R1 for a combined
divide-and-remainder routine (note that some implementations may be able
to support this by means of a value in registers structure return).

Returning results in the condition flags.

Preserving and possibly setting the Q (saturation) bit.

\hypertarget{traps-system-calls-breakpoints}{%
\subsubsection{Traps: system calls, breakpoints,
\ldots{}}\label{traps-system-calls-breakpoints}}

This release of ACLE does not define how to invoke a SVC (supervisor
call), BKPT (breakpoint) and other related functionality.

One option would be to mark a function prototype with an attribute, for
example :

\begin{verbatim}
int __attribute__((svc(0xAB))) system_call(int code, void const \*params);
\end{verbatim}

When calling the function, arguments and results would be marshalled
according to the AAPCS, the only difference being that the call would be
invoked as a trap instruction rather than a branch-and-link.

One issue is that some calls may have non-standard calling conventions.
(For example, Arm Linux system calls expect the code number to be passed
in R7.)

Another issue is that the code may vary between A32 and T32 state. This
issue could be addressed by allowing two numeric parameters in the
attribute.

\hypertarget{mixed-endian-data}{%
\subsubsection{Mixed-endian data}\label{mixed-endian-data}}

Extensions for accessing data in different endianness have been
considered. However, this is not an issue specific to the Arm
architecture, and it seems better to wait for a lead from language
standards.

\hypertarget{memory-access-with-non-temporal-hints}{%
\subsubsection{Memory access with non-temporal
hints}\label{memory-access-with-non-temporal-hints}}

Supporting memory access with cacheability hints through language
extensions is being investigated. Eg. :

\begin{verbatim}
int *__attribute__((nontemporal)) p;
\end{verbatim}

As a type attribute, will allow indirection of p with non-temporal
cacheability hint.

\hypertarget{features-not-considered-for-support}{%
\subsection{Features not considered for
support}\label{features-not-considered-for-support}}

\hypertarget{vfp-vector-mode}{%
\subsubsection{VFP vector mode}\label{vfp-vector-mode}}

The short vector mode of the original VFP architecture is now
deprecated, and unsupported in recent implementations of the Arm
floating-point instructions set. There is no plan to support it through
C extensions.

\hypertarget{bit-banded-memory-access}{%
\subsubsection{Bit-banded memory
access}\label{bit-banded-memory-access}}

The bit-banded memory feature of certain Cortex-M cores is now regarded
as being outside the architecture, and there is no plan to standardize
its support.

\hypertarget{transactional-memory-extension-tme-intrinsics}{%
\section{Transactional Memory Extension (TME)
intrinsics}\label{transactional-memory-extension-tme-intrinsics}}

\hypertarget{introduction-5}{%
\subsection{Introduction}\label{introduction-5}}

This section describes the intrinsics for the instructions of the
Transactional Memory Extension (TME). TME adds support for transactional
execution where transactions are started and committed by a set of new
instructions. The TME instructions are present in the AArch64 execution
state only.

TME is designed to improve performance in cases where larger system
scaling requires atomic and isolated access to data structures whose
composition is dynamic in nature and therefore not readily amenable to
fine-grained locking or lock-free approaches.

TME transactions are \emph{isolated}. This means that transactional
stores are hidden from other observers, and transactional loads cannot
see stores from other observers until the transaction commits. Also, if
the transaction fails then stores to memory and writes to registers by
the transaction are discarded and the processor returns to the state it
had when the transaction started.

TME transactions are \emph{best-effort}. This means that the
architecture does not guarantee success for any transaction. The
architecture requires that all transactions specify a failure handler
allowing the software to fallback to a non-transactional alternative to
provide guarantees of forward progress.

TME defines \emph{flattened nesting} of transactions, where nested
transactions are subsumed by the outer transaction. This means that the
effects of a nested transaction do not become visible to other observers
until the outer transaction commits. When a nested transaction fails it
causes the outer transaction, and all nested transactions within, to
fail.

The TME intrinsics are available when {\_\_ARM\_FEATURE\_TME} is
defined.

\hypertarget{failure-definitions}{%
\subsection{Failure definitions}\label{failure-definitions}}

Transactions can fail due to various causes. The following macros are
defined to help use or detect these causes. :

\begin{verbatim}
#define _TMFAILURE_REASON 0x00007fffu
#define _TMFAILURE_RTRY   0x00008000u
#define _TMFAILURE_CNCL   0x00010000u
#define _TMFAILURE_MEM    0x00020000u
#define _TMFAILURE_IMP    0x00040000u
#define _TMFAILURE_ERR    0x00080000u
#define _TMFAILURE_SIZE   0x00100000u
#define _TMFAILURE_NEST   0x00200000u
#define _TMFAILURE_DBG    0x00400000u
#define _TMFAILURE_INT    0x00800000u
#define _TMFAILURE_TRIVIAL    0x01000000u
\end{verbatim}

\hypertarget{intrinsics-1}{%
\subsection{Intrinsics}\label{intrinsics-1}}

\begin{verbatim}
uint64_t __tstart (void);
\end{verbatim}

Starts a new transaction. When the transaction starts successfully the
return value is 0. If the transaction fails, all state modifications are
discarded and a cause of the failure is encoded in the return value. The
macros defined in \protect\hyperlink{ssec-TMEFailures}{ssec-TMEFailures}
can be used to detect the cause of the failure. :

\begin{verbatim}
void __tcommit (void);
\end{verbatim}

Commits the current transaction. For a nested transaction, the only
effect is that the transactional nesting depth is decreased. For an
outer transaction, the state modifications performed transactionally are
committed to the architectural state. :

\begin{verbatim}
void __tcancel (/*constant*/ uint64_t);
\end{verbatim}

Cancels the current transaction and discards all state modifications
that were performed transactionally. The intrinsic takes a 16-bit
immediate input that encodes the cancellation reason. This input could
be given as

{\_\_tcancel (\_TMFAILURE\_RTRY \textbar{} (failure\_reason \&
\_TMFAILURE\_REASON));}

if retry is true or

{\_\_tcancel (failure\_reason \& \_TMFAILURE\_REASON);}

if retry is false. :

\begin{verbatim}
uint64_t __ttest (void);
\end{verbatim}

Tests if executing inside a transaction. If no transaction is currently
executing, the return value is 0. Otherwise, this intrinsic returns the
depth of the transaction.

\hypertarget{instructions}{%
\subsection{Instructions}\label{instructions}}

\begin{longtable}[]{@{}llll@{}}
\toprule
\endhead
\begin{minipage}[t]{0.44\columnwidth}\raggedright
\textbf{Intrinsics}\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
\textbf{Argument}\strut
\end{minipage} & \begin{minipage}[t]{0.12\columnwidth}\raggedright
\textbf{Result}\strut
\end{minipage} & \begin{minipage}[t]{0.15\columnwidth}\raggedright
\textbf{Instruction}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.44\columnwidth}\raggedright
uint64\_t \_\_tstart (void)\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
-\strut
\end{minipage} & \begin{minipage}[t]{0.12\columnwidth}\raggedright
Xt -\textgreater{} result\strut
\end{minipage} & \begin{minipage}[t]{0.15\columnwidth}\raggedright
tstart \textless{}Xt\textgreater{}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.44\columnwidth}\raggedright
void \_\_tcommit (void)\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
-\strut
\end{minipage} & \begin{minipage}[t]{0.12\columnwidth}\raggedright
-\strut
\end{minipage} & \begin{minipage}[t]{0.15\columnwidth}\raggedright
tcommit\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.44\columnwidth}\raggedright
void \_\_tcancel (/*constant*/ uint64\_t reason)\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
reason -\textgreater{} \#\textless{}imm\textgreater{}\strut
\end{minipage} & \begin{minipage}[t]{0.12\columnwidth}\raggedright
-\strut
\end{minipage} & \begin{minipage}[t]{0.15\columnwidth}\raggedright
tcancel \#\textless{}imm\textgreater{}\strut
\end{minipage}\tabularnewline
\begin{minipage}[t]{0.44\columnwidth}\raggedright
uint64\_t \_\_ttest (void)\strut
\end{minipage} & \begin{minipage}[t]{0.18\columnwidth}\raggedright
-\strut
\end{minipage} & \begin{minipage}[t]{0.12\columnwidth}\raggedright
Xt -\textgreater{} result\strut
\end{minipage} & \begin{minipage}[t]{0.15\columnwidth}\raggedright
ttest \textless{}Xt\textgreater{}\strut
\end{minipage}\tabularnewline
\bottomrule
\end{longtable}

These intrinsics are available when {arm\_acle.h} is included.

\hypertarget{citations}{}
\begin{itemize}
\item
  \protect\hypertarget{AAPCS}{}{AAPCS} Arm,
  \href{https://developer.arm.com/products/architecture/system-architectures/software-standards/abi}{Application
  Binary Interface for the Arm Architecture}
\item
  \protect\hypertarget{AAPCS64}{}{AAPCS64} Arm,
  \href{https://developer.arm.com/products/architecture/system-architectures/software-standards/abi}{Application
  Binary Interface for the Arm Architecture}
\item
  \protect\hypertarget{ARMARM}{}{ARMARM} Arm, Arm Architecture Reference
  Manual (7-A / 7-R), Arm DDI 0406C
\item
  \protect\hypertarget{ARMARMv8}{}{ARMARMv8} Arm, Armv8-A Reference
  Manual (Issue A.b), Arm DDI0487A.B
\item
  \protect\hypertarget{ARMARMv81}{}{ARMARMv81} Arm, Armv8.1 Extension,
  \href{http://community.arm.com/groups/processors/blog/2014/12/02/the-armv8-a-architecture-and-its-ongoing-development}{The
  ARMv8-A architecture and its ongoing development}
\item
  \protect\hypertarget{ARMARMv82}{}{ARMARMv82} Arm, Armv8.2 Extension,
  \href{https://community.arm.com/groups/processors/blog/2016/01/05/armv8-a-architecture-evolution}{Armv8-A
  architecture evolution}
\item
  \protect\hypertarget{ARMARMv83}{}{ARMARMv83} Arm, Armv8.3 Extension,
  \href{https://community.arm.com/processors/b/blog/posts/armv8-a-architecture-2016-additions}{Armv8-A
  architecture: 2016 additions}
\item
  \protect\hypertarget{ARMARMv84}{}{ARMARMv84} Arm, Armv8.4 Extension,
  \href{https://community.arm.com/processors/b/blog/posts/introducing-2017s-extensions-to-the-arm-architecture}{Introducing
  2017's extensions to the Arm Architecture}
\item
  \protect\hypertarget{ARMARMv85}{}{ARMARMv85} Arm, Armv8.5 Extension,
  \href{https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/arm-a-profile-architecture-2018-developments-armv85a}{Arm
  A-Profile Architecture Developments 2018: Armv8.5-A}
\item
  \protect\hypertarget{ARMv7M}{}{ARMv7M} Arm, Arm Architecture Reference
  Manual (7-M), Arm DDI 0403C
\item
  \protect\hypertarget{BA}{}{BA} Arm, EABI Addenda and Errata Build
  Attributes, Arm IHI 0045C
\item
  \protect\hypertarget{Bfloat16}{}{Bfloat16} Arm,
  \href{https://community.arm.com/developer/ip-products/processors/b/ml-ip-blog/posts/bfloat16-processing-for-neural-networks-on-armv8_2d00_a}{BFloat16
  processing for Neural Networks on Armv8-A}
\item
  \protect\hypertarget{C11}{}{C11} ISO, Standard C (based on draft
  N1570), ISO/IEC 9899:2011
\item
  \protect\hypertarget{C99}{}{C99} ISO, Standard C (C99), ISO 9899:1999
\item
  \protect\hypertarget{CFP15}{}{CFP15} ISO/IEC, Floating point
  extensions for C, ISO/IEC TS 18661-3
\item
  \protect\hypertarget{CPP11}{}{CPP11} ISO, Standard C++ (based on draft
  N3337), ISO/IEC 14882:2011
\item
  \protect\hypertarget{G.191}{}{G.191} ITU-T, Software Tool Library 2005
  User's Manual, T-REC-G.191-200508-I
\item
  \protect\hypertarget{GCC}{}{GCC} GNU/FSF,
  \href{http://gcc.gnu.org/onlinedocs}{GNU C Compiler Collection}
\item
  \protect\hypertarget{IA-64}{}{IA-64} Intel, Intel Itanium
  Processor-Specific ABI, 245370-003
\item
  \protect\hypertarget{IEEE-FP}{}{IEEE-FP} IEEE, IEEE Floating Point,
  IEEE 754-2008
\item
  \protect\hypertarget{MVE}{}{MVE} Arm,
  \href{https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics}{MVE
  Intrinsics}
\item
  \protect\hypertarget{MVE-spec}{}{MVE-spec} Arm, Arm v8-M Architecture
  Reference Manual, Arm DDI0553B.F
\item
  \protect\hypertarget{Neon}{}{Neon} Arm,
  \href{https://developer.arm.com/technologies/neon/intrinsics}{Neon
  Intrinsics}
\item
  \protect\hypertarget{POSIX}{}{POSIX} IEEE / TOG, The Open Group Base
  Specifications, IEEE 1003.1
\item
  \protect\hypertarget{SVE-ACLE}{}{SVE-ACLE} Arm,
  \href{https://developer.arm.com/architectures/system-architectures/software-standards/acle}{Arm
  C Language Extensions for SVE}
\item
  \protect\hypertarget{Warren}{}{Warren}

  \begin{enumerate}
  \def\labelenumi{\arabic{enumi}.}
  \setcounter{enumi}{7}
  \tightlist
  \item
    Warren, Hacker's Delight, pub. Addison-Wesley 2003
  \end{enumerate}
\item
  \protect\hypertarget{cxxabi}{}{cxxabi}
  \href{https://itanium-cxx-abi.github.io/cxx-abi/}{Itanium C++ ABI}
\end{itemize}

\end{document}

[makePDF] Run #1
This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./tex2pdf.-cc69ef23c147effc/input.tex
LaTeX2e <2020-02-02> patch level 2
L3 programming layer <2020-02-14>
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2019/12/20 v1.4l Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifxetex.sty
(/usr/share/texlive/texmf-dist/tex/generic/iftex/iftex.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/fixltx2e.sty

Package fixltx2e Warning: fixltx2e is not required with releases after 2015
(fixltx2e)                All fixes are now in the LaTeX kernel.
(fixltx2e)                See the latexrelease package for details.

) (/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texmf/tex/latex/lm/t1lmr.fd))
(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty)
(/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-pdftex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/parskip/parskip.sty
(/usr/share/texlive/texmf-dist/tex/latex/kvoptions/kvoptions.sty
(/usr/share/texlive/texmf-dist/tex/generic/ltxcmds/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/kvsetkeys/kvsetkeys.sty))
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/latex/pdftexcmds/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/infwarerr/infwarerr.sty))
(/usr/share/texlive/texmf-dist/tex/generic/kvdefinekeys/kvdefinekeys.sty)
(/usr/share/texlive/texmf-dist/tex/generic/pdfescape/pdfescape.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hycolor/hycolor.sty)
(/usr/share/texlive/texmf-dist/tex/latex/letltxmacro/letltxmacro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/auxhook/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/generic/intcalc/intcalc.sty)
(/usr/share/texlive/texmf-dist/tex/generic/etexcmds/etexcmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty)
(/usr/share/texlive/texmf-dist/tex/generic/bitset/bitset.sty
(/usr/share/texlive/texmf-dist/tex/generic/bigintcalc/bigintcalc.sty))
(/usr/share/texlive/texmf-dist/tex/generic/atbegshi/atbegshi.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hpdftex.def
(/usr/share/texlive/texmf-dist/tex/latex/atveryend/atveryend.sty)
(/usr/share/texlive/texmf-dist/tex/latex/rerunfilecheck/rerunfilecheck.sty
(/usr/share/texlive/texmf-dist/tex/generic/uniquecounter/uniquecounter.sty)))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3backend/l3backend-pdfmode.def)
No file input.aux.
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-cmr.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/latex/refcount/refcount.sty)
(/usr/share/texlive/texmf-dist/tex/generic/gettitlestring/gettitlestring.sty))
(/usr/share/texmf/tex/latex/lm/ot1lmr.fd)
(/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texmf/tex/latex/lm/omslmsy.fd)
(/usr/share/texmf/tex/latex/lm/omxlmex.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg)

LaTeX Warning: No \author given.

(/usr/share/texmf/tex/latex/lm/ts1lmr.fd) [1{/var/lib/texmf/fonts/map/pdftex/up
dmap/pdftex.map}]
Overfull \hbox (0.94044pt too wide) in paragraph at lines 183--184
[]\T1/lmr/bx/n/10 Issue|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 194--195
[]\T1/lmr/m/n/10 (-20) 11/11/11|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 196--197
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 203--204
[]\T1/lmr/m/n/10 (-20) 13/11/13|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 205--206
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 213--214
[]\T1/lmr/m/n/10 (-20) 09/05/14|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 222--223
[]\T1/lmr/m/n/10 (-20) 24/03/16|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 231--232
[]\T1/lmr/m/n/10 (-20) 02/06/17|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 233--234
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 240--241
[]\T1/lmr/m/n/10 (-20) 30/04/18|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 242--243
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 249--250
[]\T1/lmr/m/n/10 (-20) 30/03/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 251--252
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 259--260
[]\T1/lmr/m/n/10 (-20) 30/06/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 261--262
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 267--268
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 269--270
[]\T1/lmr/m/n/10 (-20) 30/09/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 271--272
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 276--277
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 278--279
[]\T1/lmr/m/n/10 (-20) 31/12/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 280--281
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 285--286
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 287--288
[]\T1/lmr/m/n/10 (-20) 31/05/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 289--290
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 294--295
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 296--297
[]\T1/lmr/m/n/10 (-20) 31/10/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 298--299
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (7.71986pt too wide) in paragraph at lines 303--304
[]\T1/lmr/m/n/10 (-20) 2021Q2|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 307--308
[]\T1/lmr/m/n/10 (-20) Arm|  
[2]

Package longtable Warning: Column widths have changed
(longtable)                in table 1 on input line 312.

[3]

Package longtable Warning: Column widths have changed
(longtable)                in table 2 on input line 502.

[4] [5] [6]
Overfull \hbox (28.25319pt too wide) in paragraph at lines 667--673
\T1/lmr/m/n/10 (-20) implementation-defined. The pre-de-fined macro __ARM_SIZEO
F_MINIMAL_ENUM

Overfull \hbox (15.23343pt too wide) in paragraph at lines 674--678
[]\T1/lmr/m/n/10 (-20) wchar_t may be 2 or 4 bytes. The pre-de-fined macro __AR
M_SIZEOF_WCHAR_T
[7] (/usr/share/texmf/tex/latex/lm/t1lmtt.fd)
Overfull \hbox (1.499pt too wide) in paragraph at lines 743--743
[]\T1/lmtt/m/n/10 #define __rev(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8
) | \[] 
[8]
Overfull \hbox (10.78079pt too wide) in paragraph at lines 783--789
\T1/lmr/m/n/10 (-20) hide the def-i-ni-tion of the user names-pace vari-ants. T
he __ARM_FEATURE_MVE

Overfull \hbox (43.49887pt too wide) in paragraph at lines 798--798
[]\T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availabl
e to use.  */[] 
[9]
Overfull \hbox (22.49893pt too wide) in paragraph at lines 862--862
[]\T1/lmtt/m/n/10 // UINT64_C not defined here since we did not set __STDC_FORM
AT_MACROS[] 
[10]
Underfull \hbox (badness 1152) in paragraph at lines 913--919
[]\T1/lmr/m/n/10 (+20) The for-mat in use can be se-lected at run-time but ACLE
 as-sumes it

Overfull \hbox (22.7798pt too wide) in paragraph at lines 913--919
\T1/lmr/m/n/10 (-20) __ARM_FP16_FORMAT_IEEE and __ARM_FP16_FORMAT_ALTERNATIVE

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]            \T1/lmtt/m/n/10 Operation takes place with (at least) 32-bit prec
ision.  */[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]                       \T1/lmtt/m/n/10 Operation takes place with 16-bit prec
ision.  */[] 
[11]
Underfull \hbox (badness 1009) in paragraph at lines 1009--1016
\T1/lmr/m/n/10 (+20) a dif-fer-ent mean-ing when us-ing the Arm al-ter-na-tive 
for-mat for 16-bit
[12]
Overfull \hbox (37.85806pt too wide) in paragraph at lines 1044--1051
[]\T1/lmr/m/n/10 (-20) The __bf16 type is only avail-able when the __ARM_BF16_F
ORMAT_ALTERNATIVE
[13]
Underfull \hbox (badness 5667) in paragraph at lines 1082--1086
\T1/lmr/m/n/10 (+20) The rec-om-mended CPU ar-chi-tec-ture names are as spec-i-
fied un-der

Overfull \hbox (1.11794pt too wide) in paragraph at lines 1138--1139
[]\T1/lmr/m/n/10 (-20) Armv5TE|  

Overfull \hbox (6.15416pt too wide) in paragraph at lines 1149--1150
[]\T1/lmr/m/n/10 (-20) Armv5TEJ|  

Overfull \hbox (3.14313pt too wide) in alignment at lines 1092--1281
 [] [] [] [] [] 

Package longtable Warning: Column widths have changed
(longtable)                in table 3 on input line 1281.

[14]
Overfull \hbox (4.20006pt too wide) in paragraph at lines 1322--1323
[]\T1/lmtt/m/n/10 VFPv3_FP16|  

Overfull \hbox (25.2pt too wide) in paragraph at lines 1336--1337
[]\T1/lmtt/m/n/10 VFPv3_D16_FP16|  

Overfull \hbox (14.70003pt too wide) in paragraph at lines 1343--1344
[]\T1/lmtt/m/n/10 VFPv3_SP_D16|  

Package longtable Warning: Column widths have changed
(longtable)                in table 4 on input line 1371.

[15] [16] [17]

Package longtable Warning: Column widths have changed
(longtable)                in table 5 on input line 1559.


Package longtable Warning: Column widths have changed
(longtable)                in table 6 on input line 1576.

[18]
Overfull \hbox (30.74413pt too wide) in paragraph at lines 1616--1620
[]\T1/lmr/m/n/10 (-20) Intrinsics as-so-ci-ated with the Q-bit and their fea-tu
re macro __ARM_FEATURE_QBIT
[19] (/usr/share/texmf/tex/latex/lm/ts1lmtt.fd)

Package longtable Warning: Column widths have changed
(longtable)                in table 7 on input line 1704.

[20]
Overfull \hbox (50.47176pt too wide) in alignment at lines 1714--1725
 [] [] [] 

Package longtable Warning: Column widths have changed
(longtable)                in table 8 on input line 1725.

[21]

Package longtable Warning: Column widths have changed
(longtable)                in table 9 on input line 1848.


Overfull \vbox (6.42513pt too high) has occurred while \output is active
[22] [23]
Overfull \hbox (9.81912pt too wide) in paragraph at lines 1918--1922
\T1/lmr/m/n/10 (-20) avail-able. Avail-able when __ARM_FEATURE_FP16_SCALAR_ARIT
HMETIC. 
[24] [25]
Underfull \hbox (badness 5607) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_COPROC is de-fined as a bitmap to in-di-cate


Underfull \hbox (badness 1715) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) the pres-ence of co-pro-ces-sor in-trin-sics for the tar-g
et ar-chi-tec-ture. If

Overfull \hbox (4.02765pt too wide) in paragraph at lines 2109--2110
[]\T1/lmr/bx/n/10 Value|  

Package longtable Warning: Column widths have changed
(longtable)                in table 10 on input line 2144.

[26]

Package longtable Warning: Column widths have changed
(longtable)                in table 11 on input line 2218.

[27]

Package longtable Warning: Column widths have changed
(longtable)                in table 12 on input line 2262.


Overfull \hbox (5.29768pt too wide) in alignment at lines 2286--2315
 [] [] [] 
[28]

Package longtable Warning: Column widths have changed
(longtable)                in table 13 on input line 2315.


Overfull \hbox (26.40143pt too wide) in paragraph at lines 2328--2329
[]\T1/lmr/bx/n/10 Example|  

Overfull \hbox (17.85016pt too wide) in paragraph at lines 2470--2472
[]\T1/lmtt/m/n/10 __ARM_FEATURE_DIRECTED_ROUNDING 

Overfull \hbox (4.11879pt too wide) in paragraph at lines 2546--2547
[]\T1/lmr/m/n/10 (-20) 0x0F|  

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2559--2561
[]\T1/lmtt/m/n/10 __ARM_FEATURE_MEMORY_TAGGING 

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2575--2577
[]\T1/lmtt/m/n/10 __ARM_FEATURE_NUMERIC_MAXMIN 
[29]
Overfull \hbox (4.79892pt too wide) in paragraph at lines 2692--2693
[]\T1/lmr/m/n/10 (-20) 0x0C|  

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2695--2697
[]\T1/lmtt/m/n/10 __ARM_FP16_FORMAT_ALTERNATIVE 

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2727--2729
[]\T1/lmtt/m/n/10 __ARM_BF16_FORMAT_ALTERNATIVE 

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2756--2757
[]\T1/lmr/m/n/10 (-20) 0x01|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2780--2781
[]\T1/lmr/m/n/10 (-20) 0x04|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2795--2796
[]\T1/lmr/m/n/10 (-20) 0x01|  
[30] [31] [32] [33] [34]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3090--3090
[]\T1/lmtt/m/n/10 int posix_memalign(void **memptr, size_t alignment, size_t si
ze );[] 
[35] [36]
Overfull \hbox (23.57977pt too wide) in alignment at lines 3219--3235
 [] [] [] [] 

Package longtable Warning: Column widths have changed
(longtable)                in table 15 on input line 3235.

[37] [38]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3310--3310
[]  \T1/lmtt/m/n/10 /* issue full-system memory barrier: read of value is guara
nteed[] 
[39] [40] [41]

Package longtable Warning: Column widths have changed
(longtable)                in table 16 on input line 3498.


Package longtable Warning: Column widths have changed
(longtable)                in table 17 on input line 3508.


Overfull \hbox (0.57954pt too wide) in paragraph at lines 3516--3517
[]\T1/lmr/bx/n/10 Value|  

Package longtable Warning: Column widths have changed
(longtable)                in table 18 on input line 3537.

[42] [43]
Overfull \hbox (33.71658pt too wide) in paragraph at lines 3652--3656
[]\T1/lmr/m/n/10 (-20) Sets or re-sets the Q flag ac-cord-ing to the LSB of the
 value. __set_saturation_occurred(0)
[44] [45]
Overfull \hbox (38.24889pt too wide) in paragraph at lines 3820--3820
[]\T1/lmtt/m/n/10 inline unsigned int count_sign(int32_t x) { return __clz(x ^ 
(x << 1)); }[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 3820--3820
[]  \T1/lmtt/m/n/10 unsigned int n = __clz(x & -x);   /* get the position of th
e last bit */[] 
[46] [47] [48]
Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_add(int32_t x, int32_t y) { return __qadd(x,
 y); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_mult(int16_t x, int16_t y) { return __qdbl(x
*y); }[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t add(int16_t x, int16_t y) { return (int16_t)(_
_qadd(x<<16, y<<16) >> 16); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t norm_l(int32_t x) { return __clz(x ^ (x<<1)) &
 31; }[] 

Overfull \hbox (14.09117pt too wide) in paragraph at lines 4028--4030
[]\T1/lmr/m/n/10 (-20) Availability of the SIMD in-trin-sics is in-di-cated by 
the __ARM_FEATURE_SIMD32
[49] [50] [51] [52] [53] [54] [55]
Overfull \hbox (64.49881pt too wide) in paragraph at lines 4559--4559
[]\T1/lmtt/m/n/10 int8x4_t max8x4(int8x4_t x, int8x4_t y) { __ssub8(x, y); retu
rn __sel(x, y); }[] 

Overfull \hbox (90.74873pt too wide) in paragraph at lines 4566--4566
[]\T1/lmtt/m/n/10 int16x2_t max16x2(int16x2_t x, int16x2_t y) { __usub16(x, y);
 return __sel(x, y); }[] 
[56]
Underfull \hbox (badness 1226) in paragraph at lines 4608--4616
[]\T1/lmr/m/n/10 (+20) The __rintn in-trin-sics per-form a float-ing point roun
d to in-te-gral, to

Underfull \hbox (badness 1789) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) near-est with ties to even. The __rintn in-trin-sic is ava
il-able when

Underfull \hbox (badness 2213) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_DIRECTED_ROUNDING is de-fined to 1. For
[57] [58] [59]
Overfull \hbox (32.9989pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uin
t32_t imm);[] 

Overfull \hbox (17.24895pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32
_t imm);[] 

Overfull \hbox (95.99872pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uin
t32_t m, uint32_t imm);[] 

Overfull \hbox (38.24889pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t imm);[] 

Overfull \hbox (22.49893pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint3
2_t imm);[] 

Overfull \hbox (101.2487pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t m, uint32_t imm);[] 
[60]
Overfull \hbox (59.24883pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx2a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t imm);[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3_u32(int coproc, uint32_t n, uint32_t m, u
int32_t imm);[] 

Overfull \hbox (122.24864pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t m, uint32_t imm);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx1da_u64(int coproc, uint64_t acc, uint32_t 
imm);[] 

Overfull \hbox (64.49881pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx2da_u64(int coproc, uint64_t acc, uint64_t 
m, uint32_t imm);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3d_u64(int coproc, uint64_t n, uint64_t m, 
uint32_t imm);[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3da_u64(int coproc, uint64_t acc, uint64_t 
n, uint64_t m, uint32_t imm);[] 

Overfull \hbox (22.49893pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1q_m(int coproc, T inactive, uint32_t imm, mve_pre
d16_t p);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2q_m(int coproc, T inactive, U n, uint32_t imm, mv
e_pred16_t p);[] 

Overfull \hbox (74.99878pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3q_m(int coproc, T inactive, U n, V m, uint32_t im
m, mve_pred16_t p);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1qa_m(int coproc, T acc, uint32_t imm, mve_pred16_
t p);[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2qa_m(int coproc, T acc, U n, uint32_t imm, mve_pr
ed16_t p);[] 

Overfull \hbox (53.99884pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3qa_m(int coproc, T acc, U n, V m, uint32_t imm, m
ve_pred16_t p);[] 
[61] [62]
Overfull \hbox (3.24202pt too wide) in paragraph at lines 4979--4985
\T1/lmr/m/n/10 (-20) These in-trin-sics are avail-able when __ARM_FEATURE_MEMOR
Y_TAGGING
[63] [64]
Underfull \hbox (badness 1019) in paragraph at lines 5191--5193
\T1/lmr/m/n/10 (+20) When spec-i-fy-ing a 32-bit sys-tem reg-is-ter to __arm_rs
r, __arm_rsrp,
[65] [66]

Package longtable Warning: Column widths have changed
(longtable)                in table 19 on input line 5335.


Package longtable Warning: Column widths have changed
(longtable)                in table 20 on input line 5365.


Package longtable Warning: Column widths have changed
(longtable)                in table 21 on input line 5423.

[67] [68] [69] [70] [71]

Package longtable Warning: Column widths have changed
(longtable)                in table 22 on input line 5645.

[72] [73] [74] [75] [76] [77] [78]
Overfull \hbox (56.56882pt too wide) in paragraph at lines 6094--6097
[]\T1/lmr/m/n/10 (-20) New SHA512 crypto in-struc-tions (avail-able if __ARM_FE
ATURE_SHA512) 

Overfull \hbox (36.96884pt too wide) in paragraph at lines 6097--6099
[]\T1/lmr/m/n/10 (-20) New SHA3 crypto in-struc-tions (avail-able if __ARM_FEAT
URE_SHA3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6099--6101
[]\T1/lmr/m/n/10 (-20) SM3 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6101--6103
[]\T1/lmr/m/n/10 (-20) SM4 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M4) 

Overfull \hbox (53.27693pt too wide) in paragraph at lines 6103--6105
[]\T1/lmr/m/n/10 (-20) New FML[A|S] in-struc-tions (avail-able if __ARM_FEATURE
_FP16_FML). 
[79] [80] [81]
Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 mve_pred16_t mask8 = 0x5555;        // Predicate every other 
byte.[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 
[82]
Overfull \hbox (0.21968pt too wide) in paragraph at lines 6336--6341
\T1/lmr/m/n/10 (-20) the __arm_ pre-fix. If the __ARM_MVE_PRESERVE_USER_NAMESPA
CE
[83] [84]
Overfull \hbox (1.68773pt too wide) in paragraph at lines 6465--6472
\T1/lmr/m/n/10 (-20) M-profile Vec-tor Ex-ten-sion sup-port is avail-able if th
e __ARM_FEATURE_MVE

Overfull \hbox (53.99884pt too wide) in paragraph at lines 6481--6481
[]  \T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availa
ble to use.  */[] 
[85] [86]
Overfull \hbox (43.49887pt too wide) in paragraph at lines 6588--6588
[]\T1/lmtt/m/n/10 int __attribute__((svc(0xAB))) system_call(int code, void con
st \*params);[] 
[87] [88]
Underfull \hbox (badness 10000) in paragraph at lines 6736--6738
[]\T1/lmr/m/n/10 (+20) __tcancel (_TM-FAIL-URE_RTRY | (fail-ure_reason & _TM-FA
IL-

Overfull \hbox (4.09041pt too wide) in paragraph at lines 6766--6767
[]\T1/lmr/bx/n/10 Instruction|  

Package longtable Warning: Column widths have changed
(longtable)                in table 23 on input line 6805.

[89]
Underfull \hbox (badness 1052) in paragraph at lines 6823--6826
[]\T1/lmr/m/n/10 (+20) ARMARMv8 Arm, Armv8-A Ref-er-ence Man-ual (Is-sue A.b), 
Arm

Underfull \hbox (badness 1242) in paragraph at lines 6883--6886
[]\T1/lmr/m/n/10 (+20) MVE-spec Arm, Arm v8-M Ar-chi-tec-ture Ref-er-ence Man-u
al, Arm
[90]

Package longtable Warning: Table widths have changed. Rerun LaTeX.

[91] (./tex2pdf.-cc69ef23c147effc/input.aux)

Package rerunfilecheck Warning: File `input.out' has changed.
(rerunfilecheck)                Rerun to get outlines right
(rerunfilecheck)                or use package `bookmark'.


LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.

 )
(see the transcript file for additional information)pdfTeX warning (dest): name
{ssec-TMEFailures} has been referenced but does not exist, replaced by a fixed 
one

pdfTeX warning (dest): name{ssec-bf16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-arith} has been referenced but does not e
xist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEON} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-swap} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-sysreg} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-nop} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{sec-Parallel-selection} has been referenced but doe
s not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Constant-arguments-to-intrinsics} has been refe
renced but does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Weak-linkage} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Imptype} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Pic} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-rng} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Pcs} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-CoProc} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-WMMX} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEONfp} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CDE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MVE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FPm} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16arg} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFP} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Uasih} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16FML} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SM4} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SM3} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA3} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA512} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA2} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-RDM} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-v8max} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATOMICS} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MTE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMulIns} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMul} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Sbahi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-LDREX} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-JCVT} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HID} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FMA} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-AES} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-DSPins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FrintIns} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Frint} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-DotIns} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Dot} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-v8rnd} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CrypE} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CRC32E} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CLZ} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-PAC} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-BTI} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-COMPLX} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Endi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Archp} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso2} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-TfACLE} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-LS64} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Fpdpi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-rand} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-crc32} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-BF16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{sec-TME-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-32SIMD} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Wsatin} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satin} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag2} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Mdpi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFPSIMD} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATisa} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{sec-Attributes-and-pragmas} has been referenced but
 does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-MVE-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-NEON-intrinsics} has been referenced but does n
ot exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Feature-test-macros} has been referenced but do
es not exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-bf16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-vectypes} has been referenced but does not exi
st, replaced by a fixed one

{/usr/share/texmf/fonts/enc/dvips/lm/lm-ts1.enc}{/usr/share/texmf/fonts/enc/dvi
ps/lm/lm-ec.enc}</usr/share/texmf/fonts/type1/public/lm/lmbx10.pfb></usr/share/
texmf/fonts/type1/public/lm/lmbx12.pfb></usr/share/texmf/fonts/type1/public/lm/
lmr10.pfb></usr/share/texmf/fonts/type1/public/lm/lmr17.pfb></usr/share/texmf/f
onts/type1/public/lm/lmri10.pfb></usr/share/texmf/fonts/type1/public/lm/lmtt10.
pfb>
Output written on ./tex2pdf.-cc69ef23c147effc/input.pdf (91 pages, 380822 bytes
).
Transcript written on ./tex2pdf.-cc69ef23c147effc/input.log.

[makePDF] Run #2
This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./tex2pdf.-cc69ef23c147effc/input.tex
LaTeX2e <2020-02-02> patch level 2
L3 programming layer <2020-02-14>
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2019/12/20 v1.4l Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifxetex.sty
(/usr/share/texlive/texmf-dist/tex/generic/iftex/iftex.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/fixltx2e.sty

Package fixltx2e Warning: fixltx2e is not required with releases after 2015
(fixltx2e)                All fixes are now in the LaTeX kernel.
(fixltx2e)                See the latexrelease package for details.

) (/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texmf/tex/latex/lm/t1lmr.fd))
(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty)
(/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-pdftex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/parskip/parskip.sty
(/usr/share/texlive/texmf-dist/tex/latex/kvoptions/kvoptions.sty
(/usr/share/texlive/texmf-dist/tex/generic/ltxcmds/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/kvsetkeys/kvsetkeys.sty))
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/latex/pdftexcmds/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/infwarerr/infwarerr.sty))
(/usr/share/texlive/texmf-dist/tex/generic/kvdefinekeys/kvdefinekeys.sty)
(/usr/share/texlive/texmf-dist/tex/generic/pdfescape/pdfescape.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hycolor/hycolor.sty)
(/usr/share/texlive/texmf-dist/tex/latex/letltxmacro/letltxmacro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/auxhook/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/generic/intcalc/intcalc.sty)
(/usr/share/texlive/texmf-dist/tex/generic/etexcmds/etexcmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty)
(/usr/share/texlive/texmf-dist/tex/generic/bitset/bitset.sty
(/usr/share/texlive/texmf-dist/tex/generic/bigintcalc/bigintcalc.sty))
(/usr/share/texlive/texmf-dist/tex/generic/atbegshi/atbegshi.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hpdftex.def
(/usr/share/texlive/texmf-dist/tex/latex/atveryend/atveryend.sty)
(/usr/share/texlive/texmf-dist/tex/latex/rerunfilecheck/rerunfilecheck.sty
(/usr/share/texlive/texmf-dist/tex/generic/uniquecounter/uniquecounter.sty)))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3backend/l3backend-pdfmode.def)
(./tex2pdf.-cc69ef23c147effc/input.aux)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-cmr.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/latex/refcount/refcount.sty)
(/usr/share/texlive/texmf-dist/tex/generic/gettitlestring/gettitlestring.sty))
(./tex2pdf.-cc69ef23c147effc/input.out) (./tex2pdf.-cc69ef23c147effc/input.out)
(/usr/share/texmf/tex/latex/lm/ot1lmr.fd)
(/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texmf/tex/latex/lm/omslmsy.fd)
(/usr/share/texmf/tex/latex/lm/omxlmex.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg)

LaTeX Warning: No \author given.

(./tex2pdf.-cc69ef23c147effc/input.toc [1{/var/lib/texmf/fonts/map/pdftex/updma
p/pdftex.map}] [2] [3] [4] [5]) (/usr/share/texmf/tex/latex/lm/ts1lmr.fd)
[6] [7]
Overfull \hbox (0.94044pt too wide) in paragraph at lines 183--184
[]\T1/lmr/bx/n/10 Issue|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 194--195
[]\T1/lmr/m/n/10 (-20) 11/11/11|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 196--197
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 203--204
[]\T1/lmr/m/n/10 (-20) 13/11/13|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 205--206
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 213--214
[]\T1/lmr/m/n/10 (-20) 09/05/14|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 222--223
[]\T1/lmr/m/n/10 (-20) 24/03/16|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 231--232
[]\T1/lmr/m/n/10 (-20) 02/06/17|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 233--234
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 240--241
[]\T1/lmr/m/n/10 (-20) 30/04/18|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 242--243
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 249--250
[]\T1/lmr/m/n/10 (-20) 30/03/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 251--252
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 259--260
[]\T1/lmr/m/n/10 (-20) 30/06/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 261--262
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 267--268
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 269--270
[]\T1/lmr/m/n/10 (-20) 30/09/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 271--272
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 276--277
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 278--279
[]\T1/lmr/m/n/10 (-20) 31/12/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 280--281
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 285--286
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 287--288
[]\T1/lmr/m/n/10 (-20) 31/05/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 289--290
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 294--295
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 296--297
[]\T1/lmr/m/n/10 (-20) 31/10/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 298--299
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (7.71986pt too wide) in paragraph at lines 303--304
[]\T1/lmr/m/n/10 (-20) 2021Q2|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 307--308
[]\T1/lmr/m/n/10 (-20) Arm|  
[8] [9] [10] [11]
Overfull \hbox (28.25319pt too wide) in paragraph at lines 667--673
\T1/lmr/m/n/10 (-20) implementation-defined. The pre-de-fined macro __ARM_SIZEO
F_MINIMAL_ENUM

Overfull \hbox (15.23343pt too wide) in paragraph at lines 674--678
[]\T1/lmr/m/n/10 (-20) wchar_t may be 2 or 4 bytes. The pre-de-fined macro __AR
M_SIZEOF_WCHAR_T
[12] (/usr/share/texmf/tex/latex/lm/t1lmtt.fd)
Overfull \hbox (1.499pt too wide) in paragraph at lines 743--743
[]\T1/lmtt/m/n/10 #define __rev(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8
) | \[] 
[13]
Overfull \hbox (10.78079pt too wide) in paragraph at lines 783--789
\T1/lmr/m/n/10 (-20) hide the def-i-ni-tion of the user names-pace vari-ants. T
he __ARM_FEATURE_MVE

Overfull \hbox (43.49887pt too wide) in paragraph at lines 798--798
[]\T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availabl
e to use.  */[] 
[14]
Overfull \hbox (22.49893pt too wide) in paragraph at lines 862--862
[]\T1/lmtt/m/n/10 // UINT64_C not defined here since we did not set __STDC_FORM
AT_MACROS[] 
[15]
Underfull \hbox (badness 1152) in paragraph at lines 913--919
[]\T1/lmr/m/n/10 (+20) The for-mat in use can be se-lected at run-time but ACLE
 as-sumes it

Overfull \hbox (22.7798pt too wide) in paragraph at lines 913--919
\T1/lmr/m/n/10 (-20) __ARM_FP16_FORMAT_IEEE and __ARM_FP16_FORMAT_ALTERNATIVE

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]            \T1/lmtt/m/n/10 Operation takes place with (at least) 32-bit prec
ision.  */[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]                       \T1/lmtt/m/n/10 Operation takes place with 16-bit prec
ision.  */[] 
[16] [17]
Underfull \hbox (badness 1009) in paragraph at lines 1009--1016
\T1/lmr/m/n/10 (+20) a dif-fer-ent mean-ing when us-ing the Arm al-ter-na-tive 
for-mat for 16-bit

Overfull \hbox (37.85806pt too wide) in paragraph at lines 1044--1051
[]\T1/lmr/m/n/10 (-20) The __bf16 type is only avail-able when the __ARM_BF16_F
ORMAT_ALTERNATIVE
[18]
Underfull \hbox (badness 5667) in paragraph at lines 1082--1086
\T1/lmr/m/n/10 (+20) The rec-om-mended CPU ar-chi-tec-ture names are as spec-i-
fied un-der

Overfull \hbox (3.14313pt too wide) in alignment at lines 1090--1092
 [] [] [] [] [] 

Overfull \hbox (1.11794pt too wide) in paragraph at lines 1138--1139
[]\T1/lmr/m/n/10 (-20) Armv5TE|  

Overfull \hbox (6.15416pt too wide) in paragraph at lines 1149--1150
[]\T1/lmr/m/n/10 (-20) Armv5TEJ|  

Overfull \hbox (3.14313pt too wide) in alignment at lines 1092--1281
 [] [] [] [] [] 
[19]
Overfull \hbox (4.20006pt too wide) in paragraph at lines 1322--1323
[]\T1/lmtt/m/n/10 VFPv3_FP16|  

Overfull \hbox (25.2pt too wide) in paragraph at lines 1336--1337
[]\T1/lmtt/m/n/10 VFPv3_D16_FP16|  

Overfull \hbox (14.70003pt too wide) in paragraph at lines 1343--1344
[]\T1/lmtt/m/n/10 VFPv3_SP_D16|  
[20] [21] [22] [23]
Overfull \hbox (30.74413pt too wide) in paragraph at lines 1616--1620
[]\T1/lmr/m/n/10 (-20) Intrinsics as-so-ci-ated with the Q-bit and their fea-tu
re macro __ARM_FEATURE_QBIT
[24] (/usr/share/texmf/tex/latex/lm/ts1lmtt.fd) [25]
Overfull \hbox (50.47176pt too wide) in alignment at lines 1712--1714
 [] [] [] 

Overfull \hbox (50.47176pt too wide) in alignment at lines 1714--1725
 [] [] [] 
[26] [27] [28]
Overfull \hbox (9.81912pt too wide) in paragraph at lines 1918--1922
\T1/lmr/m/n/10 (-20) avail-able. Avail-able when __ARM_FEATURE_FP16_SCALAR_ARIT
HMETIC. 
[29] [30]
Underfull \hbox (badness 5607) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_COPROC is de-fined as a bitmap to in-di-cate


Underfull \hbox (badness 1715) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) the pres-ence of co-pro-ces-sor in-trin-sics for the tar-g
et ar-chi-tec-ture. If
[31]
Overfull \hbox (4.02765pt too wide) in paragraph at lines 2109--2110
[]\T1/lmr/bx/n/10 Value|  
[32] [33]
Overfull \hbox (5.29768pt too wide) in alignment at lines 2281--2286
 [] [] [] 

Overfull \hbox (5.29768pt too wide) in alignment at lines 2286--2315
 [] [] [] 

Overfull \hbox (26.40143pt too wide) in paragraph at lines 2328--2329
[]\T1/lmr/bx/n/10 Example|  

Overfull \hbox (17.85016pt too wide) in paragraph at lines 2470--2472
[]\T1/lmtt/m/n/10 __ARM_FEATURE_DIRECTED_ROUNDING 

Overfull \hbox (4.11879pt too wide) in paragraph at lines 2546--2547
[]\T1/lmr/m/n/10 (-20) 0x0F|  

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2559--2561
[]\T1/lmtt/m/n/10 __ARM_FEATURE_MEMORY_TAGGING 

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2575--2577
[]\T1/lmtt/m/n/10 __ARM_FEATURE_NUMERIC_MAXMIN 
[34]
Overfull \hbox (4.79892pt too wide) in paragraph at lines 2692--2693
[]\T1/lmr/m/n/10 (-20) 0x0C|  

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2695--2697
[]\T1/lmtt/m/n/10 __ARM_FP16_FORMAT_ALTERNATIVE 

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2727--2729
[]\T1/lmtt/m/n/10 __ARM_BF16_FORMAT_ALTERNATIVE 

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2756--2757
[]\T1/lmr/m/n/10 (-20) 0x01|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2780--2781
[]\T1/lmr/m/n/10 (-20) 0x04|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2795--2796
[]\T1/lmr/m/n/10 (-20) 0x01|  
[35] [36] [37] [38] [39] [40]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3090--3090
[]\T1/lmtt/m/n/10 int posix_memalign(void **memptr, size_t alignment, size_t si
ze );[] 
[41]
Overfull \hbox (23.57977pt too wide) in alignment at lines 3217--3219
 [] [] [] [] 

Overfull \hbox (23.57977pt too wide) in alignment at lines 3219--3235
 [] [] [] [] 
[42] [43]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3310--3310
[]  \T1/lmtt/m/n/10 /* issue full-system memory barrier: read of value is guara
nteed[] 
[44] [45] [46]
Overfull \hbox (0.57954pt too wide) in paragraph at lines 3516--3517
[]\T1/lmr/bx/n/10 Value|  
[47] [48]
Overfull \hbox (33.71658pt too wide) in paragraph at lines 3652--3656
[]\T1/lmr/m/n/10 (-20) Sets or re-sets the Q flag ac-cord-ing to the LSB of the
 value. __set_saturation_occurred(0)
[49] [50] [51]
Overfull \hbox (38.24889pt too wide) in paragraph at lines 3820--3820
[]\T1/lmtt/m/n/10 inline unsigned int count_sign(int32_t x) { return __clz(x ^ 
(x << 1)); }[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 3820--3820
[]  \T1/lmtt/m/n/10 unsigned int n = __clz(x & -x);   /* get the position of th
e last bit */[] 
[52] [53]
Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_add(int32_t x, int32_t y) { return __qadd(x,
 y); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_mult(int16_t x, int16_t y) { return __qdbl(x
*y); }[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t add(int16_t x, int16_t y) { return (int16_t)(_
_qadd(x<<16, y<<16) >> 16); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t norm_l(int32_t x) { return __clz(x ^ (x<<1)) &
 31; }[] 
[54]
Overfull \hbox (14.09117pt too wide) in paragraph at lines 4028--4030
[]\T1/lmr/m/n/10 (-20) Availability of the SIMD in-trin-sics is in-di-cated by 
the __ARM_FEATURE_SIMD32
[55] [56] [57] [58] [59] [60] [61]
Overfull \hbox (64.49881pt too wide) in paragraph at lines 4559--4559
[]\T1/lmtt/m/n/10 int8x4_t max8x4(int8x4_t x, int8x4_t y) { __ssub8(x, y); retu
rn __sel(x, y); }[] 

Overfull \hbox (90.74873pt too wide) in paragraph at lines 4566--4566
[]\T1/lmtt/m/n/10 int16x2_t max16x2(int16x2_t x, int16x2_t y) { __usub16(x, y);
 return __sel(x, y); }[] 

Underfull \hbox (badness 1226) in paragraph at lines 4608--4616
[]\T1/lmr/m/n/10 (+20) The __rintn in-trin-sics per-form a float-ing point roun
d to in-te-gral, to

Underfull \hbox (badness 1789) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) near-est with ties to even. The __rintn in-trin-sic is ava
il-able when

Underfull \hbox (badness 2213) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_DIRECTED_ROUNDING is de-fined to 1. For
[62] [63] [64] [65]
Overfull \hbox (32.9989pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uin
t32_t imm);[] 

Overfull \hbox (17.24895pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32
_t imm);[] 

Overfull \hbox (95.99872pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uin
t32_t m, uint32_t imm);[] 

Overfull \hbox (38.24889pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t imm);[] 

Overfull \hbox (22.49893pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint3
2_t imm);[] 

Overfull \hbox (101.2487pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t m, uint32_t imm);[] 

Overfull \hbox (59.24883pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx2a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t imm);[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3_u32(int coproc, uint32_t n, uint32_t m, u
int32_t imm);[] 

Overfull \hbox (122.24864pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t m, uint32_t imm);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx1da_u64(int coproc, uint64_t acc, uint32_t 
imm);[] 

Overfull \hbox (64.49881pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx2da_u64(int coproc, uint64_t acc, uint64_t 
m, uint32_t imm);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3d_u64(int coproc, uint64_t n, uint64_t m, 
uint32_t imm);[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3da_u64(int coproc, uint64_t acc, uint64_t 
n, uint64_t m, uint32_t imm);[] 
[66]
Overfull \hbox (22.49893pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1q_m(int coproc, T inactive, uint32_t imm, mve_pre
d16_t p);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2q_m(int coproc, T inactive, U n, uint32_t imm, mv
e_pred16_t p);[] 

Overfull \hbox (74.99878pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3q_m(int coproc, T inactive, U n, V m, uint32_t im
m, mve_pred16_t p);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1qa_m(int coproc, T acc, uint32_t imm, mve_pred16_
t p);[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2qa_m(int coproc, T acc, U n, uint32_t imm, mve_pr
ed16_t p);[] 

Overfull \hbox (53.99884pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3qa_m(int coproc, T acc, U n, V m, uint32_t imm, m
ve_pred16_t p);[] 
[67]
Overfull \hbox (3.24202pt too wide) in paragraph at lines 4979--4985
\T1/lmr/m/n/10 (-20) These in-trin-sics are avail-able when __ARM_FEATURE_MEMOR
Y_TAGGING
[68] [69] [70]
Underfull \hbox (badness 1019) in paragraph at lines 5191--5193
\T1/lmr/m/n/10 (+20) When spec-i-fy-ing a 32-bit sys-tem reg-is-ter to __arm_rs
r, __arm_rsrp,
[71] [72] [73] [74] [75] [76] [77] [78] [79] [80] [81] [82] [83]
Overfull \hbox (56.56882pt too wide) in paragraph at lines 6094--6097
[]\T1/lmr/m/n/10 (-20) New SHA512 crypto in-struc-tions (avail-able if __ARM_FE
ATURE_SHA512) 

Overfull \hbox (36.96884pt too wide) in paragraph at lines 6097--6099
[]\T1/lmr/m/n/10 (-20) New SHA3 crypto in-struc-tions (avail-able if __ARM_FEAT
URE_SHA3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6099--6101
[]\T1/lmr/m/n/10 (-20) SM3 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6101--6103
[]\T1/lmr/m/n/10 (-20) SM4 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M4) 

Overfull \hbox (53.27693pt too wide) in paragraph at lines 6103--6105
[]\T1/lmr/m/n/10 (-20) New FML[A|S] in-struc-tions (avail-able if __ARM_FEATURE
_FP16_FML). 
[84] [85] [86] [87]
Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 mve_pred16_t mask8 = 0x5555;        // Predicate every other 
byte.[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 

Overfull \hbox (0.21968pt too wide) in paragraph at lines 6336--6341
\T1/lmr/m/n/10 (-20) the __arm_ pre-fix. If the __ARM_MVE_PRESERVE_USER_NAMESPA
CE
[88] [89]
Overfull \hbox (1.68773pt too wide) in paragraph at lines 6465--6472
\T1/lmr/m/n/10 (-20) M-profile Vec-tor Ex-ten-sion sup-port is avail-able if th
e __ARM_FEATURE_MVE

Overfull \hbox (53.99884pt too wide) in paragraph at lines 6481--6481
[]  \T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availa
ble to use.  */[] 
[90] [91]
Overfull \hbox (43.49887pt too wide) in paragraph at lines 6588--6588
[]\T1/lmtt/m/n/10 int __attribute__((svc(0xAB))) system_call(int code, void con
st \*params);[] 
[92] [93]
Underfull \hbox (badness 10000) in paragraph at lines 6736--6738
[]\T1/lmr/m/n/10 (+20) __tcancel (_TM-FAIL-URE_RTRY | (fail-ure_reason & _TM-FA
IL-
[94]
Overfull \hbox (4.09041pt too wide) in paragraph at lines 6766--6767
[]\T1/lmr/bx/n/10 Instruction|  

Underfull \hbox (badness 1052) in paragraph at lines 6823--6826
[]\T1/lmr/m/n/10 (+20) ARMARMv8 Arm, Armv8-A Ref-er-ence Man-ual (Is-sue A.b), 
Arm
[95]
Underfull \hbox (badness 1242) in paragraph at lines 6883--6886
[]\T1/lmr/m/n/10 (+20) MVE-spec Arm, Arm v8-M Ar-chi-tec-ture Ref-er-ence Man-u
al, Arm
[96] (./tex2pdf.-cc69ef23c147effc/input.aux)

LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.

 )
(see the transcript file for additional information)pdfTeX warning (dest): name
{ssec-TMEFailures} has been referenced but does not exist, replaced by a fixed 
one

pdfTeX warning (dest): name{ssec-bf16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-arith} has been referenced but does not e
xist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEON} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-swap} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-sysreg} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-nop} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{sec-Parallel-selection} has been referenced but doe
s not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Constant-arguments-to-intrinsics} has been refe
renced but does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Weak-linkage} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Imptype} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Pic} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-rng} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Pcs} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-CoProc} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-WMMX} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEONfp} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CDE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MVE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FPm} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16arg} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFP} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Uasih} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16FML} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SM4} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SM3} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA3} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA512} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA2} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-RDM} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-v8max} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATOMICS} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MTE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMulIns} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMul} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Sbahi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-LDREX} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-JCVT} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HID} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FMA} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-AES} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-DSPins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FrintIns} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Frint} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-DotIns} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Dot} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-v8rnd} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CrypE} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CRC32E} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CLZ} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-PAC} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-BTI} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-COMPLX} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Endi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Archp} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso2} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-TfACLE} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-LS64} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Fpdpi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-rand} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-crc32} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-BF16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{sec-TME-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-32SIMD} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Wsatin} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satin} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag2} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Mdpi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFPSIMD} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATisa} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{sec-Attributes-and-pragmas} has been referenced but
 does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-MVE-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-NEON-intrinsics} has been referenced but does n
ot exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Feature-test-macros} has been referenced but do
es not exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-bf16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-vectypes} has been referenced but does not exi
st, replaced by a fixed one

{/usr/share/texmf/fonts/enc/dvips/lm/lm-ts1.enc}{/usr/share/texmf/fonts/enc/dvi
ps/lm/lm-ec.enc}</usr/share/texmf/fonts/type1/public/lm/lmbx10.pfb></usr/share/
texmf/fonts/type1/public/lm/lmbx12.pfb></usr/share/texmf/fonts/type1/public/lm/
lmr10.pfb></usr/share/texmf/fonts/type1/public/lm/lmr17.pfb></usr/share/texmf/f
onts/type1/public/lm/lmri10.pfb></usr/share/texmf/fonts/type1/public/lm/lmtt10.
pfb>
Output written on ./tex2pdf.-cc69ef23c147effc/input.pdf (96 pages, 410014 bytes
).
Transcript written on ./tex2pdf.-cc69ef23c147effc/input.log.

[makePDF] Run #3
This is pdfTeX, Version 3.14159265-2.6-1.40.20 (TeX Live 2019/Debian) (preloaded format=pdflatex)
 restricted \write18 enabled.
entering extended mode
(./tex2pdf.-cc69ef23c147effc/input.tex
LaTeX2e <2020-02-02> patch level 2
L3 programming layer <2020-02-14>
(/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2019/12/20 v1.4l Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo))
(/usr/share/texmf/tex/latex/lm/lmodern.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty))
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty)
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifxetex.sty
(/usr/share/texlive/texmf-dist/tex/generic/iftex/iftex.sty))
(/usr/share/texlive/texmf-dist/tex/generic/iftex/ifluatex.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/fixltx2e.sty

Package fixltx2e Warning: fixltx2e is not required with releases after 2015
(fixltx2e)                All fixes are now in the LaTeX kernel.
(fixltx2e)                See the latexrelease package for details.

) (/usr/share/texlive/texmf-dist/tex/latex/base/fontenc.sty
(/usr/share/texmf/tex/latex/lm/t1lmr.fd))
(/usr/share/texlive/texmf-dist/tex/latex/base/inputenc.sty)
(/usr/share/texlive/texmf-dist/tex/latex/base/textcomp.sty)
(/usr/share/texlive/texmf-dist/tex/latex/upquote/upquote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.sty
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype-pdftex.def)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/microtype.cfg))
(/usr/share/texlive/texmf-dist/tex/latex/parskip/parskip.sty
(/usr/share/texlive/texmf-dist/tex/latex/kvoptions/kvoptions.sty
(/usr/share/texlive/texmf-dist/tex/generic/ltxcmds/ltxcmds.sty)
(/usr/share/texlive/texmf-dist/tex/generic/kvsetkeys/kvsetkeys.sty))
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hyperref.sty
(/usr/share/texlive/texmf-dist/tex/latex/pdftexcmds/pdftexcmds.sty
(/usr/share/texlive/texmf-dist/tex/generic/infwarerr/infwarerr.sty))
(/usr/share/texlive/texmf-dist/tex/generic/kvdefinekeys/kvdefinekeys.sty)
(/usr/share/texlive/texmf-dist/tex/generic/pdfescape/pdfescape.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hycolor/hycolor.sty)
(/usr/share/texlive/texmf-dist/tex/latex/letltxmacro/letltxmacro.sty)
(/usr/share/texlive/texmf-dist/tex/latex/auxhook/auxhook.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/pd1enc.def)
(/usr/share/texlive/texmf-dist/tex/generic/intcalc/intcalc.sty)
(/usr/share/texlive/texmf-dist/tex/generic/etexcmds/etexcmds.sty)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/puenc.def)
(/usr/share/texlive/texmf-dist/tex/latex/url/url.sty)
(/usr/share/texlive/texmf-dist/tex/generic/bitset/bitset.sty
(/usr/share/texlive/texmf-dist/tex/generic/bigintcalc/bigintcalc.sty))
(/usr/share/texlive/texmf-dist/tex/generic/atbegshi/atbegshi.sty))
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/hpdftex.def
(/usr/share/texlive/texmf-dist/tex/latex/atveryend/atveryend.sty)
(/usr/share/texlive/texmf-dist/tex/latex/rerunfilecheck/rerunfilecheck.sty
(/usr/share/texlive/texmf-dist/tex/generic/uniquecounter/uniquecounter.sty)))
(/usr/share/texlive/texmf-dist/tex/latex/tools/longtable.sty)
(/usr/share/texlive/texmf-dist/tex/latex/booktabs/booktabs.sty)
(/usr/share/texlive/texmf-dist/tex/latex/mdwtools/footnote.sty)
(/usr/share/texlive/texmf-dist/tex/latex/l3backend/l3backend-pdfmode.def)
(./tex2pdf.-cc69ef23c147effc/input.aux)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-cmr.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/hyperref/nameref.sty
(/usr/share/texlive/texmf-dist/tex/latex/refcount/refcount.sty)
(/usr/share/texlive/texmf-dist/tex/generic/gettitlestring/gettitlestring.sty))
(./tex2pdf.-cc69ef23c147effc/input.out) (./tex2pdf.-cc69ef23c147effc/input.out)
(/usr/share/texmf/tex/latex/lm/ot1lmr.fd)
(/usr/share/texmf/tex/latex/lm/omllmm.fd)
(/usr/share/texmf/tex/latex/lm/omslmsy.fd)
(/usr/share/texmf/tex/latex/lm/omxlmex.fd)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msa.cfg)
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd)
(/usr/share/texlive/texmf-dist/tex/latex/microtype/mt-msb.cfg)

LaTeX Warning: No \author given.

(./tex2pdf.-cc69ef23c147effc/input.toc [1{/var/lib/texmf/fonts/map/pdftex/updma
p/pdftex.map}] [2] [3] [4] [5]) (/usr/share/texmf/tex/latex/lm/ts1lmr.fd)
[6] [7]
Overfull \hbox (0.94044pt too wide) in paragraph at lines 183--184
[]\T1/lmr/bx/n/10 Issue|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 194--195
[]\T1/lmr/m/n/10 (-20) 11/11/11|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 196--197
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (14.54742pt too wide) in paragraph at lines 203--204
[]\T1/lmr/m/n/10 (-20) 13/11/13|  

Overfull \hbox (0.5846pt too wide) in paragraph at lines 205--206
[]\T1/lmr/m/n/10 (-20) AG|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 213--214
[]\T1/lmr/m/n/10 (-20) 09/05/14|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 222--223
[]\T1/lmr/m/n/10 (-20) 24/03/16|  

Overfull \hbox (15.04742pt too wide) in paragraph at lines 231--232
[]\T1/lmr/m/n/10 (-20) 02/06/17|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 233--234
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 240--241
[]\T1/lmr/m/n/10 (-20) 30/04/18|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 242--243
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 249--250
[]\T1/lmr/m/n/10 (-20) 30/03/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 251--252
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (14.79742pt too wide) in paragraph at lines 259--260
[]\T1/lmr/m/n/10 (-20) 30/06/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 261--262
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 267--268
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 269--270
[]\T1/lmr/m/n/10 (-20) 30/09/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 271--272
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 276--277
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 278--279
[]\T1/lmr/m/n/10 (-20) 31/12/19|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 280--281
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 285--286
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 287--288
[]\T1/lmr/m/n/10 (-20) 31/05/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 289--290
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (2.41164pt too wide) in paragraph at lines 294--295
[]\T1/lmr/m/n/10 (-20) ACLE 

Overfull \hbox (14.79742pt too wide) in paragraph at lines 296--297
[]\T1/lmr/m/n/10 (-20) 31/10/20|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 298--299
[]\T1/lmr/m/n/10 (-20) Arm|  

Overfull \hbox (7.71986pt too wide) in paragraph at lines 303--304
[]\T1/lmr/m/n/10 (-20) 2021Q2|  

Overfull \hbox (5.17699pt too wide) in paragraph at lines 307--308
[]\T1/lmr/m/n/10 (-20) Arm|  
[8] [9] [10] [11]
Overfull \hbox (28.25319pt too wide) in paragraph at lines 667--673
\T1/lmr/m/n/10 (-20) implementation-defined. The pre-de-fined macro __ARM_SIZEO
F_MINIMAL_ENUM

Overfull \hbox (15.23343pt too wide) in paragraph at lines 674--678
[]\T1/lmr/m/n/10 (-20) wchar_t may be 2 or 4 bytes. The pre-de-fined macro __AR
M_SIZEOF_WCHAR_T
[12] (/usr/share/texmf/tex/latex/lm/t1lmtt.fd)
Overfull \hbox (1.499pt too wide) in paragraph at lines 743--743
[]\T1/lmtt/m/n/10 #define __rev(x) ((((x) & 0xff) << 24) | (((x) & 0xff00) << 8
) | \[] 
[13]
Overfull \hbox (10.78079pt too wide) in paragraph at lines 783--789
\T1/lmr/m/n/10 (-20) hide the def-i-ni-tion of the user names-pace vari-ants. T
he __ARM_FEATURE_MVE

Overfull \hbox (43.49887pt too wide) in paragraph at lines 798--798
[]\T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availabl
e to use.  */[] 
[14]
Overfull \hbox (22.49893pt too wide) in paragraph at lines 862--862
[]\T1/lmtt/m/n/10 // UINT64_C not defined here since we did not set __STDC_FORM
AT_MACROS[] 
[15]
Underfull \hbox (badness 1152) in paragraph at lines 913--919
[]\T1/lmr/m/n/10 (+20) The for-mat in use can be se-lected at run-time but ACLE
 as-sumes it

Overfull \hbox (22.7798pt too wide) in paragraph at lines 913--919
\T1/lmr/m/n/10 (-20) __ARM_FP16_FORMAT_IEEE and __ARM_FP16_FORMAT_ALTERNATIVE

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]            \T1/lmtt/m/n/10 Operation takes place with (at least) 32-bit prec
ision.  */[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 935--935
[]                       \T1/lmtt/m/n/10 Operation takes place with 16-bit prec
ision.  */[] 
[16] [17]
Underfull \hbox (badness 1009) in paragraph at lines 1009--1016
\T1/lmr/m/n/10 (+20) a dif-fer-ent mean-ing when us-ing the Arm al-ter-na-tive 
for-mat for 16-bit

Overfull \hbox (37.85806pt too wide) in paragraph at lines 1044--1051
[]\T1/lmr/m/n/10 (-20) The __bf16 type is only avail-able when the __ARM_BF16_F
ORMAT_ALTERNATIVE
[18]
Underfull \hbox (badness 5667) in paragraph at lines 1082--1086
\T1/lmr/m/n/10 (+20) The rec-om-mended CPU ar-chi-tec-ture names are as spec-i-
fied un-der

Overfull \hbox (3.14313pt too wide) in alignment at lines 1090--1092
 [] [] [] [] [] 

Overfull \hbox (1.11794pt too wide) in paragraph at lines 1138--1139
[]\T1/lmr/m/n/10 (-20) Armv5TE|  

Overfull \hbox (6.15416pt too wide) in paragraph at lines 1149--1150
[]\T1/lmr/m/n/10 (-20) Armv5TEJ|  

Overfull \hbox (3.14313pt too wide) in alignment at lines 1092--1281
 [] [] [] [] [] 
[19]
Overfull \hbox (4.20006pt too wide) in paragraph at lines 1322--1323
[]\T1/lmtt/m/n/10 VFPv3_FP16|  

Overfull \hbox (25.2pt too wide) in paragraph at lines 1336--1337
[]\T1/lmtt/m/n/10 VFPv3_D16_FP16|  

Overfull \hbox (14.70003pt too wide) in paragraph at lines 1343--1344
[]\T1/lmtt/m/n/10 VFPv3_SP_D16|  
[20] [21] [22] [23]
Overfull \hbox (30.74413pt too wide) in paragraph at lines 1616--1620
[]\T1/lmr/m/n/10 (-20) Intrinsics as-so-ci-ated with the Q-bit and their fea-tu
re macro __ARM_FEATURE_QBIT
[24] (/usr/share/texmf/tex/latex/lm/ts1lmtt.fd) [25]
Overfull \hbox (50.47176pt too wide) in alignment at lines 1712--1714
 [] [] [] 

Overfull \hbox (50.47176pt too wide) in alignment at lines 1714--1725
 [] [] [] 
[26] [27] [28]
Overfull \hbox (9.81912pt too wide) in paragraph at lines 1918--1922
\T1/lmr/m/n/10 (-20) avail-able. Avail-able when __ARM_FEATURE_FP16_SCALAR_ARIT
HMETIC. 
[29] [30]
Underfull \hbox (badness 5607) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_COPROC is de-fined as a bitmap to in-di-cate


Underfull \hbox (badness 1715) in paragraph at lines 2097--2102
\T1/lmr/m/n/10 (+20) the pres-ence of co-pro-ces-sor in-trin-sics for the tar-g
et ar-chi-tec-ture. If
[31]
Overfull \hbox (4.02765pt too wide) in paragraph at lines 2109--2110
[]\T1/lmr/bx/n/10 Value|  
[32] [33]
Overfull \hbox (5.29768pt too wide) in alignment at lines 2281--2286
 [] [] [] 

Overfull \hbox (5.29768pt too wide) in alignment at lines 2286--2315
 [] [] [] 

Overfull \hbox (26.40143pt too wide) in paragraph at lines 2328--2329
[]\T1/lmr/bx/n/10 Example|  

Overfull \hbox (17.85016pt too wide) in paragraph at lines 2470--2472
[]\T1/lmtt/m/n/10 __ARM_FEATURE_DIRECTED_ROUNDING 

Overfull \hbox (4.11879pt too wide) in paragraph at lines 2546--2547
[]\T1/lmr/m/n/10 (-20) 0x0F|  

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2559--2561
[]\T1/lmtt/m/n/10 __ARM_FEATURE_MEMORY_TAGGING 

Overfull \hbox (2.1002pt too wide) in paragraph at lines 2575--2577
[]\T1/lmtt/m/n/10 __ARM_FEATURE_NUMERIC_MAXMIN 
[34]
Overfull \hbox (4.79892pt too wide) in paragraph at lines 2692--2693
[]\T1/lmr/m/n/10 (-20) 0x0C|  

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2695--2697
[]\T1/lmtt/m/n/10 __ARM_FP16_FORMAT_ALTERNATIVE 

Overfull \hbox (7.35019pt too wide) in paragraph at lines 2727--2729
[]\T1/lmtt/m/n/10 __ARM_BF16_FORMAT_ALTERNATIVE 

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2756--2757
[]\T1/lmr/m/n/10 (-20) 0x01|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2780--2781
[]\T1/lmr/m/n/10 (-20) 0x04|  

Overfull \hbox (2.62135pt too wide) in paragraph at lines 2795--2796
[]\T1/lmr/m/n/10 (-20) 0x01|  
[35] [36] [37] [38] [39] [40]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3090--3090
[]\T1/lmtt/m/n/10 int posix_memalign(void **memptr, size_t alignment, size_t si
ze );[] 
[41]
Overfull \hbox (23.57977pt too wide) in alignment at lines 3217--3219
 [] [] [] [] 

Overfull \hbox (23.57977pt too wide) in alignment at lines 3219--3235
 [] [] [] [] 
[42] [43]
Overfull \hbox (1.499pt too wide) in paragraph at lines 3310--3310
[]  \T1/lmtt/m/n/10 /* issue full-system memory barrier: read of value is guara
nteed[] 
[44] [45] [46]
Overfull \hbox (0.57954pt too wide) in paragraph at lines 3516--3517
[]\T1/lmr/bx/n/10 Value|  
[47] [48]
Overfull \hbox (33.71658pt too wide) in paragraph at lines 3652--3656
[]\T1/lmr/m/n/10 (-20) Sets or re-sets the Q flag ac-cord-ing to the LSB of the
 value. __set_saturation_occurred(0)
[49] [50] [51]
Overfull \hbox (38.24889pt too wide) in paragraph at lines 3820--3820
[]\T1/lmtt/m/n/10 inline unsigned int count_sign(int32_t x) { return __clz(x ^ 
(x << 1)); }[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 3820--3820
[]  \T1/lmtt/m/n/10 unsigned int n = __clz(x & -x);   /* get the position of th
e last bit */[] 
[52] [53]
Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_add(int32_t x, int32_t y) { return __qadd(x,
 y); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int32_t L_mult(int16_t x, int16_t y) { return __qdbl(x
*y); }[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t add(int16_t x, int16_t y) { return (int16_t)(_
_qadd(x<<16, y<<16) >> 16); }[] 

Overfull \hbox (6.74898pt too wide) in paragraph at lines 4005--4005
[]\T1/lmtt/m/n/10 inline int16_t norm_l(int32_t x) { return __clz(x ^ (x<<1)) &
 31; }[] 
[54]
Overfull \hbox (14.09117pt too wide) in paragraph at lines 4028--4030
[]\T1/lmr/m/n/10 (-20) Availability of the SIMD in-trin-sics is in-di-cated by 
the __ARM_FEATURE_SIMD32
[55] [56] [57] [58] [59] [60] [61]
Overfull \hbox (64.49881pt too wide) in paragraph at lines 4559--4559
[]\T1/lmtt/m/n/10 int8x4_t max8x4(int8x4_t x, int8x4_t y) { __ssub8(x, y); retu
rn __sel(x, y); }[] 

Overfull \hbox (90.74873pt too wide) in paragraph at lines 4566--4566
[]\T1/lmtt/m/n/10 int16x2_t max16x2(int16x2_t x, int16x2_t y) { __usub16(x, y);
 return __sel(x, y); }[] 

Underfull \hbox (badness 1226) in paragraph at lines 4608--4616
[]\T1/lmr/m/n/10 (+20) The __rintn in-trin-sics per-form a float-ing point roun
d to in-te-gral, to

Underfull \hbox (badness 1789) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) near-est with ties to even. The __rintn in-trin-sic is ava
il-able when

Underfull \hbox (badness 2213) in paragraph at lines 4608--4616
\T1/lmr/m/n/10 (+20) __ARM_FEATURE_DIRECTED_ROUNDING is de-fined to 1. For
[62] [63] [64] [65]
Overfull \hbox (32.9989pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx2a(int coproc, uint32_t acc, uint32_t n, uin
t32_t imm);[] 

Overfull \hbox (17.24895pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3(int coproc, uint32_t n, uint32_t m, uint32
_t imm);[] 

Overfull \hbox (95.99872pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint32_t __arm_cx3a(int coproc, uint32_t acc, uint32_t n, uin
t32_t m, uint32_t imm);[] 

Overfull \hbox (38.24889pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx2da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t imm);[] 

Overfull \hbox (22.49893pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3d(int coproc, uint32_t n, uint32_t m, uint3
2_t imm);[] 

Overfull \hbox (101.2487pt too wide) in paragraph at lines 4853--4853
[]\T1/lmtt/m/n/10 uint64_t __arm_cx3da(int coproc, uint64_t acc, uint32_t n, ui
nt32_t m, uint32_t imm);[] 

Overfull \hbox (59.24883pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx2a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t imm);[] 

Overfull \hbox (43.49887pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3_u32(int coproc, uint32_t n, uint32_t m, u
int32_t imm);[] 

Overfull \hbox (122.24864pt too wide) in paragraph at lines 4866--4866
[]\T1/lmtt/m/n/10 uint32_t __arm_vcx3a_u32(int coproc, uint32_t acc, uint32_t n
, uint32_t m, uint32_t imm);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx1da_u64(int coproc, uint64_t acc, uint32_t 
imm);[] 

Overfull \hbox (64.49881pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx2da_u64(int coproc, uint64_t acc, uint64_t 
m, uint32_t imm);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3d_u64(int coproc, uint64_t n, uint64_t m, 
uint32_t imm);[] 

Overfull \hbox (127.49863pt too wide) in paragraph at lines 4878--4878
[]\T1/lmtt/m/n/10 uint64_t __arm_vcx3da_u64(int coproc, uint64_t acc, uint64_t 
n, uint64_t m, uint32_t imm);[] 
[66]
Overfull \hbox (22.49893pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1q_m(int coproc, T inactive, uint32_t imm, mve_pre
d16_t p);[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2q_m(int coproc, T inactive, U n, uint32_t imm, mv
e_pred16_t p);[] 

Overfull \hbox (74.99878pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3q_m(int coproc, T inactive, U n, V m, uint32_t im
m, mve_pred16_t p);[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx1qa_m(int coproc, T acc, uint32_t imm, mve_pred16_
t p);[] 

Overfull \hbox (27.74892pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx2qa_m(int coproc, T acc, U n, uint32_t imm, mve_pr
ed16_t p);[] 

Overfull \hbox (53.99884pt too wide) in paragraph at lines 4903--4903
[]\T1/lmtt/m/n/10 T __arm_vcx3qa_m(int coproc, T acc, U n, V m, uint32_t imm, m
ve_pred16_t p);[] 
[67]
Overfull \hbox (3.24202pt too wide) in paragraph at lines 4979--4985
\T1/lmr/m/n/10 (-20) These in-trin-sics are avail-able when __ARM_FEATURE_MEMOR
Y_TAGGING
[68] [69] [70]
Underfull \hbox (badness 1019) in paragraph at lines 5191--5193
\T1/lmr/m/n/10 (+20) When spec-i-fy-ing a 32-bit sys-tem reg-is-ter to __arm_rs
r, __arm_rsrp,
[71] [72] [73] [74] [75] [76] [77] [78] [79] [80] [81] [82] [83]
Overfull \hbox (56.56882pt too wide) in paragraph at lines 6094--6097
[]\T1/lmr/m/n/10 (-20) New SHA512 crypto in-struc-tions (avail-able if __ARM_FE
ATURE_SHA512) 

Overfull \hbox (36.96884pt too wide) in paragraph at lines 6097--6099
[]\T1/lmr/m/n/10 (-20) New SHA3 crypto in-struc-tions (avail-able if __ARM_FEAT
URE_SHA3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6099--6101
[]\T1/lmr/m/n/10 (-20) SM3 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M3) 

Overfull \hbox (4.53073pt too wide) in paragraph at lines 6101--6103
[]\T1/lmr/m/n/10 (-20) SM4 crypto in-struc-tions (avail-able if __ARM_FEATURE_S
M4) 

Overfull \hbox (53.27693pt too wide) in paragraph at lines 6103--6105
[]\T1/lmr/m/n/10 (-20) New FML[A|S] in-struc-tions (avail-able if __ARM_FEATURE
_FP16_FML). 
[84] [85] [86] [87]
Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 

Overfull \hbox (1.499pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 mve_pred16_t mask8 = 0x5555;        // Predicate every other 
byte.[] 

Overfull \hbox (48.74886pt too wide) in paragraph at lines 6313--6313
[]\T1/lmtt/m/n/10 uint16x8_t r16 = vaddq_m_u16 (inactive, c, d, mask8); // UNDE
FINED BEHAVIOR[] 

Overfull \hbox (0.21968pt too wide) in paragraph at lines 6336--6341
\T1/lmr/m/n/10 (-20) the __arm_ pre-fix. If the __ARM_MVE_PRESERVE_USER_NAMESPA
CE
[88] [89]
Overfull \hbox (1.68773pt too wide) in paragraph at lines 6465--6472
\T1/lmr/m/n/10 (-20) M-profile Vec-tor Ex-ten-sion sup-port is avail-able if th
e __ARM_FEATURE_MVE

Overfull \hbox (53.99884pt too wide) in paragraph at lines 6481--6481
[]  \T1/lmtt/m/n/10 /* MVE integer and floating point intrinsics are now availa
ble to use.  */[] 
[90] [91]
Overfull \hbox (43.49887pt too wide) in paragraph at lines 6588--6588
[]\T1/lmtt/m/n/10 int __attribute__((svc(0xAB))) system_call(int code, void con
st \*params);[] 
[92] [93]
Underfull \hbox (badness 10000) in paragraph at lines 6736--6738
[]\T1/lmr/m/n/10 (+20) __tcancel (_TM-FAIL-URE_RTRY | (fail-ure_reason & _TM-FA
IL-
[94]
Overfull \hbox (4.09041pt too wide) in paragraph at lines 6766--6767
[]\T1/lmr/bx/n/10 Instruction|  

Underfull \hbox (badness 1052) in paragraph at lines 6823--6826
[]\T1/lmr/m/n/10 (+20) ARMARMv8 Arm, Armv8-A Ref-er-ence Man-ual (Is-sue A.b), 
Arm
[95]
Underfull \hbox (badness 1242) in paragraph at lines 6883--6886
[]\T1/lmr/m/n/10 (+20) MVE-spec Arm, Arm v8-M Ar-chi-tec-ture Ref-er-ence Man-u
al, Arm
[96] (./tex2pdf.-cc69ef23c147effc/input.aux) )
(see the transcript file for additional information)pdfTeX warning (dest): name
{ssec-TMEFailures} has been referenced but does not exist, replaced by a fixed 
one

pdfTeX warning (dest): name{ssec-bf16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-scalar} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-arith} has been referenced but does not e
xist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEON} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-swap} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-sysreg} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-nop} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{sec-Parallel-selection} has been referenced but doe
s not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Constant-arguments-to-intrinsics} has been refe
renced but does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Weak-linkage} has been referenced but does not 
exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Imptype} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Pic} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-rng} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Pcs} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-CoProc} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-WMMX} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-NEONfp} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CDE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MVE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FPm} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16arg} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFP} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Uasih} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16FML} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SM4} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SM3} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA3} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA512} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-SHA2} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-RDM} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-v8max} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATOMICS} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MTE} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMulIns} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-MatMul} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Sbahi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-LDREX} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-JCVT} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HID} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-FMA} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-AES} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-DSPins} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FrintIns} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Frint} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-DotIns} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Dot} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-v8rnd} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CrypE} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-CRC32E} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-CLZ} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-PAC} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-BTI} has been referenced but does not exist, r
eplaced by a fixed one

pdfTeX warning (dest): name{ssec-COMPLX} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Endi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Archp} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso2} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Aoso} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-TfACLE} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-LS64} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-Fpdpi} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-rand} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-crc32} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-BF16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{ssec-FP16fmt} has been referenced but does not exis
t, replaced by a fixed one

pdfTeX warning (dest): name{sec-TME-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-32SIMD} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Wsatin} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Satin} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{ssec-Qflag2} has been referenced but does not exist
, replaced by a fixed one

pdfTeX warning (dest): name{ssec-Mdpi} has been referenced but does not exist, 
replaced by a fixed one

pdfTeX warning (dest): name{ssec-HWFPSIMD} has been referenced but does not exi
st, replaced by a fixed one

pdfTeX warning (dest): name{ssec-ATisa} has been referenced but does not exist,
 replaced by a fixed one

pdfTeX warning (dest): name{sec-Attributes-and-pragmas} has been referenced but
 does not exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-MVE-intrinsics} has been referenced but does no
t exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-NEON-intrinsics} has been referenced but does n
ot exist, replaced by a fixed one

pdfTeX warning (dest): name{sec-Feature-test-macros} has been referenced but do
es not exist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-bf16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-fp16-type} has been referenced but does not ex
ist, replaced by a fixed one

pdfTeX warning (dest): name{ssec-vectypes} has been referenced but does not exi
st, replaced by a fixed one

{/usr/share/texmf/fonts/enc/dvips/lm/lm-ts1.enc}{/usr/share/texmf/fonts/enc/dvi
ps/lm/lm-ec.enc}</usr/share/texmf/fonts/type1/public/lm/lmbx10.pfb></usr/share/
texmf/fonts/type1/public/lm/lmbx12.pfb></usr/share/texmf/fonts/type1/public/lm/
lmr10.pfb></usr/share/texmf/fonts/type1/public/lm/lmr17.pfb></usr/share/texmf/f
onts/type1/public/lm/lmri10.pfb></usr/share/texmf/fonts/type1/public/lm/lmtt10.
pfb>
Output written on ./tex2pdf.-cc69ef23c147effc/input.pdf (96 pages, 410003 bytes
).
Transcript written on ./tex2pdf.-cc69ef23c147effc/input.log.

